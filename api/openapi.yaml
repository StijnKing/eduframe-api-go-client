openapi: 3.0.3
info:
  title: Eduframe - API
  version: v1
servers:
- url: https://api.eduframe.nl/api/v1
security:
- Bearer: []
tags:
- description: ""
  name: accounts
- description: ""
  name: affiliations
- description: ""
  name: attendances
- description: ""
  name: authentications
- description: ""
  name: catalog-products
- description: ""
  name: catalog-variants
- description: ""
  name: categories
- description: ""
  name: comments
- description: ""
  name: course_locations
- description: ""
  name: course_tabs
- description: ""
  name: course_variants
- description: ""
  name: courses
- description: ""
  name: credit_categories
- description: ""
  name: credits
- description: ""
  name: custom_associations
- description: ""
  name: custom_field_options
- description: ""
  name: custom_objects
- description: ""
  name: custom_records
- description: ""
  name: discount_codes
- description: ""
  name: educators
- description: ""
  name: enrollments
- description: ""
  name: grades
- description: ""
  name: invoice_vats
- description: ""
  name: invoices
- description: ""
  name: labels
- description: ""
  name: leads
- description: ""
  name: material_groups
- description: ""
  name: materials
- description: ""
  name: meeting_locations
- description: ""
  name: meetings
- description: ""
  name: orders
- description: ""
  name: payment_methods
- description: ""
  name: payment_options
- description: ""
  name: payments
- description: ""
  name: planned_courses
- description: ""
  name: planning-conflicts
- description: ""
  name: planning-events
- description: ""
  name: planning-locations
- description: ""
  name: planning-materials
- description: ""
  name: planning-teachers
- description: ""
  name: program-blocks
- description: ""
  name: program-editions
- description: ""
  name: program-elements
- description: ""
  name: program-enrollments
- description: ""
  name: program-personal-program-elements
- description: ""
  name: program-programs
- description: ""
  name: referrals
- description: ""
  name: signup_questions
- description: ""
  name: tasks
- description: ""
  name: teacher_enrollments
- description: ""
  name: teacher_roles
- description: ""
  name: teachers
- description: ""
  name: theses
- description: ""
  name: users
- description: ""
  name: webhook-notifications
- description: |2

    <h4 id="label-Setup">Setup<span><a href="#label-Setup">&para;</a> <a href="#top">&uarr;</a></span></h4>

    <p>To setup a webhook, you can create one through the API or go to the admin setting to use the UI.</p>

    <h4 id="label-Webhook+Return+Payload">Webhook Return Payload<span><a href="#label-Webhook+Return+Payload">&para;</a> <a href="#top">&uarr;</a></span></h4>

    <p>An example payload for approving an order would look something like this:</p>

    <pre>{
      &quot;tenant_id&quot;: &quot;uuid&quot;                 // UUID of the tenant
      &quot;educator&quot;: &quot;some-subdomain&quot;,       // Subdomain of the educator
      &quot;event&quot;: &quot;account.updated&quot;          // Event that triggered the webhook
      &quot;event_data&quot;: &quot;Account&quot;,            // Event-specific data
    }</pre>

    <p>The Open API format of these payloads:</p>

    <pre class="ruby">{
      <span class="ruby-value">&quot;tenant_id&quot;:</span> {
        <span class="ruby-value">&quot;type&quot;:</span> <span class="ruby-string">&quot;string&quot;</span>
      },
      <span class="ruby-value">&quot;educator&quot;:</span> {
        <span class="ruby-value">&quot;type&quot;:</span> <span class="ruby-string">&quot;string&quot;</span>
      },
      <span class="ruby-value">&quot;event&quot;:</span> {
        <span class="ruby-value">&quot;type&quot;:</span> <span class="ruby-string">&quot;string&quot;</span>
      },
      <span class="ruby-value">&quot;event_data&quot;:</span> {
        <span class="ruby-value">&quot;type&quot;:</span> <span class="ruby-string">&quot;object&quot;</span>
      }
    }
    </pre>
  name: webhooks
paths:
  /accounts:
    get:
      operationId: get_accounts
      parameters:
      - description: Filter results on search
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Filter results on key_contact_user_id
        explode: true
        in: query
        name: key_contact_user_id
        required: false
        schema:
          type: integer
        style: form
      - description: Filter results on user_id
        explode: true
        in: query
        name: user_id
        required: false
        schema:
          type: integer
        style: form
      - description: Filter results on account_type
        explode: true
        in: query
        name: account_type
        required: false
        schema:
          $ref: '#/components/schemas/AccountType'
        style: form
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AccountWithIncludes'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - relations:read
      summary: Get all accounts
      tags:
      - accounts
    post:
      operationId: create_account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_account_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountWithIncludes'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - relations:modify
      summary: Create an account
      tags:
      - accounts
  /accounts/{id}:
    get:
      operationId: get_account_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - relations:read
      summary: Get a single account
      tags:
      - accounts
    patch:
      operationId: update_account
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_account_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - relations:modify
      summary: Update an account
      tags:
      - accounts
  /affiliations:
    get:
      operationId: get_affiliations
      parameters:
      - description: Filter results on user_id
        explode: true
        in: query
        name: user_id
        required: false
        schema:
          type: integer
        style: form
      - description: Filter results on account_id
        explode: true
        in: query
        name: account_id
        required: false
        schema:
          type: integer
        style: form
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Affiliation'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - relations:read
      summary: Get all affiliations
      tags:
      - affiliations
    post:
      operationId: create_affiliation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_affiliation_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Affiliation'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - relations:modify
      summary: Create an affiliation affiliations
      tags:
      - affiliations
  /affiliations/{id}:
    delete:
      operationId: delete_affiliation_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - relations:destroy
      summary: Delete an affiliation
      tags:
      - affiliations
    patch:
      operationId: update_affiliation_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_affiliation_by_id_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Affiliation'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - relations:modify
      summary: Update an affiliation.
      tags:
      - affiliations
  /attendances:
    get:
      operationId: get_attendances
      parameters:
      - description: Filter attendances on meeting_id
        explode: true
        in: query
        name: meeting_id
        required: false
        schema:
          type: integer
        style: form
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Attendance'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get all attendance records
      tags:
      - attendances
  /attendances/upsert:
    post:
      operationId: set_attendance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/set_attendance_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendance'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:modify
      summary: Set an attendance.
      tags:
      - attendances
  /authentications:
    post:
      operationId: create_authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_authentication_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - authentications:modify
      summary: Create an authentication.
      tags:
      - authentications
  /catalog/products:
    get:
      operationId: get_catalog_products
      parameters:
      - description: Show only published products
        explode: true
        in: query
        name: published
        required: false
        schema:
          enum:
          - published
          type: string
        style: form
      - description: Filter results on category_id
        explode: true
        in: query
        name: category_id
        required: false
        schema:
          type: integer
        style: form
      - description: Filter results on productable_type
        explode: true
        in: query
        name: productable_type
        required: false
        schema:
          enum:
          - Course
          - Program::Program
          type: string
        style: form
      - description: Filter results on search
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Sort the results. Can change order by using `<sort_by>:<direction>`
          where `<direction>` is either `asc` or `desc`
        explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            enum:
            - id:asc
            - id:desc
            - position:asc
            - position:desc
            type: string
          type: array
        style: form
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProductWithIncludes'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get all catalog products
      tags:
      - catalog-products
  /catalog/products/{id}:
    get:
      operationId: get_catalog_product_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get a catalog product record
      tags:
      - catalog-products
    patch:
      operationId: update_catalog_product_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_catalog_product_by_id_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:modify
      summary: Update a catalog product
      tags:
      - catalog-products
  /catalog/variants:
    get:
      operationId: get_catalog_variants
      parameters:
      - description: Only show published variants and planned_courses that are either
          planned or in progress
        explode: true
        in: query
        name: published_public
        required: false
        schema:
          enum:
          - published_public
          type: string
        style: form
      - description: Filter results on product_id
        explode: true
        in: query
        name: product_id
        required: false
        schema:
          type: integer
        style: form
      - description: Filter results on variantable_id
        explode: true
        in: query
        name: variantable_id
        required: false
        schema:
          type: integer
        style: form
      - description: Filter results on variantable_type
        explode: true
        in: query
        name: variantable_type
        required: false
        schema:
          enum:
          - planned_course
          - program_edition
          type: string
        style: form
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/VariantWithIncludes'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get all catalog variants
      tags:
      - catalog-variants
  /catalog/variants/{id}:
    get:
      operationId: get_catalog_variant_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VariantWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get a catalog variant record
      tags:
      - catalog-variants
    patch:
      operationId: update_catalog_variant_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_catalog_variant_by_id_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VariantWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:modify
        - courses:read
      summary: Update a catalog variant
      tags:
      - catalog-variants
  /categories:
    get:
      operationId: get_categories
      parameters:
      - description: Show only published categories
        explode: true
        in: query
        name: published
        required: false
        schema:
          enum:
          - published
          type: string
        style: form
      - description: Sort the results. Can change order by using `<sort_by>:<direction>`
          where `<direction>` is either `asc` or `desc`
        explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            enum:
            - position:asc
            - position:desc
            type: string
          type: array
        style: form
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Category'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get all category records
      tags:
      - categories
    post:
      operationId: create_category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_category_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:modify
      summary: Create a category.
      tags:
      - categories
  /categories/{id}:
    get:
      operationId: get_category_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get a category record
      tags:
      - categories
    patch:
      operationId: update_category_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_category_by_id_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:modify
      summary: Update a category.
      tags:
      - categories
  /comments:
    post:
      operationId: create_comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_comment_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Create a comment.
      tags:
      - comments
  /comments/{id}:
    delete:
      operationId: delete_comment_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Delete a comment.
      tags:
      - comments
    patch:
      operationId: update_comment_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_comment_by_id_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Update a comment.
      tags:
      - comments
  /course_locations:
    get:
      operationId: get_course_locations
      parameters:
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CourseLocationWithIncludes'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get all course location records
      tags:
      - course_locations
    post:
      operationId: create_course_location
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_course_location_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseLocationWithIncludes'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:modify
      summary: Create a course location.
      tags:
      - course_locations
  /course_locations/{id}:
    delete:
      operationId: delete_course_location_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - destroyable_settings:destroy
      summary: Delete a course location.
      tags:
      - course_locations
    get:
      operationId: get_course_location_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseLocationWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get a course location record
      tags:
      - course_locations
    patch:
      operationId: update_course_location_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_course_location_by_id_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseLocationWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:modify
      summary: Update a course location.
      tags:
      - course_locations
  /course_tabs:
    get:
      operationId: get_course_tabs
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CourseTab'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Get all course tab records
      tags:
      - course_tabs
  /course_variants:
    get:
      operationId: get_course_variants
      parameters:
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CourseVariant'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get all course variant records
      tags:
      - course_variants
    post:
      operationId: create_course_variant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_course_variant_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseVariant'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:modify
        - settings:read
      summary: Create a course variant
      tags:
      - course_variants
  /course_variants/{id}:
    get:
      operationId: get_course_variant_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseVariant'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get a course variant record
      tags:
      - course_variants
  /courses:
    get:
      operationId: get_courses
      parameters:
      - description: Show only published courses
        explode: true
        in: query
        name: published
        required: false
        schema:
          enum:
          - published
          type: string
        style: form
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CourseWithIncludes'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get all course records
      tags:
      - courses
    post:
      operationId: create_course
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CoursePayload'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseWithIncludes'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:modify
        - courses:read
      summary: Create a course.
      tags:
      - courses
  /courses/{id}:
    get:
      operationId: get_course_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get a course record
      tags:
      - courses
    patch:
      operationId: update_course_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CoursePatchPayload'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:modify
        - courses:read
      summary: Update a course.
      tags:
      - courses
  /courses/{course_id}/planned_courses:
    get:
      operationId: get_planned_courses_by_course_id
      parameters:
      - explode: false
        in: path
        name: course_id
        required: true
        schema:
          type: integer
        style: simple
      - description: Filter results on search
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Filter results on type
        explode: true
        in: query
        name: type
        required: false
        schema:
          enum:
          - FixedPlannedCourse
          - FlexiblePlannedCourse
          type: string
        style: form
      - description: Filter results on parents_published
        explode: true
        in: query
        name: parents_published
        required: false
        schema:
          enum:
          - parents_published
          type: string
        style: form
      - description: Only show courses that are published and are either planned or
          in progress
        explode: true
        in: query
        name: published_public
        required: false
        schema:
          enum:
          - published_public
          type: string
        style: form
      - description: Filter results on start_date_from
        explode: true
        in: query
        name: start_date_from
        required: false
        schema:
          type: string
        style: form
      - description: Filter results on start_date_until
        explode: true
        in: query
        name: start_date_until
        required: false
        schema:
          type: string
        style: form
      - description: Filter results on availability_state
        explode: true
        in: query
        name: availability_state
        required: false
        schema:
          $ref: '#/components/schemas/AvailabilityState'
        style: form
      - description: Filter results on status
        explode: true
        in: query
        name: status
        required: false
        schema:
          $ref: '#/components/schemas/PlannedCourseStatus'
        style: form
      - description: Sort the results. Can change order by using `<sort_by>:<direction>`
          where `<direction>` is either `asc` or `desc`
        explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            enum:
            - start_date:asc
            - start_date:desc
            type: string
          type: array
        style: form
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PlannedCourseWithIncludes'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get all planned course records of a single course
      tags:
      - planned_courses
  /courses/{course_id}/planned_courses/{id}:
    get:
      operationId: get_planned_courses_by_id_and_course_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      - explode: false
        in: path
        name: course_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlannedCourseWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get a planned course record of a single course
      tags:
      - planned_courses
  /credit_categories:
    get:
      operationId: get_credit_categories
      parameters:
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CreditCategoryWithIncludes'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get all credit category records
      tags:
      - credit_categories
  /credits:
    get:
      operationId: get_credits
      parameters:
      - description: Filter results on student_id
        explode: true
        in: query
        name: student_id
        required: false
        schema:
          type: integer
        style: form
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Credit'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get all credit records
      tags:
      - credits
  /custom/{object_type}/associations:
    get:
      description: |
        ![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)
      operationId: get_associations_of_object
      parameters:
      - description: |
          The type of the object the custom field is for.
        explode: false
        in: path
        name: object_type
        required: true
        schema:
          enum:
          - users
          - accounts
          - catalog_products
          - catalog_variants
          - teachers
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CustomAssociation'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get all associations of an system object
      tags:
      - custom_associations
      x-badges:
      - name: Beta
        color: '#7d15a3'
        position: after
  /custom/{object_type}/fields/{field_slug}/options:
    get:
      operationId: get_options_of_custom_field
      parameters:
      - description: |
          The type of the object the custom field is for.
        explode: false
        in: path
        name: object_type
        required: true
        schema:
          enum:
          - users
          - accounts
          - catalog_products
          - catalog_variants
          - teachers
          type: string
        style: simple
      - description: |
          The unique identifier of the custom field.
        explode: false
        in: path
        name: field_slug
        required: true
        schema:
          type: string
        style: simple
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CustomFieldOption'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get all options of a custom field
      tags:
      - custom_field_options
      x-badges:
      - name: Beta
        color: '#7d15a3'
        position: after
    post:
      operationId: add_option_to_custom_field
      parameters:
      - description: |
          The type of the object the custom field is for.
        explode: false
        in: path
        name: object_type
        required: true
        schema:
          enum:
          - users
          - accounts
          - catalog_products
          - catalog_variants
          - teachers
          type: string
        style: simple
      - description: |
          The unique identifier of the custom field.
        explode: false
        in: path
        name: field_slug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldOptionPayload'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldOption'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:modify
      summary: Add an option to a custom field
      tags:
      - custom_field_options
      x-badges:
      - name: Beta
        color: '#7d15a3'
        position: after
  /custom/{object_type}/fields/{field_slug}/options/{option_id}:
    delete:
      operationId: delete_option_of_custom_field
      parameters:
      - description: |
          The type of the object the custom field is for.
        explode: false
        in: path
        name: object_type
        required: true
        schema:
          enum:
          - users
          - accounts
          - catalog_products
          - catalog_variants
          - teachers
          type: string
        style: simple
      - description: |
          The unique identifier of the custom field.
        explode: false
        in: path
        name: field_slug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: option_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: No content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:modify
      summary: Delete an option from custom field
      tags:
      - custom_field_options
      x-badges:
      - name: Beta
        color: '#7d15a3'
        position: after
    get:
      operationId: get_option_of_custom_field
      parameters:
      - description: |
          The type of the object the custom field is for.
        explode: false
        in: path
        name: object_type
        required: true
        schema:
          enum:
          - users
          - accounts
          - catalog_products
          - catalog_variants
          - teachers
          type: string
        style: simple
      - description: |
          The unique identifier of the custom field.
        explode: false
        in: path
        name: field_slug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: option_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldOption'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get an option of a custom field
      tags:
      - custom_field_options
      x-badges:
      - name: Beta
        color: '#7d15a3'
        position: after
    patch:
      operationId: update_option_of_custom_field
      parameters:
      - description: |
          The type of the object the custom field is for.
        explode: false
        in: path
        name: object_type
        required: true
        schema:
          enum:
          - users
          - accounts
          - catalog_products
          - catalog_variants
          - teachers
          type: string
        style: simple
      - description: |
          The unique identifier of the custom field.
        explode: false
        in: path
        name: field_slug
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: option_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldOptionPatchPayload'
        required: true
      responses:
        "204":
          description: No content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:modify
      summary: Update an option of a custom field
      tags:
      - custom_field_options
      x-badges:
      - name: Beta
        color: '#7d15a3'
        position: after
  /custom/objects:
    get:
      description: |
        ![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)
      operationId: get_custom_objects
      parameters:
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CustomObject'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get all custom objects
      tags:
      - custom_objects
      x-badges:
      - name: Beta
        color: '#7d15a3'
        position: after
  /custom/objects/{object_id}:
    get:
      description: |
        ![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)
      operationId: get_custom_object_by_object_id
      parameters:
      - description: |
          The unique identifier of the custom object.
        explode: false
        in: path
        name: object_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomObjectWithFields'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get a custom object by object_id
      tags:
      - custom_objects
      x-badges:
      - name: Beta
        color: '#7d15a3'
        position: after
  /custom/objects/{object_id}/records:
    get:
      description: |
        ![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)
      operationId: get_custom_records
      parameters:
      - description: |
          The unique identifier of the custom object.
        explode: false
        in: path
        name: object_id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CustomRecord'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get all custom records
      tags:
      - custom_records
      x-badges:
      - name: Beta
        color: '#7d15a3'
        position: after
    post:
      description: |
        ![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)
      operationId: create_custom_record
      parameters:
      - description: |
          The unique identifier of the custom object.
        explode: false
        in: path
        name: object_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomRecordPayload'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRecord'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:modify
      summary: Create a custom record
      tags:
      - custom_records
      x-badges:
      - name: Beta
        color: '#7d15a3'
        position: after
  /custom/objects/{object_id}/records/{record_id}:
    delete:
      description: |
        ![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)
      operationId: delete_custom_record
      parameters:
      - description: |
          The unique identifier of the custom object.
        explode: false
        in: path
        name: object_id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          The unique identifier of the custom record.
        explode: false
        in: path
        name: record_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: No content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - destroyable_settings:destroy
      summary: Delete a custom record
      tags:
      - custom_records
      x-badges:
      - name: Beta
        color: '#7d15a3'
        position: after
    get:
      description: |
        ![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)
      operationId: get_custom_record
      parameters:
      - description: |
          The unique identifier of the custom object.
        explode: false
        in: path
        name: object_id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          The unique identifier of the custom record.
        explode: false
        in: path
        name: record_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRecord'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get a custom record
      tags:
      - custom_records
      x-badges:
      - name: Beta
        color: '#7d15a3'
        position: after
    patch:
      description: |
        ![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)
      operationId: update_custom_record
      parameters:
      - description: |
          The unique identifier of the custom object.
        explode: false
        in: path
        name: object_id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          The unique identifier of the custom record.
        explode: false
        in: path
        name: record_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomRecordPatchPayload'
        required: true
      responses:
        "204":
          description: No content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:modify
      summary: Update a custom record
      tags:
      - custom_records
      x-badges:
      - name: Beta
        color: '#7d15a3'
        position: after
  /customers/{id}: {}
  /discount_codes:
    get:
      operationId: get_discount_codes
      parameters:
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DiscountCode'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - orders:read
      summary: Get all discount codes
      tags:
      - discount_codes
  /educators/current:
    get:
      operationId: get_current_educator
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EducatorWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Precondition Failed
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Get an educator record
      tags:
      - educators
  /enrollments:
    get:
      operationId: get_enrollments
      parameters:
      - description: Filter results on student_id
        explode: true
        in: query
        name: student_id
        required: false
        schema:
          type: integer
        style: form
      - description: Filter results on planned_course_id
        explode: true
        in: query
        name: planned_course_id
        required: false
        schema:
          type: integer
        style: form
      - description: Filter results on status
        explode: true
        in: query
        name: status
        required: false
        schema:
          items:
            enum:
            - confirmed
            - active
            - canceled
            - completed
            type: string
          type: array
        style: form
      - description: Filter results based on whether they include a canceled status
          or not
        explode: true
        in: query
        name: with_canceled
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/EnrollmentWithIncludes'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - orders:read
      summary: Get all enrollment records
      tags:
      - enrollments
  /enrollments/{id}:
    get:
      operationId: get_enrollment_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - orders:read
      summary: Get an enrollment record
      tags:
      - enrollments
    patch:
      operationId: update_enrollment_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_enrollment_by_id_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - orders:read
        - orders:modify
      summary: Update an enrollment
      tags:
      - enrollments
  /enrollments/{id}/cancel:
    put:
      operationId: cancel_enrollment_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - orders:read
        - orders:modify
      summary: Cancel an enrollment
      tags:
      - enrollments
  /grades:
    post:
      operationId: create_grade
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_grade_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Grade'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - orders:modify
      summary: Create a grade
      tags:
      - grades
  /grades/{id}:
    delete:
      operationId: delete_grade_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - orders:destroy
      summary: Delete a grade.
      tags:
      - grades
    get:
      operationId: get_grade_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Grade'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - orders:read
      summary: Get a grade record
      tags:
      - grades
    patch:
      operationId: update_grade_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_grade_by_id_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Grade'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - orders:modify
      summary: Update a grade
      tags:
      - grades
  /invoice_vats:
    get:
      operationId: get_invoice_vats
      parameters:
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/InvoiceVatWithIncludes'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get all invoice vat records
      tags:
      - invoice_vats
    post:
      operationId: create_invoice_vat
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_invoice_vat_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceVatWithIncludes'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:modify
      summary: Create an invoice vat.
      tags:
      - invoice_vats
  /invoices:
    get:
      operationId: get_invoices
      parameters:
      - description: Filter results on account_id
        explode: true
        in: query
        name: account_id
        required: false
        schema:
          type: integer
        style: form
      - description: Filter results on status
        explode: true
        in: query
        name: status
        required: false
        schema:
          items:
            $ref: '#/components/schemas/InvoiceStatus'
          type: array
        style: form
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/InvoiceWithIncludes'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - invoices:read
      summary: Get all invoice records
      tags:
      - invoices
    post:
      operationId: create_invoice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_invoice_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceWithIncludes'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - invoices:read
        - invoices:modify
      summary: Create an invoice.
      tags:
      - invoices
  /invoices/{id}:
    get:
      operationId: get_invoice_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - invoices:read
      summary: Get an invoice record
      tags:
      - invoices
  /invoices/{id}/open:
    post:
      operationId: open_invoice_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - invoices:read
        - invoices:modify
      summary: |
        Changes the state from concept to open.
        This will assign the actual invoice number so it's ready for sending.
        If the current state is not concept, this endpoint does nothing.
      tags:
      - invoices
  /invoices/{id}/pdf:
    get:
      operationId: get_invoice_pdf_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: object
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - invoices:read
      summary: Get the base64 encoded version of the invoice PDF
      tags:
      - invoices
  /invoices/{invoice_id}/invoice_items: {}
  /invoices/{invoice_id}/payments:
    get:
      operationId: get_invoice_payments_by_invoice_id
      parameters:
      - description: Filter results on invoice_id
        explode: false
        in: path
        name: invoice_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PaymentWithIncludes'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - payments:read
      summary: Get all payment records of an invoice
      tags:
      - payments
    post:
      operationId: create_invoice_payment_by_invoice_id
      parameters:
      - description: Filter results on invoice_id
        explode: false
        in: path
        name: invoice_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_invoice_payment_by_invoice_id_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentWithFixedIncludes'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - payments:modify
      summary: Create a payment.
      tags:
      - payments
  /invoices/{invoice_id}/payments/{id}:
    delete:
      operationId: delete_invoice_payment_by_id_and_invoice_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      - explode: false
        in: path
        name: invoice_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - destroyable_payments:destroy
      summary: Delete a payment.
      tags:
      - payments
  /labels:
    get:
      operationId: get_labels
      parameters:
      - description: Filter results on model_type
        explode: true
        in: query
        name: model_type
        required: false
        schema:
          enum:
          - Lead
          - Order
          - Catalog::Product
          - User
          - Account
          - Teacher
          - Program::Enrollment
          type: string
        style: form
      - description: Filter results on search
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Filter results on id
        explode: true
        in: query
        name: id
        required: false
        schema:
          items:
            type: integer
          type: array
        style: form
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Label'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get all labels
      tags:
      - labels
    post:
      operationId: create_label
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_label_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:modify
      summary: Create a label
      tags:
      - labels
  /labels/{id}:
    delete:
      operationId: delete_label_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - destroyable_settings:destroy
      summary: Delete a label
      tags:
      - labels
    get:
      operationId: get_label_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get a label
      tags:
      - labels
    patch:
      operationId: update_label_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_label_by_id_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:modify
      summary: Update a label
      tags:
      - labels
  /leads:
    get:
      operationId: get_leads
      parameters:
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LeadWithIncludes'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - leads:read
      summary: Get all lead records
      tags:
      - leads
    post:
      operationId: create_lead
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_lead_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: OK
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadWithIncludes'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - leads:modify
      summary: Create a lead.
      tags:
      - leads
  /leads/{id}:
    delete:
      operationId: delete_lead_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - leads:destroy
      summary: Delete a lead.
      tags:
      - leads
    get:
      operationId: get_lead_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - leads:read
      summary: Get one lead record
      tags:
      - leads
  /material_groups:
    get:
      operationId: get_material_groups
      parameters:
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MaterialGroup'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get all material group records
      tags:
      - material_groups
    post:
      operationId: create_material_group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_material_group_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaterialGroup'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:modify
      summary: Create a material group.
      tags:
      - material_groups
  /material_groups/{id}:
    delete:
      operationId: delete_material_group_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - destroyable_settings:destroy
      summary: Delete a material group.
      tags:
      - material_groups
    get:
      operationId: get_material_group_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaterialGroup'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get a material group record
      tags:
      - material_groups
    patch:
      operationId: update_material_group_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_material_group_by_id_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaterialGroup'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:modify
      summary: Update a material group.
      tags:
      - material_groups
  /materials:
    get:
      operationId: get_materials
      parameters:
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MaterialWithIncludes'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get all material records
      tags:
      - materials
    post:
      operationId: create_material
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_material_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaterialWithIncludes'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:modify
      summary: Create a material.
      tags:
      - materials
  /materials/{id}:
    delete:
      operationId: delete_material_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - destroyable_settings:destroy
      summary: Delete a material.
      tags:
      - materials
    patch:
      operationId: update_material_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_material_by_id_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaterialWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:modify
      summary: Update a material.
      tags:
      - materials
  /meeting_locations:
    get:
      operationId: get_meeting_locations
      parameters:
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MeetingLocationWithIncludes'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get all meeting location records
      tags:
      - meeting_locations
    post:
      operationId: create_meeting_location
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_meeting_location_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeetingLocationWithIncludes'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:modify
      summary: Create a meeting location.
      tags:
      - meeting_locations
  /meeting_locations/{id}:
    delete:
      operationId: delete_meeting_location_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - destroyable_settings:destroy
      summary: Delete a course location.
      tags:
      - meeting_locations
    get:
      operationId: get_meeting_location_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeetingLocationWithIncludes'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      security:
      - Bearer:
        - settings:read
      summary: Get an meeting location
      tags:
      - meeting_locations
    patch:
      operationId: update_meeting_location_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_meeting_location_by_id_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeetingLocationWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:modify
      summary: Update a meeting location.
      tags:
      - meeting_locations
  /meetings:
    get:
      operationId: get_meetings
      parameters:
      - description: Filter results on planned_course_id
        explode: true
        in: query
        name: planned_course_id
        required: false
        schema:
          type: integer
        style: form
      - description: Only show meetings ending after this date and time
        explode: true
        in: query
        name: start
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Only show meetings starting before this date and time
        explode: true
        in: query
        name: end
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MeetingWithIncludes'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get all meeting records
      tags:
      - meetings
  /meetings/{id}:
    delete:
      operationId: delete_meeting_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:destroy
      summary: Delete a meeting.
      tags:
      - meetings
    get:
      operationId: get_meeting_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeetingWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get an meeting record
      tags:
      - meetings
  /meetings/{id}/materials:
    get:
      operationId: get_planning_materials_of_meeting
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PlanningMaterial'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get all planning materials of a meeting
      tags:
      - planning-materials
  /orders:
    get:
      operationId: get_orders
      parameters:
      - description: Filter results on creator_id
        explode: true
        in: query
        name: creator_id
        required: false
        schema:
          type: integer
        style: form
      - description: Filter results on created_at_after
        explode: true
        in: query
        name: created_at_after
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Sort the results. Can change order by using `<sort_by>:<direction>`
          where `<direction>` is either `asc` or `desc`
        explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            enum:
            - created_at:asc
            - created_at:desc
            type: string
          type: array
        style: form
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OrderWithIncludes'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - orders:read
      summary: Get all order records
      tags:
      - orders
    post:
      operationId: create_order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_order_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: OK
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderWithIncludes'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - orders:modify
      summary: Create an order.
      tags:
      - orders
  /orders/{id}:
    get:
      operationId: get_order_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - orders:read
      summary: Get an order record
      tags:
      - orders
  /orders/{id}/approve:
    put:
      operationId: approve_order_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - orders:read
        - orders:modify
      summary: Approve an order
      tags:
      - orders
  /orders/{id}/cancel:
    put:
      operationId: cancel_order_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - orders:read
        - orders:modify
      summary: Cancel an order
      tags:
      - orders
  /orders/{id}/deny:
    put:
      operationId: deny_order_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - orders:read
        - orders:modify
      summary: Deny an order
      tags:
      - orders
  /orders/{id}/labels:
    post:
      operationId: add_label_to_order
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/add_label_to_order_request'
        required: true
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - orders:modify
      summary: Add label to an order
      tags:
      - labels
  /payment_methods:
    get:
      operationId: get_payment_methods
      parameters:
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PaymentMethod'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get all payment method records available for customers
      tags:
      - payment_methods
  /payment_options:
    get:
      operationId: get_payment_options
      parameters:
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PaymentOption'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get all payment option records
      tags:
      - payment_options
  /payments/{id}:
    get:
      operationId: get_payment_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - payments:read
      summary: Get one payment record
      tags:
      - payments
  /planned_courses:
    get:
      operationId: get_planned_courses
      parameters:
      - description: Filter results on search
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Filter results on type
        explode: true
        in: query
        name: type
        required: false
        schema:
          enum:
          - FixedPlannedCourse
          - FlexiblePlannedCourse
          type: string
        style: form
      - description: Filter results on parents_published
        explode: true
        in: query
        name: parents_published
        required: false
        schema:
          enum:
          - parents_published
          type: string
        style: form
      - description: Only show courses that are published and are either planned or
          in progress
        explode: true
        in: query
        name: published_public
        required: false
        schema:
          enum:
          - published_public
          type: string
        style: form
      - description: Filter results on start_date_from
        explode: true
        in: query
        name: start_date_from
        required: false
        schema:
          type: string
        style: form
      - description: Filter results on start_date_until
        explode: true
        in: query
        name: start_date_until
        required: false
        schema:
          type: string
        style: form
      - description: Filter results on availability_state
        explode: true
        in: query
        name: availability_state
        required: false
        schema:
          enum:
          - open
          - closed
          type: string
        style: form
      - description: Filter results on course_id
        explode: true
        in: query
        name: course_id
        required: false
        schema:
          items:
            type: integer
          type: array
        style: form
      - description: Filter results on status
        explode: true
        in: query
        name: status
        required: false
        schema:
          items:
            enum:
            - planned
            - active
            - completed
            - canceled
            type: string
          type: array
        style: form
      - description: Sort the results. Can change order by using `<sort_by>:<direction>`
          where `<direction>` is either `asc` or `desc`
        explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            enum:
            - start_date:asc
            - start_date:desc
            type: string
          type: array
        style: form
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PlannedCourseWithIncludes'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get all planned course records
      tags:
      - planned_courses
    post:
      operationId: create_planned_course
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlannedCoursePayload'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlannedCourseWithIncludes'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:modify
      summary: Create a planned course.
      tags:
      - planned_courses
  /planned_courses/{id}:
    get:
      operationId: get_planned_course_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlannedCourseWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get a planned course record
      tags:
      - planned_courses
    patch:
      operationId: update_planned_course_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlannedCoursePatchPayload'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlannedCourseWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:modify
      summary: Update a planned course.
      tags:
      - planned_courses
  /planned_courses/{id}/cancel:
    put:
      operationId: cancel_planned_course_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlannedCourseWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:destroy
      summary: Cancel a planned course.
      tags:
      - planned_courses
  /planned_courses/{planned_course_id}/meetings:
    get:
      operationId: get_meetings_by_planned_course_id
      parameters:
      - description: Filter results on planned_course_id
        explode: false
        in: path
        name: planned_course_id
        required: true
        schema:
          type: string
        style: simple
      - description: Sort the results. Can change order by using `<sort_by>:<direction>`
          where `<direction>` is either `asc` or `desc`
        explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            enum:
            - start_date_time:asc
            - start_date_time:desc
            - name:asc
            - name:desc
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MeetingWithIncludes'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get all meeting records of a planned course
      tags:
      - meetings
  /planned_courses/{planned_course_id}/teacher_enrollments:
    get:
      operationId: get_teacher_enrollments_by_planned_course_id
      parameters:
      - description: Filter results on planned_course_id
        explode: false
        in: path
        name: planned_course_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TeacherEnrollment'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get all teacher enrollments for given planned course.
      tags:
      - teacher_enrollments
    post:
      operationId: create_teacher_enrollment_by_planned_course_id
      parameters:
      - description: Filter results on planned_course_id
        explode: false
        in: path
        name: planned_course_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_teacher_enrollment_by_planned_course_id_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherEnrollment'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:modify
      summary: Enroll a teacher to the given planned course.
      tags:
      - teacher_enrollments
  /planning/conflicts:
    get:
      operationId: get_planning_conflicts
      parameters:
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PlanningConflict'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get all conflicts
      tags:
      - planning-conflicts
  /planning/events:
    get:
      operationId: get_planning_events
      parameters:
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PlanningEventWithIncludes'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get all planning event records
      tags:
      - planning-events
  /planning/events/{id}:
    delete:
      operationId: delete_planning_event_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:destroy
      summary: Delete a planning event.
      tags:
      - planning-events
    get:
      operationId: get_planning_event_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanningEventWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get an planning event record
      tags:
      - planning-events
  /planning/events/{id}/materials:
    get:
      operationId: get_planning_materials_of_planing_event
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PlanningMaterial'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
        - settings:read
      summary: Get all planning materials of a planning event
      tags:
      - planning-materials
  /planning/locations:
    get:
      operationId: get_planning_locations
      parameters:
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MeetingLocation'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get all locations that are available
      tags:
      - planning-locations
  /planning/materials:
    get:
      operationId: get_planning_materials
      parameters:
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Material'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get all materials that are available
      tags:
      - planning-materials
  /planning/teachers:
    get:
      operationId: get_planning_teachers
      parameters:
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - relations:read
      summary: Get all teachers that are available
      tags:
      - planning-teachers
  /plugins/data/{id}: {}
  /plugins/plugins/{id}: {}
  /program/editions:
    get:
      description: |
        ![Program](https://img.shields.io/badge/Feature-Programs-1d8127)
      operationId: get_program_editions
      parameters:
      - description: Filter results on program_id
        explode: true
        in: query
        name: program_id
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/EditionWithIncludes'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get all program editions
      tags:
      - program-editions
    post:
      description: |
        ![Program](https://img.shields.io/badge/Feature-Programs-1d8127)
      operationId: create_program_edition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgramEditionPayload'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditionWithIncludes'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:modify
      summary: Create a program edition
      tags:
      - program-editions
  /program/editions/{id}:
    delete:
      description: |
        ![Program](https://img.shields.io/badge/Feature-Programs-1d8127)
      operationId: delete_program_edition_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:destroy
      summary: Delete a program edition
      tags:
      - program-editions
    get:
      description: |
        ![Program](https://img.shields.io/badge/Feature-Programs-1d8127)
      operationId: get_program_edition_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditionWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get a program edition
      tags:
      - program-editions
    patch:
      description: |
        ![Program](https://img.shields.io/badge/Feature-Programs-1d8127)
      operationId: update_program_edition_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgramEditionPatchPayload'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditionWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:modify
      summary: Update a program edition
      tags:
      - program-editions
  /program/editions/{id}/elements:
    get:
      description: |
        ![Program](https://img.shields.io/badge/Feature-Programs-1d8127)
      operationId: get_elements_of_program_edition
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProgramEditionElement'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get the elements of a program edition
      tags:
      - program-editions
      x-badges:
      - name: Beta
        color: '#7d15a3'
        position: after
  /program/elements:
    get:
      description: |
        ![Program](https://img.shields.io/badge/Feature-Programs-1d8127)

        This endpoint will only return elements of type 'Course Element' that are directly linked to the program edition(s). It does not consider possible blocks.
      operationId: get_program_elements
      parameters:
      - description: Filter results on edition_id
        explode: true
        in: query
        name: edition_id
        required: false
        schema:
          type: integer
        style: form
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Element'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get all elements
      tags:
      - program-elements
    post:
      description: |
        ![Program](https://img.shields.io/badge/Feature-Programs-1d8127)

        This endpoint can only create elements of type 'Course Element' that are directly linked to the program edition(s). It does not consider possible blocks.
      operationId: create_program_element
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_program_element_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:modify
      summary: Create a program element
      tags:
      - program-elements
  /program/elements/{id}:
    delete:
      description: |
        ![Program](https://img.shields.io/badge/Feature-Programs-1d8127)

        This endpoint can only remove elements of type 'Course Element' that are directly linked to the program edition(s). It does not consider possible blocks.
      operationId: delete_program_element_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:destroy
      summary: Delete a element
      tags:
      - program-elements
    get:
      description: |
        ![Program](https://img.shields.io/badge/Feature-Programs-1d8127)

        This endpoint will only return elements of type 'Course Element' that are directly linked to the program edition(s). It does not consider possible blocks.
      operationId: get_program_element_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get an element
      tags:
      - program-elements
    patch:
      description: |
        ![Program](https://img.shields.io/badge/Feature-Programs-1d8127)

        This endpoint can only change elements of type 'Course Element' that are directly linked to the program edition(s). It does not consider possible blocks.
      operationId: update_program_element_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_program_element_by_id_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:modify
      summary: Update an element
      tags:
      - program-elements
  /program/enrollments:
    get:
      description: |
        ![Program](https://img.shields.io/badge/Feature-Programs-1d8127)
      operationId: get_program_enrollments
      parameters:
      - description: Filter results on student_id
        explode: true
        in: query
        name: student_id
        required: false
        schema:
          type: integer
        style: form
      - description: Filter results on edition_id
        explode: true
        in: query
        name: edition_id
        required: false
        schema:
          type: integer
        style: form
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProgramEnrollmentWithIncludes'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get all program enrollments
      tags:
      - program-enrollments
  /program/enrollments/{id}:
    get:
      description: |
        ![Program](https://img.shields.io/badge/Feature-Programs-1d8127)
      operationId: get_program_enrollment_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramEnrollmentWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get a program enrollment record
      tags:
      - program-enrollments
  /program/enrollments/{id}/award_certificate:
    put:
      description: |
        ![Program](https://img.shields.io/badge/Feature-Programs-1d8127)
      operationId: award_certificate_to_program_enrollment_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/award_certificate_to_program_enrollment_by_id_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramEnrollmentWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
        - courses:modify
      summary: Awards a certificate to a program enrollment
      tags:
      - program-enrollments
  /program/enrollments/{id}/cancel:
    put:
      description: |
        ![Program](https://img.shields.io/badge/Feature-Programs-1d8127)
      operationId: cancel_program_enrollment_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramEnrollmentWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
        - courses:modify
      summary: Cancel a program enrollment
      tags:
      - program-enrollments
  /program/enrollments/{id}/delete_certificate:
    post:
      description: |
        ![Program](https://img.shields.io/badge/Feature-Programs-1d8127)
      operationId: delete_certificate_from_program_enrollment_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramEnrollmentWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
        - courses:modify
      summary: Deletes a certificate from a program enrollment
      tags:
      - program-enrollments
  /program/programs:
    get:
      description: |
        ![Program](https://img.shields.io/badge/Feature-Programs-1d8127)
      operationId: get_programs
      parameters:
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProgramWithIncludes'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get all programs
      tags:
      - program-programs
    post:
      description: |
        ![Program](https://img.shields.io/badge/Feature-Programs-1d8127)
      operationId: create_program
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgramProgramPayload'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramWithIncludes'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:modify
      summary: Create a program
      tags:
      - program-programs
  /program/programs/{id}:
    delete:
      description: |
        ![Program](https://img.shields.io/badge/Feature-Programs-1d8127)
      operationId: delete_program_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:destroy
      summary: Delete a program
      tags:
      - program-programs
    get:
      description: |
        ![Program](https://img.shields.io/badge/Feature-Programs-1d8127)
      operationId: get_program_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get a program
      tags:
      - program-programs
    patch:
      description: |
        ![Program](https://img.shields.io/badge/Feature-Programs-1d8127)
      operationId: update_program_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgramProgramPatchPayload'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:modify
      summary: Update a program
      tags:
      - program-programs
  /referrals:
    get:
      operationId: get_referrals
      parameters:
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Referral'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get all referral records
      tags:
      - referrals
  /signup_questions:
    get:
      operationId: get_signup_questions
      parameters:
      - description: Filter results on for_user
        explode: true
        in: query
        name: for_user
        required: false
        schema:
          enum:
          - for_user
          type: string
        style: form
      - description: Filter results on for_account
        explode: true
        in: query
        name: for_account
        required: false
        schema:
          enum:
          - for_account
          type: string
        style: form
      - description: Filter results on for_type
        explode: true
        in: query
        name: for_type
        required: false
        schema:
          enum:
          - user
          - teacher
          - account
          - catalog_product
          - order
          - catalog_variant
          type: string
        style: form
      - description: Filter results on visibility
        explode: true
        in: query
        name: visibility
        required: false
        schema:
          type: string
        style: form
      - description: Filter results on use_as_duplicate_indicator
        explode: true
        in: query
        name: use_as_duplicate_indicator
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SignupQuestion'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get all signup_question records
      tags:
      - signup_questions
  /tasks:
    get:
      operationId: get_tasks
      parameters:
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Task'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Get all task records
      tags:
      - tasks
    post:
      operationId: create_task
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_task_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Create a task.
      tags:
      - tasks
  /tasks/{id}:
    delete:
      operationId: delete_task_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Delete a task.
      tags:
      - tasks
    get:
      operationId: get_task_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Get a task record
      tags:
      - tasks
    patch:
      operationId: update_task_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_task_by_id_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Update a task.
      tags:
      - tasks
  /teacher_enrollments:
    get:
      operationId: get_teacher_enrollments
      parameters:
      - description: Filter results on planned_course_id
        explode: true
        in: query
        name: planned_course_id
        required: false
        schema:
          type: integer
        style: form
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TeacherEnrollment'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get all teacher enrollments.
      tags:
      - teacher_enrollments
    post:
      operationId: create_teacher_enrollment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_teacher_enrollment_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherEnrollment'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:modify
      summary: Enroll a teacher to a planned_course.
      tags:
      - teacher_enrollments
  /teacher_enrollments/{id}:
    delete:
      operationId: delete_teacher_enrollment_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:destroy
      summary: Delete a teacher enrollment.
      tags:
      - teacher_enrollments
    patch:
      operationId: update_teacher_enrollment_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_teacher_enrollment_by_id_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherEnrollment'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:modify
      summary: Update a teacher enrollment.
      tags:
      - teacher_enrollments
  /teacher_roles:
    get:
      operationId: get_teacher_roles
      parameters:
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TeacherRole'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get all teacher roles
      tags:
      - teacher_roles
    post:
      operationId: create_teacher_role
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_teacher_role_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherRole'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:modify
      summary: Create a teacher role.
      tags:
      - teacher_roles
  /teacher_roles/{id}:
    delete:
      operationId: delete_teacher_role_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:destroy
      summary: Delete a teacher role.
      tags:
      - teacher_roles
    get:
      operationId: get_teacher_role_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherRole'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get a teacher role
      tags:
      - teacher_roles
    patch:
      operationId: update_teacher_role_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_teacher_role_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherRole'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:modify
      summary: Update a teacher role.
      tags:
      - teacher_roles
  /teachers:
    get:
      operationId: get_teachers
      parameters:
      - description: Filter results on search
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Filter results on label_id
        explode: true
        in: query
        name: label_id
        required: false
        schema:
          items:
            type: integer
          type: array
        style: form
      - description: Filter results on id
        explode: true
        in: query
        name: id
        required: false
        schema:
          items:
            type: integer
          type: array
        style: form
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TeacherWithIncludes'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - teachers:read
      summary: Get all teacher records
      tags:
      - teachers
    post:
      operationId: create_teacher
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_teacher_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_teacher_201_response'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - teachers:modify
      summary: Create a new teacher
      tags:
      - teachers
  /teachers/{id}:
    get:
      operationId: get_teacher_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - teachers:read
      summary: Get a teacher record
      tags:
      - teachers
  /teachers/{id}/activate:
    post:
      operationId: activate_teacher_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - teachers:modify
      summary: Mark teacher as active
      tags:
      - teachers
  /teachers/{id}/deactivate:
    post:
      operationId: deactivate_teacher_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - teachers:modify
      summary: Mark teacher as inactive
      tags:
      - teachers
  /theses:
    get:
      description: |
        ![Program](https://img.shields.io/badge/Feature-Programs-1d8127)
      operationId: get_theses
      parameters:
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Thesis'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - courses:read
      summary: Get all thesis records
      tags:
      - theses
      x-badges:
      - name: Beta
        color: '#7d15a3'
        position: after
  /users:
    get:
      operationId: get_users
      parameters:
      - description: Filter results on role
        explode: true
        in: query
        name: role
        required: false
        schema:
          type: string
        style: form
      - description: Filter results on email
        explode: true
        in: query
        name: email
        required: false
        schema:
          format: email
          type: string
        style: form
      - description: Filter results on label_id
        explode: true
        in: query
        name: label_id
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Sort the results. Can change order by using `<sort_by>:<direction>`
          where `<direction>` is either `asc` or `desc`
        explode: true
        in: query
        name: sort
        required: false
        schema:
          items:
            enum:
            - created_at:asc
            - created_at:desc
            type: string
          type: array
        style: form
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserWithIncludes'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - relations:read
      summary: Get all user records
      tags:
      - users
    post:
      operationId: create_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_user_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: OK
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithIncludes'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - relations:modify
      summary: Create a user.
      tags:
      - users
  /users/{id}:
    get:
      operationId: get_user_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - relations:read
      summary: Get an user record
      tags:
      - users
    patch:
      operationId: update_user_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_user_by_id_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithIncludes'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - relations:modify
      summary: Update a user.
      tags:
      - users
  /users/{user_id}/authentications:
    get:
      operationId: get_authentications_by_user_id
      parameters:
      - explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: integer
        style: simple
      - description: Filter results on provider
        explode: true
        in: query
        name: provider
        required: false
        schema:
          $ref: '#/components/schemas/AuthenticationProviderType'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Authentication'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - authentications:read
      summary: Get the authentications of an user
      tags:
      - authentications
  /users/{user_id}/authentications/{id}:
    delete:
      operationId: delete_authentication_from_user
      parameters:
      - explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: integer
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - authentications:destroy
      summary: "Remove an authentication from a user. NOTE: It is impossible to remove\
        \ the last authentication for a user."
      tags:
      - authentications
  /webhooks:
    get:
      operationId: get_webhooks
      parameters:
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Webhook'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get all registered webhooks
      tags:
      - webhooks
    post:
      operationId: create_webhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_webhook_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:modify
      summary: Register a webhook.
      tags:
      - webhooks
  /webhooks/{id}:
    delete:
      operationId: delete_webhook_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:modify
      summary: Delete a webhook.
      tags:
      - webhooks
    get:
      operationId: get_webhook_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get a registered webhook
      tags:
      - webhooks
    patch:
      operationId: update_webhook_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_webhook_by_id_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:modify
      summary: Update a webhook.
      tags:
      - webhooks
  /webhooks/{webhook_id}/notifications:
    get:
      operationId: get_webhook_notifications_by_webhook_id
      parameters:
      - explode: false
        in: path
        name: webhook_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WebhookNotificationWithIncludes'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get the notifications for a specific webhook
      tags:
      - webhook-notifications
  /webhooks/{webhook_id}/notifications/failed:
    get:
      operationId: get_webhook_notifications_failed
      parameters:
      - explode: false
        in: path
        name: webhook_id
        required: true
        schema:
          type: string
        style: simple
      - description: Only show failed notifications created after this date and time
        explode: true
        in: query
        name: start
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Only show failed notifications starting before this date and
          time
        explode: true
        in: query
        name: end
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |
          **Note**: It's almost never necessary to use this parameter directly, the URL
            should be retrieved from the `Link` header.

          The cursor used to fetch the next result set.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to retrieve for this page.
        example: 10
        explode: true
        in: query
        name: per_page
        required: false
        schema:
          default: 25
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WebhookNotificationFailed'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too Many Requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - Bearer:
        - settings:read
      summary: Get the failed webhook notifications
      tags:
      - webhook-notifications
      x-badges:
      - name: Beta
        color: '#7d15a3'
        position: after
components:
  parameters:
    Cursor:
      description: |
        **Note**: It's almost never necessary to use this parameter directly, the URL
          should be retrieved from the `Link` header.

        The cursor used to fetch the next result set.
      explode: true
      in: query
      name: cursor
      required: false
      schema:
        type: string
      style: form
    PerPage:
      description: The number of results to retrieve for this page.
      example: 10
      explode: true
      in: query
      name: per_page
      required: false
      schema:
        default: 25
        maximum: 100
        minimum: 1
        type: integer
      style: form
    CustomObjectTypeInPath:
      description: |
        The type of the object the custom field is for.
      explode: false
      in: path
      name: object_type
      required: true
      schema:
        enum:
        - users
        - accounts
        - catalog_products
        - catalog_variants
        - teachers
        type: string
      style: simple
    CustomFieldSlugInPath:
      description: |
        The unique identifier of the custom field.
      explode: false
      in: path
      name: field_slug
      required: true
      schema:
        type: string
      style: simple
    CustomFieldOptionIdInPath:
      explode: false
      in: path
      name: option_id
      required: true
      schema:
        type: integer
      style: simple
    CustomObjectIdInPath:
      description: |
        The unique identifier of the custom object.
      explode: false
      in: path
      name: object_id
      required: true
      schema:
        type: integer
      style: simple
    CustomRecordIdInPath:
      description: |
        The unique identifier of the custom record.
      explode: false
      in: path
      name: record_id
      required: true
      schema:
        type: integer
      style: simple
  responses:
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Bad Request
    Unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Unauthorized
    Forbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Forbidden
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Not Found
    UnprocessableEntity:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Unprocessable Entity
    TooManyRequests:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Too Many Requests
    InternalServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Internal Server Error
    NoContent:
      description: No Content
    Conflict:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Conflict
    PreconditionFailed:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Precondition Failed
    Created:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/create_teacher_201_response'
      description: Created
  schemas:
    AccountType:
      description: "Helper to identify the type of account. If it is personal, you\
        \ can also see that since the personal_user_id is set."
      enum:
      - business
      - personal
      type: string
    Account:
      additionalProperties: false
      properties:
        id:
          description: Unique identifier of the account.
          readOnly: true
          type: integer
        name:
          description: Arbitrary string representing the name of the account. Is autogenerated
            for personal accounts.
          type: string
        email:
          description: A string representing the billing e-mail of the account
          format: email
          nullable: true
          type: string
        phone:
          description: A string representing the phone number of the account
          nullable: true
          type: string
        account_type:
          $ref: '#/components/schemas/AccountType'
        label_ids:
          description: |
            An array of integers representing unique identifier values associated with labels.
          items:
            type: integer
          type: array
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - account_type
      - created_at
      - email
      - id
      - label_ids
      - name
      - personal_user_id
      - phone
      - slug
      - updated_at
      - users_count
      - visible
      type: object
    Country:
      description: An ISO3166 two-letter country code.
      enum:
      - AD
      - AE
      - AF
      - AG
      - AI
      - AL
      - AM
      - AO
      - AQ
      - AR
      - AS
      - AT
      - AU
      - AW
      - AX
      - AZ
      - BA
      - BB
      - BD
      - BE
      - BF
      - BG
      - BH
      - BI
      - BJ
      - BL
      - BM
      - BN
      - BO
      - BQ
      - BR
      - BS
      - BT
      - BV
      - BW
      - BY
      - BZ
      - CA
      - CC
      - CD
      - CF
      - CG
      - CH
      - CI
      - CK
      - CL
      - CM
      - CN
      - CO
      - CR
      - CU
      - CV
      - CW
      - CX
      - CY
      - CZ
      - DE
      - DJ
      - DK
      - DM
      - DO
      - DZ
      - EC
      - EE
      - EG
      - EH
      - ER
      - ES
      - ET
      - FI
      - FJ
      - FK
      - FM
      - FO
      - FR
      - GA
      - GB
      - GD
      - GE
      - GF
      - GG
      - GH
      - GI
      - GL
      - GM
      - GN
      - GP
      - GQ
      - GR
      - GS
      - GT
      - GU
      - GW
      - GY
      - HK
      - HM
      - HN
      - HR
      - HT
      - HU
      - ID
      - IE
      - IL
      - IM
      - IN
      - IO
      - IQ
      - IR
      - IS
      - IT
      - JE
      - JM
      - JO
      - JP
      - KE
      - KG
      - KH
      - KI
      - KM
      - KN
      - KP
      - KR
      - KW
      - KY
      - KZ
      - LA
      - LB
      - LC
      - LI
      - LK
      - LR
      - LS
      - LT
      - LU
      - LV
      - LY
      - MA
      - MC
      - MD
      - ME
      - MF
      - MG
      - MH
      - MK
      - ML
      - MM
      - MN
      - MO
      - MP
      - MQ
      - MR
      - MS
      - MT
      - MU
      - MV
      - MW
      - MX
      - MY
      - MZ
      - NA
      - NC
      - NE
      - NF
      - NG
      - NI
      - NL
      - "NO"
      - NP
      - NR
      - NU
      - NZ
      - OM
      - PA
      - PE
      - PF
      - PG
      - PH
      - PK
      - PL
      - PM
      - PN
      - PR
      - PS
      - PT
      - PW
      - PY
      - QA
      - RE
      - RO
      - RS
      - RU
      - RW
      - SA
      - SB
      - SC
      - SD
      - SE
      - SG
      - SH
      - SI
      - SJ
      - SK
      - SL
      - SM
      - SN
      - SO
      - SR
      - SS
      - ST
      - SV
      - SX
      - SY
      - SZ
      - TC
      - TD
      - TF
      - TG
      - TH
      - TJ
      - TK
      - TL
      - TM
      - TN
      - TO
      - TR
      - TT
      - TV
      - TW
      - TZ
      - UA
      - UG
      - UM
      - US
      - UY
      - UZ
      - VA
      - VC
      - VE
      - VG
      - VI
      - VN
      - VU
      - WF
      - WS
      - YE
      - YT
      - ZA
      - ZM
      - ZW
      type: string
    UsaState:
      description: An letter USA state code.
      enum:
      - AL
      - AK
      - AZ
      - AR
      - CA
      - CO
      - CT
      - DC
      - DE
      - FL
      - GA
      - HI
      - ID
      - IL
      - IN
      - IA
      - KS
      - KY
      - LA
      - ME
      - MD
      - MA
      - MI
      - MN
      - MS
      - MO
      - MT
      - NE
      - NV
      - NH
      - NJ
      - NM
      - NY
      - NC
      - ND
      - OH
      - OK
      - OR
      - PA
      - RI
      - SC
      - SD
      - TN
      - TX
      - UT
      - VT
      - VA
      - WA
      - WV
      - WI
      - WY
      nullable: true
      type: string
    Address:
      additionalProperties: false
      description: The Account Address
      example:
        country: AD
        address: address
        addressee: addressee
        address_line2: address_line2
        city: city
        state_province: AL
        postal_code: postal_code
      nullable: true
      properties:
        addressee:
          description: The addressee of the address.
          nullable: true
          type: string
        address:
          description: Concatenation of the street and house number.
          type: string
        address_line2:
          description: A string representing the second line of the address.
          nullable: true
          type: string
        postal_code:
          description: A string representing the postal code.
          type: string
        city:
          description: A string representing the city.
          type: string
        country:
          $ref: '#/components/schemas/Country'
        state_province:
          $ref: '#/components/schemas/UsaState'
      required:
      - address
      - address_line2
      - addressee
      - city
      - country
      - postal_code
      - state_province
      type: object
    AccountWithIncludes:
      allOf:
      - $ref: '#/components/schemas/Account'
      - additionalProperties: false
        properties:
          custom:
            $ref: '#/components/schemas/AccountWithIncludes_allOf_custom'
          address:
            $ref: '#/components/schemas/Address'
        type: object
      example:
        account_type: business
        address:
          country: AD
          address: address
          addressee: addressee
          address_line2: address_line2
          city: city
          state_province: AL
          postal_code: postal_code
        updated_at: 2000-01-23T04:56:07.000+00:00
        phone: phone
        label_ids:
        - 6
        - 6
        custom: {}
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 0
        email: email
    Error:
      example:
        code: 1.4658129805029452
        message: message
        errors: "{}"
      properties:
        errors:
          description: An object of all the errors that occurred including failed
            the model validations
          properties: {}
          type: object
        code:
          description: The HTTP status code of the response
          type: number
        message:
          description: A sort of human readable error message
          type: string
      required:
      - code
      - errors
      - message
      type: object
    AddressPayload:
      nullable: true
      properties:
        addressee:
          description: The addressee of the address.
          nullable: true
          type: string
        address:
          description: Concatenation of the street and house number.
          type: string
        address_line2:
          description: A string representing the second line of the address.
          nullable: true
          type: string
        postal_code:
          description: A string representing the postal code.
          type: string
        city:
          description: A string representing the city.
          type: string
        state_province:
          $ref: '#/components/schemas/UsaState'
        country:
          $ref: '#/components/schemas/Country'
      required:
      - address
      - city
      - country
      - postal_code
      type: object
    Affiliation:
      additionalProperties: false
      example:
        account_id: 6
        updated_at: 2000-01-23T04:56:07.000+00:00
        user_id: 1
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 0
        key_contact: false
      properties:
        id:
          description: Unique identifier of the affiliation record.
          readOnly: true
          type: integer
        account_id:
          description: Unique identifier of the associated account
          type: integer
        user_id:
          description: Unique identifier of the associated user
          type: integer
        key_contact:
          default: false
          description: Boolean indicating if this user is a key contact of the account.
          type: boolean
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - account_id
      - created_at
      - id
      - key_contact
      - updated_at
      - user_id
      type: object
    AttendanceState:
      description: Indicator of the attendance state.
      enum:
      - absent
      - absent_with_leave
      - attended
      - blanco
      - late
      type: string
    Attendance:
      additionalProperties: false
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        meeting_id: 6
        created_at: 2000-01-23T04:56:07.000+00:00
        comment: comment
        id: 0
        state: absent
        enrollment_id: 1
      properties:
        id:
          description: Unique identifier of the attendance record.
          readOnly: true
          type: integer
        meeting_id:
          description: Unique identifier of the meeting.
          type: integer
        enrollment_id:
          description: Unique identifier of the enrollment.
          type: integer
        state:
          $ref: '#/components/schemas/AttendanceState'
        comment:
          description: Comment about this attendance.
          nullable: true
          type: string
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - comment
      - created_at
      - enrollment_id
      - id
      - meeting_id
      - state
      - updated_at
      type: object
    AuthenticationProviderType:
      description: Type of the associated AuthenticationProvider.
      enum:
      - azure_active_directory
      - eduframe
      - openid_connect
      - surf_conext
      type: string
    Authentication:
      additionalProperties: false
      example:
        uid: uid
        updated_at: 2000-01-23T04:56:07.000+00:00
        user_id: 6
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 0
        otp_enabled: true
        authentication_provider_id: 1
      properties:
        id:
          description: Unique identifier of the authentication.
          readOnly: true
          type: integer
        user_id:
          description: Identifier of the associated User.
          type: integer
        authentication_provider_id:
          description: Unique identifier of the authentication provider
          type: integer
        uid:
          description: Login identifier.
          type: string
        otp_enabled:
          description: Whether or not the user has enabled two factor authentication.
          type: boolean
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - authentication_provider_id
      - created_at
      - id
      - otp_enabled
      - uid
      - updated_at
      - user_id
      type: object
    CostScheme:
      description: How should the variant be paid by default.
      enum:
      - free
      - order
      - student
      - tbd
      type: string
    Currency:
      description: An ISO4217 currency code.
      enum:
      - EUR
      - GBP
      - ISK
      - USD
      type: string
    ProductableType:
      description: The product type.
      enum:
      - Course
      - Program::Program
      type: string
    Product:
      additionalProperties: false
      properties:
        id:
          description: Unique identifier of the catalog product.
          readOnly: true
          type: integer
        name:
          description: Name of the product.
          type: string
        slug:
          description: Slug of the product.
          type: string
        label_ids:
          description: |
            An array of integers representing unique identifier values associated with labels.
          items:
            type: integer
          type: array
        cost_scheme:
          $ref: '#/components/schemas/CostScheme'
        cost:
          description: Cost of the product.
          nullable: true
          type: string
        currency:
          $ref: '#/components/schemas/Currency'
        productable_type:
          $ref: '#/components/schemas/ProductableType'
        productable_id:
          description: Unique identifier of the productable.
          type: integer
        avatar:
          description: URL to the original avatar image file.
          type: string
        position:
          description: Sorting position of the element. Lower is higher.
          type: integer
        conditions_or_default:
          description: Conditions for this product with a fallback to the default
            course conditions of the educator.
          nullable: true
          type: string
        category_id:
          description: Identifier of the category of the course.
          type: integer
        is_published:
          description: Boolean showing if the product is published or not.
          type: boolean
        show_on_website:
          description: Boolean showing if the product is shown on the website or not.
          readOnly: true
          type: boolean
        signup_url:
          description: URL to the signup page for this course.
          readOnly: true
          type: string
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - avatar
      - category_id
      - conditions_or_default
      - cost
      - cost_scheme
      - created_at
      - currency
      - id
      - is_published
      - label_ids
      - name
      - position
      - productable_id
      - productable_type
      - show_on_website
      - signup_url
      - slug
      - updated_at
      type: object
    CourseTabContent:
      additionalProperties: false
      example:
        id: 2
        course_tab_id: 7
        content: content
      properties:
        id:
          description: Unique identifier of the course tab content.
          readOnly: true
          type: integer
        course_tab_id:
          description: Unique identifier of the course tab.
          readOnly: true
          type: integer
        content:
          description: The HTML content of the course tab.
          nullable: true
          type: string
      required:
      - content
      - course_tab_id
      - id
      type: object
    CustomAssociationWithRecords:
      example:
        custom_association_id: 9
        custom_object_id: 3
        custom_record_ids:
        - 2
        - 2
        associable_type: associable_type
      properties:
        associable_type:
          description: The type of the associated system model in slug format.
          readOnly: true
          type: string
        custom_association_id:
          description: Unique identifier for the custom association.
          readOnly: true
          type: integer
        custom_object_id:
          description: Unique identifier for the custom object.
          readOnly: true
          type: integer
        custom_record_ids:
          description: List of custom record identifiers linked.
          items:
            type: integer
          readOnly: true
          type: array
      required:
      - associable_type
      - custom_association_id
      - custom_record_ids
      type: object
    ProductWithIncludes:
      allOf:
      - $ref: '#/components/schemas/Product'
      - additionalProperties: false
        properties:
          course_tab_contents:
            items:
              $ref: '#/components/schemas/CourseTabContent'
            type: array
          custom:
            $ref: '#/components/schemas/ProductWithIncludes_allOf_custom'
          custom_associations:
            description: |
              The custom associations linked to the catalog product.

              ![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)
              ![Beta](https://img.shields.io/badge/Beta-7d15a3)
            items:
              $ref: '#/components/schemas/CustomAssociationWithRecords'
            type: array
        type: object
      example:
        cost: cost
        productable_type: Course
        label_ids:
        - 6
        - 6
        is_published: true
        custom: {}
        show_on_website: true
        created_at: 2000-01-23T04:56:07.000+00:00
        avatar: avatar
        conditions_or_default: conditions_or_default
        course_tab_contents:
        - id: 2
          course_tab_id: 7
          content: content
        - id: 2
          course_tab_id: 7
          content: content
        category_id: 5
        updated_at: 2000-01-23T04:56:07.000+00:00
        cost_scheme: free
        productable_id: 1
        name: name
        currency: EUR
        id: 0
        position: 5
        custom_associations:
        - custom_association_id: 9
          custom_object_id: 3
          custom_record_ids:
          - 2
          - 2
          associable_type: associable_type
        - custom_association_id: 9
          custom_object_id: 3
          custom_record_ids:
          - 2
          - 2
          associable_type: associable_type
        signup_url: signup_url
        slug: slug
    VariantableType:
      description: The type of the catalog variant.
      enum:
      - PlannedCourse
      - Program::Edition
      type: string
    Variant:
      additionalProperties: false
      properties:
        id:
          description: Unique identifier of the catalog variant.
          readOnly: true
          type: integer
        product_id:
          description: Unique identifier of the catalog product.
          type: integer
        name:
          description: Name of the catalog variant.
          type: string
        sku:
          description: An optional unique identifier of the catalog variant.
          nullable: true
          type: string
        cost_scheme:
          $ref: '#/components/schemas/CostScheme'
        cost:
          description: Cost of the variant.
          nullable: true
          type: string
        currency:
          $ref: '#/components/schemas/Currency'
        variantable_type:
          $ref: '#/components/schemas/VariantableType'
        variantable_id:
          description: Unique identifier of the variantable.
          type: integer
        availability:
          description: Availability of the catalog variant.
          enum:
          - available
          - limited_availability
          - not_available
          type: string
        available_places:
          description: Number of available places.
          type: integer
        is_published:
          description: Boolean showing if the variant is published or not.
          type: boolean
        show_on_website:
          description: Boolean showing if the variant is shown on the website or not.
          readOnly: true
          type: boolean
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - availability
      - available_places
      - cost
      - cost_scheme
      - created_at
      - currency
      - id
      - is_published
      - name
      - product_id
      - show_on_website
      - updated_at
      - variantable_id
      - variantable_type
      type: object
    VariantWithIncludes:
      allOf:
      - $ref: '#/components/schemas/Variant'
      - additionalProperties: false
        properties:
          custom:
            $ref: '#/components/schemas/ProductWithIncludes_allOf_custom'
          custom_associations:
            description: |
              The custom associations linked to the catalog variant.

              ![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)
              ![Beta](https://img.shields.io/badge/Beta-7d15a3)
            items:
              $ref: '#/components/schemas/CustomAssociationWithRecords'
            type: array
        type: object
      example:
        cost: cost
        is_published: true
        custom: {}
        show_on_website: true
        created_at: 2000-01-23T04:56:07.000+00:00
        availability: available
        available_places: 5
        variantable_type: PlannedCourse
        updated_at: 2000-01-23T04:56:07.000+00:00
        product_id: 6
        cost_scheme: free
        name: name
        currency: EUR
        id: 0
        custom_associations:
        - custom_association_id: 9
          custom_object_id: 3
          custom_record_ids:
          - 2
          - 2
          associable_type: associable_type
        - custom_association_id: 9
          custom_object_id: 3
          custom_record_ids:
          - 2
          - 2
          associable_type: associable_type
        sku: sku
        variantable_id: 1
    Category:
      additionalProperties: false
      example:
        avatar_url: avatar_url
        updated_at: 2000-01-23T04:56:07.000+00:00
        is_published: true
        parent_id: 1
        name: name
        description: description
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 0
        position: 6
        avatar: avatar
        slug: slug
      properties:
        id:
          description: Unique identifier of the category.
          readOnly: true
          type: integer
        name:
          description: Title of the category.
          type: string
        position:
          description: Sorting position of the category. Lower is higher.
          type: integer
        avatar:
          description: URL to the original avatar image file.
          type: string
        avatar_url:
          description: URL to a resized avatar image (300x200^).
          type: string
        slug:
          description: Friendly identifier of a category.
          type: string
        description:
          description: The description of the category.
          nullable: true
          type: string
        is_published:
          description: Boolean if the category is published on the website.
          type: boolean
        parent_id:
          description: Unique identifier of the parent category
          nullable: true
          type: integer
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - avatar
      - avatar_url
      - children_count
      - courses_count
      - created_at
      - description
      - id
      - is_published
      - meta_description
      - meta_title
      - name
      - parent_id
      - position
      - products_count
      - slug
      - updated_at
      type: object
    CommentType:
      enum:
      - Account
      - Invoice
      - Lead
      - Order
      - PlannedCourse
      - Program::Editions::Edition
      - Task
      - User
      type: string
    Comment:
      additionalProperties: false
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        creator_id: 6
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 0
        content: content
      properties:
        id:
          description: Unique identifier of the comment.
          readOnly: true
          type: integer
        content:
          description: A string representing the content of a comment.
          type: string
        creator_id:
          description: Unique identifier of the creator of the comment.
          nullable: true
          type: integer
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - content
      - created_at
      - creator_id
      - id
      - updated_at
      type: object
    CourseLocation:
      additionalProperties: false
      properties:
        id:
          description: Unique identifier of the course location
          readOnly: true
          type: integer
        name:
          description: Name of the location where the course is held.
          type: string
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - created_at
      - id
      - name
      - updated_at
      type: object
    CourseLocationWithIncludes:
      allOf:
      - $ref: '#/components/schemas/CourseLocation'
      - additionalProperties: false
        properties:
          address:
            $ref: '#/components/schemas/Address'
        type: object
      example:
        address:
          country: AD
          address: address
          addressee: addressee
          address_line2: address_line2
          city: city
          state_province: AL
          postal_code: postal_code
        updated_at: 2000-01-23T04:56:07.000+00:00
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 0
    AddressPatchPayload:
      nullable: true
      properties:
        addressee:
          description: The addressee of the address.
          nullable: true
          type: string
        address:
          description: Concatenation of the street and house number.
          type: string
        address_line2:
          description: A string representing the second line of the address.
          nullable: true
          type: string
        postal_code:
          description: A string representing the postal code.
          type: string
        city:
          description: A string representing the city.
          type: string
        state_province:
          $ref: '#/components/schemas/UsaState'
        country:
          $ref: '#/components/schemas/Country'
      type: object
    CourseTab:
      additionalProperties: false
      example:
        name: name
        id: 0
        position: 6
      properties:
        id:
          description: Unique identifier of the course tab.
          readOnly: true
          type: integer
        name:
          description: The name of the course tab.
          type: string
        position:
          description: The position of the course tab.
          type: integer
      required:
      - id
      - name
      - position
      type: object
    CourseVariant:
      additionalProperties: false
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 0
      properties:
        id:
          description: Unique identifier of the course variant
          readOnly: true
          type: integer
        name:
          description: The name of the course variant.
          type: string
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - created_at
      - id
      - name
      - updated_at
      type: object
    Course:
      additionalProperties: false
      properties:
        id:
          description: Unique identifier of the course
          readOnly: true
          type: integer
        position:
          description: Sorting position of the course. Lower is higher.
          type: integer
        starting_price:
          description: Lowest price of all of its planned courses.
          type: string
        signup_url:
          description: URL to the signup page for this course.
          type: string
        slug:
          description: "Human readable identifier, unique per educator."
          type: string
        slug_history:
          description: "List of old slugs, old calls will be redirected."
          items:
            type: string
          readOnly: true
          type: array
        avatar:
          description: URL to the original avatar image file.
          type: string
        avatar_url:
          description: URL to a resized avatar image (300x200^).
          type: string
        avatar_thumb_url:
          description: URL to a resized avatar image (748x296^).
          type: string
        conditions_or_default:
          description: Conditions for this course with a fallback to the default course
            conditions of the educator.
          nullable: true
          type: string
        website_url:
          description: Expected URL of the course on the educator website.
          nullable: true
          type: string
        certificate_template_id:
          description: Identifier of the optionally linked certificate template.
          nullable: true
          type: integer
        category_id:
          description: Identifier of the category of the course.
          type: integer
        name:
          description: The name of the course.
          type: string
        code:
          description: The code of the course.
          type: string
        duration:
          description: The duration of the course.
          nullable: true
          type: string
        level:
          description: A string indicating the level of the course.
          nullable: true
          type: string
        meta_title:
          description: Meta title of the course for SEO purposes.
          nullable: true
          type: string
        meta_description:
          description: Meta description of the course for SEO purposes.
          nullable: true
          type: string
        result:
          description: The result of the course
          nullable: true
          type: string
        label_ids:
          description: |
            An array of integers representing unique identifier values associated with labels.
          items:
            type: integer
          type: array
        cost:
          description: The price to be paid for this course.
          nullable: true
          type: string
        cost_scheme:
          $ref: '#/components/schemas/CostScheme'
        is_published:
          description: Boolean representing the publishable status of the course.
          type: boolean
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - avatar
      - avatar_thumb_url
      - avatar_url
      - category_id
      - certificate_template_id
      - code
      - conditions_or_default
      - cost
      - cost_scheme
      - created_at
      - id
      - is_published
      - label_ids
      - meta_description
      - meta_title
      - name
      - position
      - signup_url
      - slug
      - slug_history
      - starting_price
      - updated_at
      - website_url
      type: object
    CourseWithIncludes:
      allOf:
      - $ref: '#/components/schemas/Course'
      - additionalProperties: false
        properties:
          custom:
            $ref: '#/components/schemas/CourseWithIncludes_allOf_custom'
          label_ids:
            description: |
              An array of integers representing unique identifier values associated with labels.
            items:
              type: integer
            type: array
        required:
        - custom
        - label_ids
        type: object
      example:
        code: code
        is_published: true
        created_at: 2000-01-23T04:56:07.000+00:00
        duration: duration
        result: result
        category_id: 5
        updated_at: 2000-01-23T04:56:07.000+00:00
        starting_price: starting_price
        id: 0
        signup_url: signup_url
        slug: slug
        avatar_thumb_url: avatar_thumb_url
        cost: cost
        meta_title: meta_title
        level: level
        label_ids:
        - 2
        - 2
        custom: "{\"custom_field1\":\"value\",\"custom_field2\":\"value\"}"
        avatar: avatar
        conditions_or_default: conditions_or_default
        certificate_template_id: 1
        slug_history:
        - slug_history
        - slug_history
        meta_description: meta_description
        avatar_url: avatar_url
        website_url: website_url
        cost_scheme: free
        name: name
        position: 6
    CustomAssociationsRecordsPayload:
      additionalProperties: false
      example:
        custom_association_id: 6
        custom_record_ids:
        - 1
        - 1
      properties:
        custom_association_id:
          description: The unique identifier of the association.
          type: integer
        custom_record_ids:
          description: List of custom record identifiers linked.
          items:
            type: integer
          type: array
      required:
      - custom_association_id
      - custom_record_ids
      type: object
    CoursePayload:
      additionalProperties: false
      example:
        meta_description: meta_description
        code: code
        cost: cost
        category_id: 0
        meta_title: meta_title
        is_published: true
        cost_scheme: student
        custom: "{}"
        name: name
        custom_associations:
        - custom_association_id: 6
          custom_record_ids:
          - 1
          - 1
        - custom_association_id: 6
          custom_record_ids:
          - 1
          - 1
        course_tab_contents_attributes:
        - content: content
          course_tab_id: 5
        - content: content
          course_tab_id: 5
      properties:
        category_id:
          description: Identifier of the category of the course.
          type: integer
        name:
          description: The name of the course.
          type: string
        code:
          description: The code of the course.
          type: string
        cost_scheme:
          description: How should the course be paid by default.
          enum:
          - student
          - order
          - tbd
          - free
          type: string
        cost:
          description: The price to be paid for this course. Required if cost_scheme
            is student (default value) or order.
          nullable: true
          type: string
        meta_title:
          description: Meta title of the course for SEO purposes.
          nullable: true
          type: string
        meta_description:
          description: Meta description of the course for SEO purposes.
          nullable: true
          type: string
        is_published:
          description: Boolean representing the publishable status of the course.
          type: boolean
        custom:
          description: The custom properties of the course.
          properties: {}
          type: object
        custom_associations:
          description: |
            Custom associations are a way to link custom records to a course.

            ![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)
          items:
            $ref: '#/components/schemas/CustomAssociationsRecordsPayload'
          type: array
        course_tab_contents_attributes:
          items:
            $ref: '#/components/schemas/CoursePayload_course_tab_contents_attributes_inner'
          type: array
      required:
      - category_id
      - code
      - name
      type: object
    CoursePatchPayload:
      additionalProperties: false
      example:
        code: code
        cost: cost
        meta_title: meta_title
        level: level
        is_published: true
        custom: "{}"
        course_tab_contents_attributes:
        - id: 6
          content: content
          course_tab_id: 1
        - id: 6
          content: content
          course_tab_id: 1
        duration: duration
        result: result
        meta_description: meta_description
        category_id: 0
        cost_scheme: student
        name: name
        custom_associations:
        - custom_association_id: 6
          custom_record_ids:
          - 1
          - 1
        - custom_association_id: 6
          custom_record_ids:
          - 1
          - 1
        conditions: conditions
      properties:
        category_id:
          description: Identifier of the category of the course.
          type: integer
        name:
          description: The name of the course.
          type: string
        code:
          description: The code of the course.
          type: string
        duration:
          description: The duration of the course.
          nullable: true
          type: string
        level:
          description: A string indicating the level of the course.
          nullable: true
          type: string
        meta_title:
          description: Meta title of the course for SEO purposes.
          nullable: true
          type: string
        meta_description:
          description: Meta description of the course for SEO purposes.
          nullable: true
          type: string
        result:
          description: The result of the course
          nullable: true
          type: string
        cost:
          description: The price to be paid for this course.
          nullable: true
          type: string
        cost_scheme:
          description: How should the course be paid by default.
          enum:
          - student
          - order
          - tbd
          - free
          type: string
        is_published:
          description: Boolean representing the publishable status of the course.
          type: boolean
        conditions:
          description: The conditions of the course.
          type: string
        custom:
          description: The custom properties of the program.
          properties: {}
          type: object
        custom_associations:
          description: |
            The new set of custom records linked to a course.

            ![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)
          items:
            $ref: '#/components/schemas/CustomAssociationsRecordsPayload'
          type: array
        course_tab_contents_attributes:
          items:
            $ref: '#/components/schemas/CoursePatchPayload_course_tab_contents_attributes_inner'
          type: array
      type: object
    AvailabilityState:
      description: |
        By default this is just +open+.
        However, you can make this planned course available for a subset of accounts.
        If that's the case the state is +closed+.
      enum:
      - open
      - closed
      type: string
    PlannedCourseStatus:
      description: State of the planned course
      enum:
      - planned
      - active
      - completed
      - canceled
      type: string
    PlannedCourse:
      additionalProperties: false
      properties:
        id:
          description: Unique identifier of the user.
          readOnly: true
          type: integer
        status:
          $ref: '#/components/schemas/PlannedCourseStatus'
        duration_in_days:
          description: |
            The period of time of the planned course.
            For flexible planned courses this equals the provided +duration+.
            For fixed planned courses this equals the number of meetings if any,
            if the fixed planned course has no meetings, it's the number of days between the start and end date.
          nullable: true
          type: integer
        availability_state:
          $ref: '#/components/schemas/AvailabilityState'
        payable:
          description: |
            Boolean wether there are payments involved for this course.
            Basically its true if the cost_scheme is +student+ or +order+.
          type: boolean
        current_participants:
          description: The current amount of participants.
          type: integer
        confirmed_active_and_completed_enrollments_count:
          description: The amount of confirmed active and completed enrollments.
          type: integer
        requested_enrollments_count:
          description: The amount of requested enrollments. ie. the number of reserved
            seats
          type: integer
        available_places:
          description: Boolean if there are any places available.
          type: boolean
        canvas_link:
          description: URL to the course in canvas. Is only returned if available.
          nullable: true
          type: string
        currency:
          $ref: '#/components/schemas/Currency'
        cost_multiplier:
          description: |
            A positive float representing the multiplier for the VAT.
            Say you have 21% VAT, this will return +1.21+.
          nullable: true
          type: string
        is_published:
          description: Boolean if is published on the website.
          type: boolean
        course_id:
          description: Unique identifier of the course.
          type: integer
        type:
          description: The type of the course.
          enum:
          - FixedPlannedCourse
          - FlexiblePlannedCourse
          type: string
        start_date:
          description: Date at which the planned course starts. Only needed for fixed
            planned courses.
          type: string
        end_date:
          description: Date at which the planned course ends. Only needed for fixed
            planned courses.
          nullable: true
          type: string
        min_participants:
          description: A number representing the minimum number of participants that
            can enroll for the planned course.
          nullable: true
          type: integer
        max_participants:
          description: A number representing the maximum number of participants that
            can enroll for the planned course.
          nullable: true
          type: integer
        cost_scheme:
          $ref: '#/components/schemas/CostScheme'
        cost:
          description: A positive float representing the price of the planned course.
          nullable: true
          type: string
        course_variant_id:
          description: Unique identifier of the course variant.
          nullable: true
          type: integer
        course_location_id:
          description: Unique identifier of the course location.
          nullable: true
          type: integer
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - availability_state
      - available_places
      - confirmed_active_and_completed_enrollments_count
      - cost
      - cost_multiplier
      - cost_scheme
      - course_id
      - course_location_id
      - course_variant_id
      - created_at
      - currency
      - current_participants
      - duration_in_days
      - end_date
      - id
      - is_published
      - max_participants
      - min_participants
      - payable
      - requested_enrollments_count
      - start_date
      - status
      - type
      - updated_at
      type: object
    PlannedCourseWithIncludes:
      allOf:
      - $ref: '#/components/schemas/PlannedCourse'
      - additionalProperties: false
        type: object
      example:
        end_date: end_date
        is_published: true
        availability_state: open
        created_at: 2000-01-23T04:56:07.000+00:00
        available_places: true
        requested_enrollments_count: 5
        type: FixedPlannedCourse
        max_participants: 9
        duration_in_days: 6
        payable: true
        updated_at: 2000-01-23T04:56:07.000+00:00
        cost_multiplier: cost_multiplier
        currency: EUR
        id: 0
        course_location_id: 2
        canvas_link: canvas_link
        start_date: start_date
        course_id: 2
        cost: cost
        current_participants: 1
        min_participants: 7
        course_variant_id: 3
        confirmed_active_and_completed_enrollments_count: 5
        cost_scheme: free
        status: planned
    CreditCategory:
      additionalProperties: false
      properties:
        id:
          description: Unique identifier of the credit category.
          readOnly: true
          type: integer
        name:
          description: Name of the credit category.
          type: string
      required:
      - id
      - name
      type: object
    CreditType:
      additionalProperties: false
      example:
        name: name
        id: 6
      properties:
        id:
          description: Unique identifier of the credit type.
          readOnly: true
          type: integer
        name:
          description: Name of the credit type.
          type: string
      required:
      - id
      - name
      type: object
    CreditCategoryWithIncludes:
      allOf:
      - $ref: '#/components/schemas/CreditCategory'
      - additionalProperties: false
        properties:
          types:
            items:
              $ref: '#/components/schemas/CreditType'
            type: array
        required:
        - types
        type: object
      example:
        types:
        - name: name
          id: 6
        - name: name
          id: 6
        name: name
        id: 0
    Credit:
      additionalProperties: false
      example:
        course_id: 5
        credits: 1.4658129805029452
        student_id: 6
        description: description
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 0
        enrollment_id: 5
      properties:
        id:
          description: Unique identifier of the credit.
          readOnly: true
          type: integer
        student_id:
          description: Unique identifier of the orders Student (User).
          type: integer
        credits:
          description: The amount of awarded credits.
          type: number
        description:
          description: Description of the awarded credits.
          nullable: true
          type: string
        course_id:
          description: Unique identifier of the Course.
          nullable: true
          type: integer
        enrollment_id:
          description: Unique identifier of the Enrollment.
          nullable: true
          type: integer
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - course_id
      - created_at
      - credits
      - description
      - enrollment_id
      - id
      - student_id
      type: object
    CustomObject:
      example:
        name_plural: name_plural
        name_singular: name_singular
        id: 6
      properties:
        id:
          description: The unique identifier of the custom object
          type: integer
        name_singular:
          description: The singular name of the custom object
          type: string
        name_plural:
          description: The plural name of the custom object
          type: string
      required:
      - id
      - name_plural
      - name_singular
      type: object
    CustomAssociation:
      example:
        custom_object:
          name_plural: name_plural
          name_singular: name_singular
          id: 6
        id: 0
      properties:
        id:
          description: The unique identifier of the association.
          readOnly: true
          type: integer
        custom_object:
          $ref: '#/components/schemas/CustomObject'
      required:
      - custom_object
      - id
      type: object
    CustomFieldOption:
      additionalProperties: false
      example:
        id: 0
        value: value
        enabled: true
      properties:
        id:
          description: Unique identifier of the custom field.
          type: integer
        value:
          description: The value of the option
          type: string
        enabled:
          description: Whether the option can be chosen or not
          type: boolean
      required:
      - enabled
      - id
      - value
      type: object
    CustomFieldOptionPayload:
      additionalProperties: false
      example:
        value: value
        enabled: true
      properties:
        value:
          type: string
        enabled:
          description: Whether the option can be chosen or not
          type: boolean
      required:
      - enabled
      - value
      type: object
    CustomFieldOptionPatchPayload:
      additionalProperties: false
      example:
        value: value
        enabled: true
      properties:
        value:
          type: string
        enabled:
          description: Whether the option can be chosen or not
          type: boolean
      type: object
    SignupQuestionFieldType:
      description: The type of field.
      enum:
      - boolean
      - datepicker
      - decimal
      - phone
      - select
      - multiselect
      - ssn
      - string
      - text
      - vat_number
      type: string
    CustomObjectField:
      example:
        id: 6
        title: title
        field_type: boolean
        slug: slug
      properties:
        id:
          description: Unique identifier of the question.
          readOnly: true
          type: integer
        slug:
          description: The slug of the custom field
          readOnly: true
          type: string
        title:
          description: The title and label of the question
          type: string
        field_type:
          $ref: '#/components/schemas/SignupQuestionFieldType'
      required:
      - field_type
      - id
      - slug
      - title
      type: object
    CustomObjectWithFields:
      example:
        name_plural: name_plural
        name_singular: name_singular
        id: 0
        fields:
        - id: 6
          title: title
          field_type: boolean
          slug: slug
        - id: 6
          title: title
          field_type: boolean
          slug: slug
      properties:
        id:
          description: The unique identifier of the custom object
          type: integer
        name_singular:
          description: The singular name of the custom object
          type: string
        name_plural:
          description: The plural name of the custom object
          type: string
        fields:
          items:
            $ref: '#/components/schemas/CustomObjectField'
          type: array
      required:
      - fields
      - id
      - name_plural
      - name_singular
      type: object
    CustomFieldValue:
      oneOf:
      - type: string
      - type: number
      - type: boolean
      - format: date
        title: date
        type: string
      - items:
          type: string
        type: array
    CustomRecord:
      additionalProperties: false
      example:
        active: true
        id: 0
        display_name: display_name
        properties:
          key: CustomFieldValue
      properties:
        id:
          description: Unique identifier of the custom record.
          type: integer
        active:
          description: Whether the custom record is active.
          type: boolean
        display_name:
          description: The display name of the custom record.
          type: string
        properties:
          additionalProperties:
            $ref: '#/components/schemas/CustomFieldValue'
          description: The JSON properties of the custom record.
          type: object
      required:
      - active
      - display_name
      - id
      - properties
      type: object
    CustomRecordPayload:
      additionalProperties: false
      example:
        active: true
        display_name: display_name
        properties:
          key: CustomFieldValue
      properties:
        active:
          default: true
          description: Whether the custom record is active.
          type: boolean
        display_name:
          description: The display name of the custom record.
          type: string
        properties:
          additionalProperties:
            $ref: '#/components/schemas/CustomFieldValue'
          description: The JSON properties of the custom record.
          type: object
      required:
      - display_name
      - properties
      type: object
    CustomRecordPatchPayload:
      additionalProperties: false
      example:
        active: true
        display_name: display_name
        properties:
          key: CustomFieldValue
      properties:
        active:
          description: Whether the custom record is active.
          type: boolean
        display_name:
          description: The display name of the custom record.
          type: string
        properties:
          additionalProperties:
            $ref: '#/components/schemas/CustomFieldValue'
          description: The JSON properties of the custom record.
          type: object
      type: object
    DiscountCode:
      additionalProperties: false
      example:
        amount: 6.027456183070403
        usage_count: 5
        max_usage: 1
        discount_code: discount_code
        name: name
        id: 0
        discount_type: fixed
        expiration_date: 2000-01-23
        start_date: 2000-01-23
      properties:
        id:
          description: Unique identifier of the discount code.
          type: integer
        name:
          description: The name of the discount code.
          type: string
        discount_code:
          description: The discount code.
          type: string
        discount_type:
          description: "The type of discount, which can be a fixed amount or a percentage."
          enum:
          - fixed
          - percentage
          type: string
        amount:
          description: The amount of the discount.
          type: number
        max_usage:
          description: The maximum number of times the discount code can be used.
          nullable: true
          type: integer
        usage_count:
          description: The number of times the discount code has been used.
          type: integer
        start_date:
          description: The start date of the discount code.
          format: date
          type: string
        expiration_date:
          description: The expiration date of the discount code.
          format: date
          type: string
      required:
      - amount
      - discount_code
      - discount_type
      - expiration_date
      - id
      - max_usage
      - name
      - start_date
      - usage_count
      type: object
    Locale:
      enum:
      - de
      - en
      - en-GB
      - en-US
      - es
      - is
      - nl
      nullable: true
      type: string
    Educator:
      additionalProperties: false
      properties:
        id:
          description: Unique identifier of the educator.
          readOnly: true
          type: integer
        slug:
          description: Unique human readable identifier of the educator.
          readOnly: true
          type: string
        standard_planning_text:
          description: Text that is shown by default on the planning page and signup.
          nullable: true
          type: string
        default_invoice_vat_multiplier:
          description: Default VAT multiplier of the educator.
          nullable: true
          type: string
        phone:
          description: Phone number of the educator.
          nullable: true
          type: string
        website_url:
          description: Website URL of the educator.
          nullable: true
          type: string
        signup_default_account_type:
          description: What is de default selected account type on the signup page.
          enum:
          - personal
          - business
          type: string
        signup_contact_info:
          description: The contact info shown on the signup form (for directing questions
            to).
          nullable: true
          type: string
        currency:
          $ref: '#/components/schemas/Currency'
        country:
          $ref: '#/components/schemas/Country'
        email:
          description: The email (reply to) of the educator.
          nullable: true
          type: string
        time_zone:
          description: Time zone identifier of the educator.
          type: string
        name:
          description: The name of the educator.
          type: string
        locale:
          $ref: '#/components/schemas/Locale'
        terms_url:
          description: URL to the terms and conditions of the educator.
          type: string
      required:
      - country
      - currency
      - default_invoice_vat_multiplier
      - email
      - id
      - name
      - phone
      - signup_contact_info
      - signup_default_account_type
      - slug
      - standard_planning_text
      - time_zone
      - website_url
      type: object
    EducatorWithIncludes:
      allOf:
      - $ref: '#/components/schemas/Educator'
      - additionalProperties: false
        properties:
          invoice_address:
            $ref: '#/components/schemas/Address'
        type: object
      example:
        country: AD
        time_zone: time_zone
        locale: de
        signup_contact_info: signup_contact_info
        invoice_address:
          country: AD
          address: address
          addressee: addressee
          address_line2: address_line2
          city: city
          state_province: AL
          postal_code: postal_code
        website_url: website_url
        phone: phone
        standard_planning_text: standard_planning_text
        terms_url: terms_url
        name: name
        currency: EUR
        id: 0
        signup_default_account_type: personal
        slug: slug
        default_invoice_vat_multiplier: default_invoice_vat_multiplier
        email: email
    EnrollmentStatus:
      description: The status of the enrollment.
      enum:
      - active
      - canceled
      - completed
      - confirmed
      type: string
    GraduationState:
      description: The graduation state of the enrollment.
      enum:
      - awaiting_judgement
      - failed
      - passed
      type: string
    Enrollment:
      additionalProperties: false
      properties:
        id:
          description: Unique identifier of the enrollment.
          readOnly: true
          type: integer
        student_id:
          description: Unique identifier of the student.
          type: integer
        planned_course_id:
          description: Unique identifier of the planned course.
          type: integer
        order_id:
          description: Unique identifier of the order.
          nullable: true
          type: integer
        start_date:
          description: "If it is an enrollment of a fixed course, it equals the start\
            \ date. For a flexible course, it returns the enrollment specific start\
            \ date."
          format: date
          type: string
        end_date:
          description: "If it is an enrollment of a fixed course, it equals the end\
            \ date. For a flexible course, it returns the enrollment specific end\
            \ date."
          format: date
          nullable: true
          type: string
        status:
          $ref: '#/components/schemas/EnrollmentStatus'
        graduation_state:
          $ref: '#/components/schemas/GraduationState'
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - created_at
      - end_date
      - graduation_state
      - id
      - order_id
      - planned_course_id
      - start_date
      - status
      - student_id
      - updated_at
      type: object
    Grade:
      additionalProperties: false
      example:
        result: result
        score: score
        updated_at: 2000-01-23T04:56:07.000+00:00
        gradeable_id: 7
        grade: grade
        gradeable_type: gradeable_type
        created_at: 2000-01-23T04:56:07.000+00:00
        comment: comment
        id: 5
        grader_id: 2
      nullable: true
      properties:
        id:
          description: Unique identifier of the grade
          readOnly: true
          type: integer
        grader_id:
          description: Unique identifier of the user that awarded this grade
          readOnly: true
          type: integer
        result:
          description: The actual grade which is either the grade or the score
          type: string
        grade:
          description: The grade awarded (at least one of grade and score is required)
          nullable: true
          type: string
        score:
          description: The score awarded (at least one of grade and score is required)
          nullable: true
          type: string
        gradeable_id:
          description: Unique model identifier of the gradeable (enrollment / ...)
          type: integer
        gradeable_type:
          description: Model type of the gradeable (enrollment / ...)
          type: string
        comment:
          description: Additional comment about the grade
          nullable: true
          type: string
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - comment
      - created_at
      - grade
      - gradeable_id
      - gradeable_type
      - grader_id
      - id
      - result
      - score
      - updated_at
      type: object
    EnrollmentWithIncludes:
      allOf:
      - $ref: '#/components/schemas/Enrollment'
      - additionalProperties: false
        properties:
          grade:
            $ref: '#/components/schemas/Grade'
        type: object
      example:
        end_date: 2000-01-23
        updated_at: 2000-01-23T04:56:07.000+00:00
        graduation_state: awaiting_judgement
        planned_course_id: 1
        grade:
          result: result
          score: score
          updated_at: 2000-01-23T04:56:07.000+00:00
          gradeable_id: 7
          grade: grade
          gradeable_type: gradeable_type
          created_at: 2000-01-23T04:56:07.000+00:00
          comment: comment
          id: 5
          grader_id: 2
        student_id: 6
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 0
        order_id: 5
        start_date: 2000-01-23
        status: active
    InvoiceVat:
      additionalProperties: false
      properties:
        id:
          description: Unique idenitfier of the invoice vat.
          readOnly: true
          type: integer
        name:
          description: Name of the invoice vat.
          type: string
        percentage:
          description: Number representing the VAT percentage.
          type: string
        has_vat:
          description: Boolean indicating whether the invoice vat has VAT.
          type: boolean
      required:
      - has_vat
      - id
      - name
      - percentage
      type: object
    InvoiceVatWithIncludes:
      allOf:
      - $ref: '#/components/schemas/InvoiceVat'
      - additionalProperties: false
        type: object
      example:
        percentage: percentage
        name: name
        id: 0
        has_vat: true
    InvoiceStatus:
      description: The status of the invoice. The initial status will always be concept.
      enum:
      - concept
      - expired
      - open
      - paid
      type: string
    Invoice:
      additionalProperties: false
      properties:
        id:
          description: Unique identifier of the invoice.
          type: integer
        reference_id:
          description: Reference id of the Invoice. Is used to find the invoice.
          type: string
        number_int:
          description: The invoice number converted to an integer value.
          nullable: true
          type: number
        order_id:
          description: Unique identifier of the order the invoice belongs to.
          nullable: true
          type: integer
        order_number:
          description: The order number of the invoice.
          nullable: true
          type: number
        status:
          $ref: '#/components/schemas/InvoiceStatus'
        expiration_date:
          description: The expiration date of the invoice. Is set when the invoice
            is set to open.
          nullable: true
          type: string
        opened_at:
          description: The date when the invoice status was changed to open.
          nullable: true
          type: string
        description:
          description: Human readable description of the invoice.
          type: string
        account_name:
          description: The name of the account that is paying. Is copied to the invoice
            and is thus not automatically updated if the account name changes.
          type: string
        currency:
          $ref: '#/components/schemas/Currency'
        total_incl:
          description: The total cost of the invoice including VAT.
          type: string
        total_excl:
          description: The total cost of the invoice excluding VAT.
          type: string
        total_open:
          description: The open cost of the invoice including VAT.
          type: string
        pdf_url:
          description: Url to the download path of the invoice in PDF format.
          type: string
        xml_url:
          description: Url to the download path of the invoice in UML format.
          type: string
        number:
          description: "The invoice number which is unique per educator. If left empty,\
            \ it autoincrements."
          type: string
        account_id:
          description: Identifier of the account.
          type: integer
        feature:
          description: Some description of the invoice which is displayed on the invoice.
          nullable: true
          type: string
        footnote:
          description: The note displayed at the bottom of the invoice.
          nullable: true
          type: string
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - account_id
      - account_name
      - created_at
      - currency
      - description
      - expiration_date
      - feature
      - footnote
      - id
      - number
      - number_int
      - opened_at
      - order_id
      - order_number
      - pdf_url
      - reference_id
      - status
      - total_excl
      - total_incl
      - total_open
      - updated_at
      - xml_url
      type: object
    InvoiceItem:
      additionalProperties: false
      properties:
        id:
          description: Unique identifier of the invoice item.
          readOnly: true
          type: integer
        name:
          description: The name of the invoice item.
          type: string
        units:
          description: Integer representing the number of units of the invoice item.
          type: integer
        unit_price:
          description: Decimal representing the price of an unit.
          type: string
        invoice_vat_id:
          description: Identifier of the invoice vat.
          type: integer
        catalog_variant_id:
          description: Unique identifier of the catalog variant.
          nullable: true
          type: integer
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - catalog_variant_id
      - created_at
      - id
      - invoice_vat_id
      - name
      - unit_price
      - units
      - updated_at
      type: object
    InvoiceWithIncludes:
      allOf:
      - $ref: '#/components/schemas/Invoice'
      - additionalProperties: false
        properties:
          invoice_items:
            items:
              $ref: '#/components/schemas/InvoiceWithIncludes_allOf_invoice_items'
            type: array
        type: object
      example:
        reference_id: reference_id
        invoice_items:
        - updated_at: 2000-01-23T04:56:07.000+00:00
          invoice_vat_id: 9
          name: name
          catalog_variant_id: 3
          created_at: 2000-01-23T04:56:07.000+00:00
          id: 2
          units: 7
          unit_price: unit_price
        - updated_at: 2000-01-23T04:56:07.000+00:00
          invoice_vat_id: 9
          name: name
          catalog_variant_id: 3
          created_at: 2000-01-23T04:56:07.000+00:00
          id: 2
          units: 7
          unit_price: unit_price
        total_incl: total_incl
        order_number: 5.962133916683182
        description: description
        created_at: 2000-01-23T04:56:07.000+00:00
        pdf_url: pdf_url
        footnote: footnote
        expiration_date: expiration_date
        xml_url: xml_url
        opened_at: opened_at
        number: number
        account_id: 5
        feature: feature
        updated_at: 2000-01-23T04:56:07.000+00:00
        account_name: account_name
        total_open: total_open
        total_excl: total_excl
        currency: EUR
        id: 0
        number_int: 6.027456183070403
        order_id: 1
        status: concept
    Payment:
      additionalProperties: false
      properties:
        id:
          description: Unique identifier of the payment.
          readOnly: true
          type: integer
        invoice_id:
          description: Unique identifier of the linked invoice.
          type: integer
        amount:
          description: A number representing the total amount of the invoice.
          type: string
        currency:
          $ref: '#/components/schemas/Currency'
        payment_method_id:
          description: Identifier of the payment method.
          type: integer
        status:
          description: The status of the payment.
          enum:
          - new
          - open
          - paid
          - failed
          - internal_server_error
          type: string
        gateway_id:
          description: The payment provider payment id.
          nullable: true
          type: integer
        date:
          description: Date on which the payment was created.
          type: string
      required:
      - amount
      - currency
      - date
      - gateway_id
      - id
      - invoice_id
      - payment_method_id
      - status
      type: object
    PaymentWithIncludes:
      allOf:
      - $ref: '#/components/schemas/Payment'
      - additionalProperties: false
        type: object
      example:
        date: date
        amount: amount
        payment_method_id: 1
        invoice_id: 6
        currency: EUR
        id: 0
        gateway_id: 5
        status: new
    PaymentMethod:
      example:
        plugin_id: 2
        name: name
        id: 5
        gateway: Mollie
      properties:
        id:
          description: Unique identifier of the payment method.
          readOnly: true
          type: integer
        name:
          description: Human readable name of the payment method.
          type: string
        gateway:
          description: The type of the integration.
          enum:
          - Mollie
          - StripeIdeal
          - StripeAlipay
          - StripeGiropay
          - ValitorBasic
          - ValitorLoan
          - Borgun
          - StripeCheckout
          - AuthorizeNet
          - TouchNet
          - WpmEducation
          nullable: true
          type: string
        plugin_id:
          description: Unique identifier of the optionally linked plugin.
          nullable: true
          type: integer
      required:
      - gateway
      - id
      - name
      - plugin_id
      type: object
    PluginData:
      additionalProperties: false
      properties:
        id:
          description: Identifier of the data.
          readOnly: true
          type: integer
        data:
          description: Provided data.
          nullable: true
          type: string
      required:
      - data
      - id
      type: object
    PluginDataWithIncludes:
      allOf:
      - $ref: '#/components/schemas/PluginData'
      - additionalProperties: false
        type: object
      example:
        data: data
        id: 7
    PaymentWithFixedIncludes:
      allOf:
      - $ref: '#/components/schemas/Payment'
      - additionalProperties: false
        properties:
          payment_method:
            $ref: '#/components/schemas/PaymentMethod'
          plugin_data:
            items:
              $ref: '#/components/schemas/PluginDataWithIncludes'
            type: array
        type: object
      example:
        date: date
        plugin_data:
        - data: data
          id: 7
        - data: data
          id: 7
        amount: amount
        payment_method_id: 1
        invoice_id: 6
        currency: EUR
        id: 0
        gateway_id: 5
        payment_method:
          plugin_id: 2
          name: name
          id: 5
          gateway: Mollie
        status: new
    Label:
      additionalProperties: false
      example:
        color: '#aa33cc'
        updated_at: 2000-01-23T04:56:07.000+00:00
        name: name
        model_type: Account
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 0
      properties:
        id:
          description: Unique identifier of the label
          readOnly: true
          type: integer
        name:
          description: The name of the label
          type: string
        color:
          default: '#777777'
          description: Hex color
          example: '#aa33cc'
          pattern: "^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$"
          type: string
        model_type:
          description: The model type for which this label is made available
          enum:
          - Account
          - Catalog::Product
          - Lead
          - Order
          - Teacher
          - User
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
      required:
      - color
      - created_at
      - id
      - model_type
      - name
      - updated_at
      type: object
    Lead:
      additionalProperties: false
      properties:
        id:
          description: Unique identifier of the lead
          readOnly: true
          type: integer
        creation_method:
          description: Indicates the lead was created
          type: string
        referral_text:
          description: Text supplied at referral
          nullable: true
          type: string
        title:
          description: Title of the lead
          type: string
        account_id:
          description: ID of the account linked to this lead
          nullable: true
          type: integer
        user_id:
          description: ID of the user linked to this lead
          nullable: true
          type: integer
        label_ids:
          description: |
            An array of integers representing unique identifier values associated with labels.
          items:
            type: integer
          type: array
        value:
          description: Decimal representing the price of a lead
          nullable: true
          type: string
        company_name:
          description: Name of the company where this lead comes from
          nullable: true
          type: string
        first_name:
          description: The first name of the lead
          nullable: true
          type: string
        middle_name:
          description: The middle name of the lead
          nullable: true
          type: string
        last_name:
          description: The last name of the lead
          nullable: true
          type: string
        administrator_id:
          description: ID of administrator that owns the lead
          nullable: true
          type: integer
        email:
          description: The email of the lead
          nullable: true
          type: string
        phone:
          description: The phone number of the lead
          nullable: true
          type: string
        status:
          description: The status of the lead
          enum:
          - prospect
          - waiting_list
          - won
          - lost
          - archive
          type: string
        quality:
          description: Star scoring for the lead
          nullable: true
          type: string
        wants_newsletter:
          description: Indicates if lead wants to receive the newsletter or not
          type: boolean
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - account_id
      - administrator_id
      - company_name
      - created_at
      - creation_method
      - email
      - first_name
      - id
      - label_ids
      - last_name
      - middle_name
      - phone
      - quality
      - referral_text
      - status
      - title
      - updated_at
      - user_id
      - value
      - wants_newsletter
      type: object
    CourseLead:
      additionalProperties: false
      properties:
        id:
          description: Unique identifier of the course lead
          readOnly: true
          type: integer
        lead_id:
          description: Unique identifier of the lead
          type: integer
        course_id:
          description: ID of the course
          type: integer
        planned_course_id:
          description: ID of the planned course
          nullable: true
          type: integer
      required:
      - course_id
      - id
      - lead_id
      - planned_course_id
      type: object
    LeadProduct:
      additionalProperties: false
      example:
        catalog_product_id: 2
        catalog_variant_id: 7
      properties:
        catalog_product_id:
          description: ID of the catalog product
          type: integer
        catalog_variant_id:
          description: ID of the catalog variant
          nullable: true
          type: integer
      required:
      - catalog_product_id
      - catalog_variant_id
      type: object
    LeadWithIncludes:
      allOf:
      - $ref: '#/components/schemas/Lead'
      - additionalProperties: false
        properties:
          address:
            $ref: '#/components/schemas/Address'
          lead_products:
            items:
              $ref: '#/components/schemas/LeadProduct'
            type: array
        type: object
      example:
        administrator_id: 5
        lead_products:
        - catalog_product_id: 2
          catalog_variant_id: 7
        - catalog_product_id: 2
          catalog_variant_id: 7
        creation_method: creation_method
        address:
          country: AD
          address: address
          addressee: addressee
          address_line2: address_line2
          city: city
          state_province: AL
          postal_code: postal_code
        label_ids:
        - 5
        - 5
        last_name: last_name
        created_at: 2000-01-23T04:56:07.000+00:00
        title: title
        middle_name: middle_name
        referral_text: referral_text
        quality: quality
        account_id: 6
        updated_at: 2000-01-23T04:56:07.000+00:00
        user_id: 1
        phone: phone
        wants_newsletter: true
        company_name: company_name
        id: 0
        value: value
        first_name: first_name
        email: email
        status: prospect
    MaterialGroup:
      additionalProperties: false
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 0
      properties:
        id:
          description: Unique identifier of the material group
          readOnly: true
          type: integer
        name:
          description: Name of the material group where the course is held.
          type: string
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - created_at
      - id
      - name
      - updated_at
      type: object
    Material:
      additionalProperties: false
      example:
        material_group_id: 6
        use_type: reservable
        updated_at: 2000-01-23T04:56:07.000+00:00
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 0
      properties:
        id:
          description: Unique identifier of the material
          readOnly: true
          type: integer
        name:
          description: Name of the material.
          type: string
        use_type:
          description: Type of material.
          enum:
          - reservable
          - consumable
          type: string
        material_group_id:
          description: Unique identifier of the material group.
          type: integer
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - created_at
      - id
      - material_group_id
      - name
      - updated_at
      - use_type
      type: object
    MaterialWithIncludes:
      allOf:
      - $ref: '#/components/schemas/Material'
      - additionalProperties: false
        type: object
      example:
        material_group_id: 6
        use_type: reservable
        updated_at: 2000-01-23T04:56:07.000+00:00
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 0
    MeetingLocation:
      additionalProperties: false
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 0
        course_location_id: 6
        capacity: 1
      properties:
        id:
          description: Unique identifier of the meeting location
          readOnly: true
          type: integer
        course_location_id:
          description: Unique identifier of the course location.
          type: integer
        name:
          type: string
        capacity:
          description: Capacity of the meeting location
          nullable: true
          type: integer
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - capacity
      - course_location_id
      - created_at
      - id
      - name
      - updated_at
      type: object
    MeetingLocationWithIncludes:
      allOf:
      - $ref: '#/components/schemas/MeetingLocation'
      - additionalProperties: false
        properties:
          address:
            $ref: '#/components/schemas/Address'
        type: object
      example:
        address:
          country: AD
          address: address
          addressee: addressee
          address_line2: address_line2
          city: city
          state_province: AL
          postal_code: postal_code
        updated_at: 2000-01-23T04:56:07.000+00:00
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 0
        course_location_id: 6
        capacity: 1
    Meeting:
      additionalProperties: false
      properties:
        id:
          description: Unique identifier of the meeting.
          readOnly: true
          type: integer
        name:
          description: The name of the meeting.
          nullable: true
          type: string
        planned_course_id:
          description: Unique identifier of the planned course.
          type: integer
        start_date_time:
          description: Date and time when the meeting is starting.
          format: date-time
          type: string
        end_date_time:
          description: The date and time when the meeting is ending.
          format: date-time
          type: string
        meeting_location_id:
          description: Unique identifier of the meeting location.
          nullable: true
          type: integer
        planning_meeting_location_ids:
          items:
            type: integer
          type: array
        description:
          description: The description of the meeting.
          nullable: true
          type: string
        description_dashboard:
          description: The description that will be shown in the dashboard.
          nullable: true
          type: string
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - created_at
      - description
      - description_dashboard
      - end_date_time
      - id
      - meeting_location_id
      - name
      - planned_course_id
      - planning_meeting_location_ids
      - start_date_time
      - updated_at
      type: object
    PlanningAttendee:
      additionalProperties: false
      example:
        attendable_id: 2
        teacher_role_id: 9
        teacher_id: 7
        comment: comment
        id: 5
        attendable_type: attendable_type
      properties:
        id:
          description: Unique identifier of the planning attendee
          readOnly: true
          type: integer
        attendable_id:
          description: Unique identifier of the object that is attended.
          type: integer
        attendable_type:
          description: Type of the object that is attended.
          type: string
        teacher_id:
          description: Unique identifier of the teacher.
          type: integer
        teacher_role_id:
          description: Unique identifier of the teacher role.
          type: integer
        comment:
          description: Comment on the teacher assignment
          nullable: true
          type: string
      required:
      - attendable_id
      - attendable_type
      - comment
      - id
      - teacher_id
      type: object
    PlanningMaterial:
      additionalProperties: false
      example:
        amount: 2
        material_id: 3
        comment: comment
      properties:
        material_id:
          description: Unique identifier of the material
          type: integer
        amount:
          description: Amount of the material
          nullable: true
          type: integer
        comment:
          description: Comment on the planning material
          nullable: true
          type: string
      required:
      - amount
      - comment
      - material_id
      type: object
    MeetingWithIncludes:
      allOf:
      - $ref: '#/components/schemas/Meeting'
      - additionalProperties: false
        properties:
          planning_attendees:
            items:
              $ref: '#/components/schemas/PlanningAttendee'
            type: array
          planning_materials:
            items:
              $ref: '#/components/schemas/PlanningMaterial'
            type: array
          planning_meeting_location_ids:
            items:
              type: integer
            type: array
        required:
        - planning_attendees
        - planning_meeting_location_ids
        type: object
      example:
        planned_course_id: 6
        description_dashboard: description_dashboard
        description: description
        created_at: 2000-01-23T04:56:07.000+00:00
        planning_materials:
        - amount: 2
          material_id: 3
          comment: comment
        - amount: 2
          material_id: 3
          comment: comment
        meeting_location_id: 1
        end_date_time: 2000-01-23T04:56:07.000+00:00
        updated_at: 2000-01-23T04:56:07.000+00:00
        name: name
        planning_meeting_location_ids:
        - 4
        - 4
        planning_attendees:
        - attendable_id: 2
          teacher_role_id: 9
          teacher_id: 7
          comment: comment
          id: 5
          attendable_type: attendable_type
        - attendable_id: 2
          teacher_role_id: 9
          teacher_id: 7
          comment: comment
          id: 5
          attendable_type: attendable_type
        id: 0
        start_date_time: 2000-01-23T04:56:07.000+00:00
    OrderStatus:
      description: State of the order.
      enum:
      - active
      - canceled
      - denied
      - requested
      type: string
    Order:
      additionalProperties: false
      properties:
        id:
          description: Unique identifier of the order.
          readOnly: true
          type: integer
        number:
          description: Educator specific identifier of the order which autoincrements.
          type: number
        status:
          $ref: '#/components/schemas/OrderStatus'
        number_of_students:
          description: Number of students in this order.
          type: integer
        origin:
          description: "Where the order originated from ex. Unknown, backend, signup."
          type: string
        customer_comment:
          description: Comment from the customer.
          nullable: true
          type: string
        total_cost_excl:
          description: Decimal representing the cost of the order excluding VAT
          nullable: true
          readOnly: true
          type: string
        total_cost_incl:
          description: Decimal representing the cost of the order including VAT
          nullable: true
          readOnly: true
          type: string
        cost:
          description: Decimal representing the value of the order
          nullable: true
          type: string
        cost_scheme:
          $ref: '#/components/schemas/CostScheme'
        catalog_variant_id:
          description: Unique identifier of the orders CatalogVariant.
          type: integer
        creator_id:
          description: Unique identifier of the orders Creator (User).
          nullable: true
          type: integer
        account_id:
          description: Unique identifier of the orders Account.
          type: integer
        payment_method_id:
          description: Unique identifier of the orders PaymentMethod.
          nullable: true
          type: integer
        payment_option_id:
          description: Unique identifier of the orders PaymentOption.
          nullable: true
          type: integer
        label_ids:
          description: |
            An array of integers representing unique identifier values associated with labels.
          items:
            type: integer
          type: array
        discount_code:
          description: The discount code used for this order.
          nullable: true
          type: string
        total_discount:
          description: Decimal representing the total discount applied to this order.
          nullable: true
          type: string
        referral_id:
          description: Identifier of the referral.
          nullable: true
          type: integer
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - account_id
      - catalog_variant_id
      - cost
      - cost_scheme
      - created_at
      - creator_id
      - customer_comment
      - id
      - label_ids
      - number
      - number_of_students
      - origin
      - payment_option_id
      - referral_id
      - status
      - total_cost_excl
      - total_cost_incl
      - updated_at
      type: object
    OrderItem:
      additionalProperties: false
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        student_id: 1
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 4
        order_id: 7
      properties:
        id:
          description: Unique identifier of the order item.
          readOnly: true
          type: integer
        order_id:
          description: Unique identifier of the order.
          type: integer
        student_id:
          description: Unique identifier of the student.
          type: integer
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - created_at
      - id
      - order_id
      - student_id
      - updated_at
      type: object
    OrderWithIncludes:
      allOf:
      - $ref: '#/components/schemas/Order'
      - additionalProperties: false
        properties:
          custom:
            $ref: '#/components/schemas/OrderWithIncludes_allOf_custom'
          order_items:
            items:
              $ref: '#/components/schemas/OrderItem'
            type: array
        type: object
      example:
        total_cost_incl: total_cost_incl
        cost: cost
        total_discount: total_discount
        label_ids:
        - 3
        - 3
        discount_code: discount_code
        origin: origin
        custom: {}
        created_at: 2000-01-23T04:56:07.000+00:00
        payment_option_id: 9
        number: 6.027456183070403
        payment_method_id: 7
        account_id: 2
        updated_at: 2000-01-23T04:56:07.000+00:00
        total_cost_excl: total_cost_excl
        cost_scheme: free
        creator_id: 5
        catalog_variant_id: 5
        referral_id: 2
        id: 0
        customer_comment: customer_comment
        status: active
        number_of_students: 1
        order_items:
        - updated_at: 2000-01-23T04:56:07.000+00:00
          student_id: 1
          created_at: 2000-01-23T04:56:07.000+00:00
          id: 4
          order_id: 7
        - updated_at: 2000-01-23T04:56:07.000+00:00
          student_id: 1
          created_at: 2000-01-23T04:56:07.000+00:00
          id: 4
          order_id: 7
    PaymentOption:
      additionalProperties: false
      example:
        multiplier: multiplier
        extra_cost: extra_cost
        percentage: 1.4658129805029452
        name: name
        id: 0
        available_from: 6.027456183070403
      properties:
        id:
          description: Unique identifier of the payment option.
          readOnly: true
          type: integer
        name:
          description: Human readable name of the payment option.
          type: string
        available_from:
          description: Minimum required price before this option is allowed.
          type: number
        extra_cost:
          description: Extra cost on the invoice if this option is used.
          type: string
        percentage:
          description: If the type of payment option is with a percentual deposit.
          nullable: true
          type: number
        multiplier:
          description: The multiplier to get the total cost.
          nullable: true
          type: string
      required:
      - available_from
      - extra_cost
      - id
      - multiplier
      - name
      - percentage
      type: object
    PlannedCoursePayload:
      example:
        end_date: end_date
        course_id: 0
        cost: 5.962133916683182
        is_published: true
        custom: "{}"
        teacher_ids:
        - 9
        - 9
        min_participants: 6
        course_variant_id: 5
        type: FixedPlannedCourse
        max_participants: 1
        duration: 7.061401241503109
        cost_scheme: student
        custom_associations:
        - custom_association_id: 6
          custom_record_ids:
          - 1
          - 1
        - custom_association_id: 6
          custom_record_ids:
          - 1
          - 1
        course_location_id: 2
        start_date: start_date
      properties:
        is_published:
          description: Boolean if is published on the website.
          type: boolean
        course_id:
          description: Unique identifier of the course.
          type: integer
        type:
          description: The type of the course.
          enum:
          - FixedPlannedCourse
          - FlexiblePlannedCourse
          type: string
        start_date:
          description: Date at which the planned course starts. Only needed for fixed
            planned courses.
          type: string
        end_date:
          description: Date at which the planned course ends. Only needed for fixed
            planned courses.
          nullable: true
          type: string
        min_participants:
          description: A number representing the minimum number of participants that
            can enroll for the planned course.
          nullable: true
          type: integer
        max_participants:
          description: A number representing the maximum number of participants that
            can enroll for the planned course.
          nullable: true
          type: integer
        cost_scheme:
          description: The cost schema that the payment will follow for the specified
            course.
          enum:
          - student
          - order
          - tbd
          - free
          type: string
        cost:
          description: The price to be paid for this planned course. Required if cost_scheme
            is student (default value) or order.
          nullable: true
          type: number
        course_variant_id:
          description: Unique identifier of the course variant.
          nullable: true
          type: integer
        course_location_id:
          description: Unique identifier of the course location.
          nullable: true
          type: integer
        duration:
          description: The period of time of the planned course in days. Only needed
            for flexible planned courses.
          type: number
        teacher_ids:
          description: The ids of the teachers in the course
          items:
            type: integer
          type: array
        custom:
          description: The custom properties of the planned course.
          properties: {}
          type: object
        custom_associations:
          description: |
            Custom associations are a way to link custom records to a program.
            ![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)
          items:
            $ref: '#/components/schemas/CustomAssociationsRecordsPayload'
          type: array
      required:
      - cost
      - course_id
      - type
      type: object
    PlannedCoursePatchPayload:
      additionalProperties: false
      example:
        end_date: end_date
        course_id: 0
        cost: 5.962133916683182
        is_published: true
        custom: "{}"
        teacher_ids:
        - teacher_ids
        - teacher_ids
        min_participants: 6
        course_variant_id: 5
        max_participants: 1
        duration: 7.061401241503109
        cost_scheme: student
        custom_associations:
        - custom_association_id: 6
          custom_record_ids:
          - 1
          - 1
        - custom_association_id: 6
          custom_record_ids:
          - 1
          - 1
        course_location_id: 2
        start_date: start_date
      properties:
        is_published:
          description: Boolean if is published on the website.
          type: boolean
        course_id:
          description: Unique identifier of the course.
          type: integer
        start_date:
          description: Date at which the planned course starts. Only needed for fixed
            planned courses.
          type: string
        end_date:
          description: Date at which the planned course ends. Only needed for fixed
            planned courses.
          nullable: true
          type: string
        min_participants:
          description: A number representing the minimum number of participants that
            can enroll for the planned course.
          nullable: true
          type: integer
        max_participants:
          description: A number representing the maximum number of participants that
            can enroll for the planned course.
          nullable: true
          type: integer
        cost_scheme:
          description: The cost schema that the payment will follow for the specified
            course.
          enum:
          - student
          - order
          - tbd
          - free
          type: string
        cost:
          description: A positive float representing the price of the planned course.
          nullable: true
          type: number
        course_variant_id:
          description: Unique identifier of the course variant.
          nullable: true
          type: integer
        course_location_id:
          description: Unique identifier of the course location.
          nullable: true
          type: integer
        duration:
          description: The period of time of the planned course. Only needed for flexible
            planned courses.
          type: number
        teacher_ids:
          description: The ids of the teachers in the course
          items:
            type: string
          type: array
        custom:
          description: The custom properties of the planned course.
          properties: {}
          type: object
        custom_associations:
          description: |
            Custom associations are a way to link custom records to a program.
            ![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)
          items:
            $ref: '#/components/schemas/CustomAssociationsRecordsPayload'
          type: array
      type: object
    TeacherEnrollment:
      additionalProperties: false
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        teacher_role_id: 5
        teacher_id: 1
        planned_course_id: 6
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 0
      properties:
        id:
          description: Unique identifier of the teacher enrollment.
          readOnly: true
          type: integer
        planned_course_id:
          description: Unique identifier of the planned course.
          type: integer
        teacher_id:
          description: Unique identifier of the teacher.
          type: integer
        teacher_role_id:
          description: |
            Unique identifier of the teacher role.

            ![Teacher Roles](https://img.shields.io/badge/Feature-Teacher_Roles-blue)
          type: integer
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - created_at
      - id
      - planned_course_id
      - teacher_id
      - updated_at
      type: object
    PlanningConflict:
      additionalProperties: false
      example:
        conflicting_event_type: Meeting
        resource_type: Teacher
        conflicting_event_id: 1
        event_start_date_time: event_start_date_time
        conflicting_event_end_date_time: conflicting_event_end_date_time
        end_date_time: end_date_time
        event_id: 6
        event_type: Meeting
        resource_id: 0
        resource_name: resource_name
        start_date_time: start_date_time
        conflicting_event_start_date_time: conflicting_event_start_date_time
        event_end_date_time: event_end_date_time
      properties:
        resource_type:
          description: Type of the resource
          enum:
          - Teacher
          - Material
          - MeetingLocation
          type: string
        resource_id:
          description: Unique identifier of the resource
          type: integer
        resource_name:
          description: Name of the resource
          type: string
        event_id:
          description: Unique identifier of the event
          type: integer
        event_type:
          description: Type of the event
          enum:
          - Meeting
          - Planning::Event
          type: string
        event_start_date_time:
          description: Timestamp of the start of the event
          type: string
        event_end_date_time:
          description: Timestamp of the end of the event
          type: string
        conflicting_event_id:
          description: Unique identifier of the conflicting event
          type: integer
        conflicting_event_type:
          description: Type of the conflicting event
          enum:
          - Meeting
          - Planning::Event
          type: string
        conflicting_event_start_date_time:
          description: Timestamp of the start of the conflicting event
          type: string
        conflicting_event_end_date_time:
          description: Timestamp of the end of the conflicting event
          type: string
        start_date_time:
          description: Timestamp of the start of the conflict
          type: string
        end_date_time:
          description: Timestamp of the end of the conflict
          type: string
      required:
      - conflicting_event_end_date_time
      - conflicting_event_id
      - conflicting_event_start_date_time
      - conflicting_event_type
      - end_date_time
      - event_end_date_time
      - event_id
      - event_start_date_time
      - event_type
      - resource_id
      - resource_name
      - resource_type
      - start_date_time
      type: object
    PlanningEvent:
      additionalProperties: false
      properties:
        id:
          description: Unique identifier of the meeting template
          readOnly: true
          type: integer
        meeting_id:
          description: Identifier of the meeting
          type: integer
        meeting_location_id:
          description: Unique identifier of the meeting location.
          nullable: true
          type: integer
        name:
          description: Name of the event
          nullable: true
          type: string
        start_date_time:
          description: Date and time when the event is starting
          type: string
        end_date_time:
          description: The date and time when the event is ending
          type: string
        planning_meeting_location_ids:
          items:
            type: integer
          type: array
      required:
      - end_date_time
      - id
      - meeting_id
      - meeting_location_id
      - name
      - planning_meeting_location_ids
      - start_date_time
      type: object
    PlanningEventWithIncludes:
      allOf:
      - $ref: '#/components/schemas/PlanningEvent'
      - additionalProperties: false
        properties:
          planning_attendees:
            items:
              $ref: '#/components/schemas/PlanningAttendee'
            type: array
          planning_materials:
            items:
              $ref: '#/components/schemas/PlanningMaterial'
            type: array
        required:
        - planning_attendees
        type: object
      example:
        meeting_location_id: 1
        end_date_time: end_date_time
        meeting_id: 6
        name: name
        planning_meeting_location_ids:
        - 5
        - 5
        planning_attendees:
        - attendable_id: 2
          teacher_role_id: 9
          teacher_id: 7
          comment: comment
          id: 5
          attendable_type: attendable_type
        - attendable_id: 2
          teacher_role_id: 9
          teacher_id: 7
          comment: comment
          id: 5
          attendable_type: attendable_type
        id: 0
        start_date_time: start_date_time
        planning_materials:
        - amount: 2
          material_id: 3
          comment: comment
        - amount: 2
          material_id: 3
          comment: comment
    User:
      additionalProperties: false
      example:
        label_ids:
        - 6
        - 6
        roles:
        - admin
        - admin
        last_name: last_name
        description: description
        created_at: 2000-01-23T04:56:07.000+00:00
        middle_name: middle_name
        locale: de
        notes_user: notes_user
        avatar_url: avatar_url
        student_number: student_number
        updated_at: 2000-01-23T04:56:07.000+00:00
        wants_newsletter: true
        teacher_headline: teacher_headline
        employee_number: employee_number
        teacher_description: teacher_description
        id: 0
        first_name: first_name
        email: email
      properties:
        id:
          description: Unique identifier of the user.
          readOnly: true
          type: integer
        first_name:
          description: First name of the user.
          type: string
        middle_name:
          description: Middle name of the user.
          nullable: true
          type: string
        last_name:
          description: Last name of the user.
          type: string
        email:
          description: The e-mail of the user.
          format: email
          type: string
        avatar_url:
          description: The relative url path to the avatar.
          type: string
        roles:
          description: List of roles the user has.
          items:
            enum:
            - admin
            - teacher
            - customer
            - student
            type: string
          readOnly: true
          type: array
        notes_user:
          description: Short note about the user.
          nullable: true
          type: string
        description:
          description: Long description of the user. (same as teacher_description)
          nullable: true
          type: string
        label_ids:
          description: |
            An array of integers representing unique identifier values associated with labels.
          items:
            type: integer
          type: array
        employee_number:
          description: The employee number of this user.
          nullable: true
          type: string
        student_number:
          description: Unique identifier of the student.
          nullable: true
          type: string
        teacher_headline:
          description: Short description of the user.
          nullable: true
          type: string
        teacher_description:
          description: Long description of the user. (same as description)
          nullable: true
          type: string
        locale:
          $ref: '#/components/schemas/Locale'
        wants_newsletter:
          description: Boolean representing the possibility of the user to receive
            newsletters.
          type: boolean
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - avatar_url
      - created_at
      - description
      - email
      - employee_number
      - first_name
      - id
      - label_ids
      - last_name
      - locale
      - middle_name
      - notes_user
      - roles
      - slug
      - student_number
      - teacher_description
      - teacher_enrollments_count
      - teacher_headline
      - updated_at
      - wants_newsletter
      type: object
    Edition:
      additionalProperties: false
      properties:
        id:
          description: Unique identifier of the program edition.
          readOnly: true
          type: integer
        name:
          description: Name of the program edition.
          type: string
        program_id:
          description: Unique identifier of associated program.
          type: integer
        cost:
          description: The price to be paid for this edition.
          nullable: true
          type: string
        cost_scheme:
          $ref: '#/components/schemas/CostScheme'
        min_participants:
          description: A number representing the minimum number of participants.
          nullable: true
          type: integer
        max_participants:
          description: A number representing the maximum number of participants.
          nullable: true
          type: integer
        current_participants:
          description: The current amount of participants.
          readOnly: true
          type: integer
        is_published:
          default: false
          description: Boolean representing the publishable status of the edition.
          type: boolean
        start_date:
          description: Nominal start date of the edition.
          format: date
          nullable: true
          type: string
        end_date:
          description: Nominal end date of the edition (inclusive).
          format: date
          nullable: true
          type: string
      required:
      - cost
      - cost_scheme
      - current_participants
      - end_date
      - id
      - is_published
      - max_participants
      - min_participants
      - name
      - program_id
      - start_date
      type: object
    EditionWithIncludes:
      allOf:
      - $ref: '#/components/schemas/Edition'
      - additionalProperties: false
        type: object
      example:
        end_date: 2000-01-23
        cost: cost
        current_participants: 5
        is_published: false
        program_id: 6
        cost_scheme: free
        name: name
        id: 0
        min_participants: 1
        max_participants: 5
        start_date: 2000-01-23
    ProgramEditionPayload:
      additionalProperties: false
      example:
        cost: 6.027456183070403
        is_published: true
        program_id: 0
        cost_scheme: student
        custom: "{}"
        name: name
        min_participants: 1
        custom_associations:
        - custom_association_id: 6
          custom_record_ids:
          - 1
          - 1
        - custom_association_id: 6
          custom_record_ids:
          - 1
          - 1
        max_participants: 5
      properties:
        program_id:
          description: Unique identifier of associated program.
          type: integer
        name:
          description: Name of the program edition.
          type: string
        cost:
          description: The price to be paid for this edition. Required if cost_scheme
            is student (default value) or order.
          nullable: true
          type: number
        cost_scheme:
          description: How should the edition be paid by default.
          enum:
          - student
          - order
          - tbd
          - free
          type: string
        min_participants:
          description: A number representing the minimum number of participants.
          nullable: true
          type: integer
        max_participants:
          description: A number representing the maximum number of participants.
          nullable: true
          type: integer
        is_published:
          description: Boolean representing the publishable status of the edition.
          type: boolean
        custom:
          description: The custom properties of the edition.
          properties: {}
          type: object
        custom_associations:
          description: |
            Custom associations are a way to link custom records to a program edition.

            ![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)
          items:
            $ref: '#/components/schemas/CustomAssociationsRecordsPayload'
          type: array
      required:
      - name
      - program_id
      type: object
    ProgramEditionPatchPayload:
      additionalProperties: false
      example:
        cost: cost
        is_published: true
        program_id: 0
        cost_scheme: student
        custom: "{}"
        name: name
        min_participants: 6
        custom_associations:
        - custom_association_id: 6
          custom_record_ids:
          - 1
          - 1
        - custom_association_id: 6
          custom_record_ids:
          - 1
          - 1
        max_participants: 1
      properties:
        program_id:
          description: Unique identifier of associated program.
          type: integer
        name:
          description: Name of the program edition.
          type: string
        cost:
          description: The price to be paid for this edition.
          nullable: true
          type: string
        cost_scheme:
          description: How should the edition be paid by default.
          enum:
          - student
          - order
          - tbd
          - free
          type: string
        min_participants:
          description: A number representing the minimum number of participants.
          nullable: true
          type: integer
        max_participants:
          description: A number representing the maximum number of participants.
          nullable: true
          type: integer
        is_published:
          description: Boolean representing the publishable status of the edition.
          type: boolean
        custom:
          description: The custom properties of the edition.
          properties: {}
          type: object
        custom_associations:
          description: |
            The new set of custom records to be associated with the program.

            ![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)
          items:
            $ref: '#/components/schemas/CustomAssociationsRecordsPayload'
          type: array
      type: object
    ProgramEditionBaseElement:
      additionalProperties: false
      properties:
        name:
          description: The name of the element.
          type: string
        credits:
          description: The credits of the element.
          example: "5.0"
          format: decimal
          nullable: true
          type: string
      required:
      - credits
      - name
      type: object
    ProgramEditionCourseElement:
      allOf:
      - $ref: '#/components/schemas/ProgramEditionBaseElement'
      - additionalProperties: false
        properties:
          element_type:
            description: The type of the element.
            enum:
            - CourseElement
            type: string
          course_id:
            description: The identifier of the associated course.
            type: integer
          planned_course_id:
            description: The identifier of the associated planned course.
            nullable: true
            type: integer
        required:
        - course_id
        - element_type
        - planned_course_id
        type: object
      example:
        course_id: 0
        credits: "5.0"
        planned_course_id: 6
        name: name
        element_type: CourseElement
    ProgramEditionEvaluationElement:
      allOf:
      - $ref: '#/components/schemas/ProgramEditionBaseElement'
      - additionalProperties: false
        properties:
          element_type:
            description: The type of the element.
            enum:
            - EvaluationElement
            type: string
        required:
        - element_type
        type: object
    ProgramEditionBlockElementItem:
      discriminator:
        mapping:
          CourseElement: '#/components/schemas/ProgramEditionCourseElement'
          EvaluationElement: '#/components/schemas/ProgramEditionEvaluationElement'
        propertyName: element_type
      oneOf:
      - $ref: '#/components/schemas/ProgramEditionCourseElement'
      - $ref: '#/components/schemas/ProgramEditionEvaluationElement'
      type: object
    ProgramEditionBlockElement:
      allOf:
      - $ref: '#/components/schemas/ProgramEditionBaseElement'
      - additionalProperties: false
        properties:
          element_type:
            description: The type of the element.
            enum:
            - BlockElement
            type: string
          elements:
            description: The elements of the block element.
            items:
              $ref: '#/components/schemas/ProgramEditionBlockElementItem'
            type: array
        required:
        - element_type
        - elements
        type: object
      example:
        credits: "5.0"
        elements:
        - course_id: 0
          credits: "5.0"
          planned_course_id: 6
          name: name
          element_type: CourseElement
        - course_id: 0
          credits: "5.0"
          planned_course_id: 6
          name: name
          element_type: CourseElement
        name: name
        element_type: BlockElement
    ProgramEditionElectiveElement:
      allOf:
      - $ref: '#/components/schemas/ProgramEditionBaseElement'
      - additionalProperties: false
        properties:
          element_type:
            description: The type of the element.
            enum:
            - ElectiveElement
            type: string
        required:
        - element_type
        type: object
    ProgramEditionThesisElement:
      allOf:
      - $ref: '#/components/schemas/ProgramEditionBaseElement'
      - additionalProperties: false
        properties:
          element_type:
            description: The type of the element.
            enum:
            - ThesisElement
            type: string
          course_id:
            description: The identifier of the associated course.
            type: integer
          planned_course_id:
            description: The identifier of the associated planned course.
            nullable: true
            type: integer
        required:
        - course_id
        - element_type
        - planned_course_id
        type: object
    ProgramEditionElement:
      discriminator:
        mapping:
          BlockElement: '#/components/schemas/ProgramEditionBlockElement'
          CourseElement: '#/components/schemas/ProgramEditionCourseElement'
          ElectiveElement: '#/components/schemas/ProgramEditionElectiveElement'
          EvaluationElement: '#/components/schemas/ProgramEditionEvaluationElement'
          ThesisElement: '#/components/schemas/ProgramEditionThesisElement'
        propertyName: element_type
      oneOf:
      - $ref: '#/components/schemas/ProgramEditionBlockElement'
      - $ref: '#/components/schemas/ProgramEditionCourseElement'
      - $ref: '#/components/schemas/ProgramEditionElectiveElement'
      - $ref: '#/components/schemas/ProgramEditionEvaluationElement'
      - $ref: '#/components/schemas/ProgramEditionThesisElement'
      type: object
    Element:
      additionalProperties: false
      example:
        course_id: 5
        edition_id: 6
        planned_course_id: 5
        id: 0
        position: 1
      properties:
        id:
          description: Unique identifier of the element.
          readOnly: true
          type: integer
        edition_id:
          description: The identifier of the associated course.
          type: integer
        position:
          description: Sorting position of the element. Lower is higher.
          type: integer
        course_id:
          description: The identifier of the associated course.
          type: integer
        planned_course_id:
          description: The identifier of the associated course.
          nullable: true
          type: integer
      required:
      - course_id
      - edition_id
      - id
      - planned_course_id
      - position
      type: object
    ProgramEnrollment:
      additionalProperties: false
      properties:
        id:
          description: Unique identifier of the enrollment
          readOnly: true
          type: integer
        student_id:
          description: The identifier of the associated student
          type: integer
        edition_id:
          description: The identifier of the associated edition
          type: integer
        personal_program_id:
          description: The identifier of the associated personal program
          type: integer
        label_ids:
          description: |
            An array of integers representing unique identifier values associated with labels.
          items:
            type: integer
          type: array
        order_id:
          description: The identifier of the associated order
          nullable: true
          type: integer
        state:
          description: The state of the enrollment
          enum:
          - confirmed
          - canceled
          type: string
        graduation_state:
          $ref: '#/components/schemas/GraduationState'
        graduation_date:
          description: The graduation date of the enrollment
          format: date
          nullable: true
          type: string
      required:
      - edition_id
      - graduation_date
      - graduation_state
      - id
      - label_ids
      - order_id
      - personal_program_id
      - state
      - student_id
      type: object
    ProgramEnrollmentWithIncludes:
      allOf:
      - $ref: '#/components/schemas/ProgramEnrollment'
      - additionalProperties: false
        properties:
          grade:
            $ref: '#/components/schemas/Grade'
        type: object
      example:
        graduation_date: 2000-01-23
        edition_id: 1
        graduation_state: awaiting_judgement
        label_ids:
        - 5
        - 5
        grade:
          result: result
          score: score
          updated_at: 2000-01-23T04:56:07.000+00:00
          gradeable_id: 7
          grade: grade
          gradeable_type: gradeable_type
          created_at: 2000-01-23T04:56:07.000+00:00
          comment: comment
          id: 5
          grader_id: 2
        student_id: 6
        id: 0
        state: confirmed
        order_id: 2
        personal_program_id: 5
    PersonalProgramElement:
      additionalProperties: false
      properties:
        id:
          description: Unique identifier of the personal program element.
          readOnly: true
          type: integer
        enrollment_id:
          description: The identifier of the associated enrollment.
          type: integer
        course_id:
          description: The identifier of the associated course.
          type: integer
        course_enrollment_id:
          description: The identifier of the associated course enrollment.
          nullable: true
          type: integer
        element_id:
          description: The identifier of the associated element.
          nullable: true
          type: integer
      required:
      - course_enrollment_id
      - course_id
      - element_id
      - enrollment_id
      - id
      type: object
    Program:
      additionalProperties: false
      properties:
        id:
          description: Unique identifier of the program.
          readOnly: true
          type: integer
        signup_url:
          description: URL to the signup page for this program.
          type: string
        name:
          description: Name of the program.
          type: string
        cost:
          description: The price to be paid for this program.
          nullable: true
          type: string
        cost_scheme:
          $ref: '#/components/schemas/CostScheme'
        is_published:
          description: Boolean representing the publishable status of the program.
          type: boolean
        category_id:
          description: Identifier of the category of the program.
          type: integer
        conditions:
          description: Conditions for this program.
          nullable: true
          type: string
        slug:
          description: "Human readable identifier, unique per educator."
          type: string
      required:
      - category_id
      - conditions
      - cost
      - cost_scheme
      - id
      - is_published
      - name
      - signup_url
      - slug
      type: object
    ProgramWithIncludes:
      allOf:
      - $ref: '#/components/schemas/Program'
      - additionalProperties: false
        type: object
      example:
        cost: cost
        category_id: 6
        is_published: true
        cost_scheme: free
        name: name
        id: 0
        signup_url: signup_url
        conditions: conditions
        slug: slug
    ProgramProgramPayload:
      additionalProperties: false
      example:
        cost: 6
        category_id: 0
        is_published: true
        label_ids:
        - 1
        - 1
        cost_scheme: student
        custom: "{}"
        name: name
        custom_associations:
        - custom_association_id: 6
          custom_record_ids:
          - 1
          - 1
        - custom_association_id: 6
          custom_record_ids:
          - 1
          - 1
        course_tab_contents_attributes:
        - content: content
          course_tab_id: 5
        - content: content
          course_tab_id: 5
      properties:
        name:
          description: Name of the program.
          type: string
        category_id:
          description: Identifier of the category of the program.
          type: integer
        cost_scheme:
          description: How should the program be paid by default.
          enum:
          - student
          - order
          - tbd
          - free
          type: string
        cost:
          description: The price to be paid for this program. Required if cost_scheme
            is student (default value) or order.
          nullable: true
          type: integer
        is_published:
          description: Boolean representing the publishable status of the program.
          type: boolean
        label_ids:
          description: IDs of the labels
          items:
            type: integer
          type: array
        custom:
          description: The custom properties of the program.
          properties: {}
          type: object
        custom_associations:
          description: |
            Custom associations are a way to link custom records to a program.

            ![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)
          items:
            $ref: '#/components/schemas/CustomAssociationsRecordsPayload'
          type: array
        course_tab_contents_attributes:
          items:
            $ref: '#/components/schemas/CoursePayload_course_tab_contents_attributes_inner'
          type: array
      required:
      - category_id
      - cost_scheme
      - name
      type: object
    ProgramProgramPatchPayload:
      additionalProperties: false
      example:
        cost: cost
        category_id: 0
        is_published: true
        label_ids:
        - 6
        - 6
        cost_scheme: student
        custom: "{}"
        name: name
        custom_associations:
        - custom_association_id: 6
          custom_record_ids:
          - 1
          - 1
        - custom_association_id: 6
          custom_record_ids:
          - 1
          - 1
        slug: slug
        course_tab_contents_attributes:
        - id: 1
          content: content
          course_tab_id: 5
        - id: 1
          content: content
          course_tab_id: 5
      properties:
        name:
          description: Name of the program.
          type: string
        cost:
          description: The price to be paid for this program.
          nullable: true
          type: string
        cost_scheme:
          description: How should the program be paid by default.
          enum:
          - student
          - order
          - tbd
          - free
          type: string
        is_published:
          description: Boolean representing the publishable status of the program.
          type: boolean
        category_id:
          description: Identifier of the category of the program.
          type: integer
        slug:
          description: "Human readable identifier, unique per educator."
          type: string
        label_ids:
          description: IDs of the labels
          items:
            type: integer
          type: array
        custom:
          description: The custom properties of the program.
          properties: {}
          type: object
        custom_associations:
          description: |
            The new set of custom records to be associated with the program.

            ![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)
          items:
            $ref: '#/components/schemas/CustomAssociationsRecordsPayload'
          type: array
        course_tab_contents_attributes:
          items:
            $ref: '#/components/schemas/ProgramProgramPatchPayload_course_tab_contents_attributes_inner'
          type: array
      type: object
    Referral:
      additionalProperties: false
      example:
        name: name
        id: 0
      properties:
        id:
          description: Unique identifier of the referral.
          readOnly: true
          type: integer
        name:
          description: Name of the referral.
          type: string
      required:
      - id
      - name
      type: object
    SignupQuestion:
      additionalProperties: false
      example:
        visibility:
        - visibility
        - visibility
        use_as_duplicate_indicator: true
        system_name: system_name
        title: title
        required: true
        for_type: user
        for_customer: true
        id: 0
        position: 6
        for_student: true
        choices:
        - choices
        - choices
        field_type: boolean
        slug: slug
      properties:
        id:
          description: Unique identifier of the question.
          readOnly: true
          type: integer
        position:
          description: Position of the question used for ordering.
          type: integer
        field_type:
          $ref: '#/components/schemas/SignupQuestionFieldType'
        title:
          description: The title and label of the question
          type: string
        slug:
          description: The slug of the question
          type: string
        required:
          description: Define if this question is required on the Signup page.
          type: boolean
        for_type:
          description: Define to what type of models this should be linked.
          enum:
          - user
          - teacher
          - account
          - catalog_product
          - order
          - catalog_variant
          type: string
        visibility:
          description: List of at what locations you want to show this field in the
            signup
          items:
            type: string
          type: array
        for_student:
          description: "DEPRECATED: boolean if the question is visible for students.\
            \ Please use the visibility attribute."
          type: boolean
        for_customer:
          description: "DEPRECATED: boolean if the question is visible for customers.\
            \ Please use the visibility attribute."
          type: boolean
        choices:
          description: Array of string with the choice options if the type of the
            field is select.
          items:
            type: string
          type: array
        system_name:
          description: The internal system name used for this field.
          nullable: true
          type: string
        use_as_duplicate_indicator:
          description: boolean if the question is use as duplicate indicator.
          type: boolean
      required:
      - choices
      - field_type
      - for_customer
      - for_student
      - for_type
      - id
      - position
      - required
      - slug
      - system_name
      - title
      - use_as_duplicate_indicator
      - visibility
      type: object
    Task:
      additionalProperties: false
      example:
        subject_id: 2
        assigned_by_id: 5
        subject_type: Course
        due_date: due_date
        description: description
        created_at: 2000-01-23T04:56:07.000+00:00
        completed_at: completed_at
        completed_by_id: 1
        starred: true
        updated_at: 2000-01-23T04:56:07.000+00:00
        creator_id: 6
        name: name
        id: 0
        assignee_id: 5
      properties:
        id:
          description: Unique identifier of the task.
          readOnly: true
          type: integer
        creator_id:
          description: Unique identifier of the user who created the task.
          type: integer
        completed_at:
          description: Timestamp of when the task was completed.
          nullable: true
          type: string
        completed_by_id:
          description: Unique identifier of the user who completed the task.
          nullable: true
          type: integer
        assigned_by_id:
          description: Unique identifier of the user who assigned the task.
          nullable: true
          type: integer
        name:
          description: The title of the task.
          type: string
        description:
          description: A string representing the description of the task.
          nullable: true
          type: string
        due_date:
          description: Date when the task must be completed.
          nullable: true
          type: string
        starred:
          description: Boolean if the task is starred.
          type: boolean
        assignee_id:
          description: Unique identifier of the assigned user for the task.
          nullable: true
          type: integer
        subject_type:
          description: Type of the subject.
          enum:
          - Course
          - Account
          - User
          - Lead
          - Invoice
          - PlannedCourse
          - Order
          - Program::Program
          - Program::Edition
          nullable: true
          type: string
        subject_id:
          description: Identifier of the subject.
          nullable: true
          type: integer
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - assigned_by_id
      - assignee_id
      - completed_at
      - completed_by_id
      - created_at
      - creator_id
      - description
      - due_date
      - id
      - name
      - starred
      - subject_id
      - subject_type
      - updated_at
      type: object
    TeacherRole:
      additionalProperties: false
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 0
      properties:
        id:
          description: Unique identifier of the teacher role.
          readOnly: true
          type: integer
        name:
          description: The name of the teacher role.
          type: string
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - created_at
      - id
      - name
      - updated_at
      type: object
    Teacher:
      additionalProperties: false
      properties:
        id:
          description: Unique identifier of the user.
          readOnly: true
          type: integer
        first_name:
          description: First name of the user.
          type: string
        middle_name:
          description: Middle name of the user.
          nullable: true
          type: string
        last_name:
          description: Last name of the user.
          type: string
        email:
          description: The e-mail of the user.
          format: email
          type: string
        label_ids:
          description: |
            An array of integers representing unique identifier values associated with labels.
          items:
            type: integer
          type: array
        active:
          description: Whether the teacher is currently active.
          type: boolean
        avatar_url:
          description: The relative url path to the avatar.
          type: string
        employee_number:
          description: The employee number of this user.
          nullable: true
          type: string
        note:
          description: Short note about the teacher.
          nullable: true
          type: string
        teacher_headline:
          description: Short description of the user.
          nullable: true
          type: string
        teacher_description:
          description: Long description of the user. (same as description)
          nullable: true
          type: string
        locale:
          $ref: '#/components/schemas/Locale'
        updated_at:
          description: Timestamp of last update.
          format: date-time
          readOnly: true
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          readOnly: true
          type: string
      required:
      - active
      - avatar_url
      - created_at
      - email
      - employee_number
      - first_name
      - id
      - label_ids
      - last_name
      - locale
      - middle_name
      - note
      - slug
      - teacher_description
      - teacher_enrollments_count
      - teacher_headline
      - updated_at
      type: object
    TeacherWithIncludes:
      allOf:
      - $ref: '#/components/schemas/Teacher'
      - additionalProperties: false
        properties:
          custom:
            $ref: '#/components/schemas/AccountWithIncludes_allOf_custom'
        type: object
      example:
        note: note
        label_ids:
        - 6
        - 6
        custom: {}
        last_name: last_name
        active: true
        created_at: 2000-01-23T04:56:07.000+00:00
        middle_name: middle_name
        locale: de
        avatar_url: avatar_url
        updated_at: 2000-01-23T04:56:07.000+00:00
        teacher_headline: teacher_headline
        employee_number: employee_number
        teacher_description: teacher_description
        id: 0
        first_name: first_name
        email: email
    Thesis:
      additionalProperties: false
      example:
        date: 2000-01-23
        file_url: https://openapi-generator.tech
        keywords:
        - keywords
        - keywords
        subtitle: subtitle
        confidentiality: "no"
        id: 0
        abstract: abstract
        title: title
        locale: english
        authors:
        - authors
        - authors
        supervisors:
        - supervisors
        - supervisors
      properties:
        id:
          description: Unique identifier of the thesis.
          readOnly: true
          type: integer
        title:
          description: The title of the thesis.
          nullable: true
          type: string
        subtitle:
          description: The subtitle of the thesis.
          nullable: true
          type: string
        keywords:
          description: The keywords of the thesis.
          items:
            type: string
          type: array
        abstract:
          description: The abstract of the thesis.
          nullable: true
          type: string
        authors:
          description: Array of authors of the thesis.
          items:
            type: string
          type: array
        date:
          description: Date of the program thesis.
          format: date
          nullable: true
          type: string
        supervisors:
          description: Array of supervisors of the thesis.
          items:
            type: string
          type: array
        confidentiality:
          description: Confidentiality level of the program thesis defaults to no.
          enum:
          - "no"
          - "yes"
          - on_request
          nullable: true
          type: string
        locale:
          description: Locale of the program thesis.
          enum:
          - english
          - dutch
          nullable: true
          type: string
        file_url:
          description: URL to the file of the thesis.
          format: uri
          nullable: true
          type: string
      required:
      - abstract
      - authors
      - confidentiality
      - date
      - file_url
      - id
      - keywords
      - locale
      - subtitle
      - supervisors
      - title
      type: object
    UserWithIncludes:
      allOf:
      - $ref: '#/components/schemas/User'
      - additionalProperties: false
        properties:
          address:
            $ref: '#/components/schemas/Address'
          custom:
            $ref: '#/components/schemas/AccountWithIncludes_allOf_custom'
        type: object
      example:
        address:
          country: AD
          address: address
          addressee: addressee
          address_line2: address_line2
          city: city
          state_province: AL
          postal_code: postal_code
        label_ids:
        - 6
        - 6
        roles:
        - admin
        - admin
        custom: {}
        last_name: last_name
        description: description
        created_at: 2000-01-23T04:56:07.000+00:00
        middle_name: middle_name
        locale: de
        notes_user: notes_user
        avatar_url: avatar_url
        student_number: student_number
        updated_at: 2000-01-23T04:56:07.000+00:00
        wants_newsletter: true
        teacher_headline: teacher_headline
        employee_number: employee_number
        teacher_description: teacher_description
        id: 0
        first_name: first_name
        email: email
    WebhookEvent:
      description: Webhook events on which you can subscribe
      enum:
      - account.created
      - account.deleted
      - account.updated
      - catalog_variant.created
      - catalog_variant.deleted
      - catalog_variant.updated
      - category.created
      - category.deleted
      - category.updated
      - course.created
      - course.deleted
      - course.updated
      - course_location.created
      - course_location.deleted
      - course_location.updated
      - course_variant.created
      - course_variant.deleted
      - course_variant.updated
      - custom_field_option.created
      - custom_field_option.deleted
      - custom_field_option.updated
      - custom_record.created
      - custom_record.deleted
      - custom_record.updated
      - educator.created
      - educator.deleted
      - educator.updated
      - enrollment.created
      - enrollment.deleted
      - enrollment.updated
      - invoice.created
      - invoice.deleted
      - invoice.updated
      - invoice_vat.created
      - invoice_vat.deleted
      - invoice_vat.updated
      - label.created
      - label.deleted
      - label.updated
      - lead.created
      - lead.deleted
      - lead.updated
      - meeting.created
      - meeting.deleted
      - meeting.teacher_attendees_changed
      - meeting.updated
      - meeting_location.created
      - meeting_location.deleted
      - meeting_location.updated
      - order.approved
      - order.canceled
      - order.created
      - order.deleted
      - order.denied
      - order.updated
      - payment.created
      - payment.deleted
      - payment.updated
      - planned_course.canceled
      - planned_course.created
      - planned_course.deleted
      - planned_course.teacher_attendees_changed
      - planned_course.updated
      - planning_event.created
      - planning_event.deleted
      - planning_event.teacher_attendees_changed
      - planning_event.updated
      - product.created
      - product.deleted
      - product.updated
      - program.created
      - program.deleted
      - program.updated
      - program_edition.created
      - program_edition.deleted
      - program_edition.updated
      - program_enrollment.cancel
      - program_enrollment.created
      - program_enrollment.graduation_revoked
      - program_enrollment.pass
      - program_enrollment.updated
      - teacher.created
      - teacher.deleted
      - teacher.updated
      - teacher_role.created
      - teacher_role.deleted
      - teacher_role.updated
      - user.created
      - user.deleted
      - user.merged
      - user.updated
      type: string
    Webhook:
      example:
        updated_at: updated_at
        created_at: created_at
        active: true
        id: id
        url: url
        events:
        - account.created
        - account.created
      properties:
        id:
          description: Unique identifier of the webhook.
          type: string
        created_at:
          description: Timestamp of creation.
          type: string
        updated_at:
          description: Timestamp of last update.
          type: string
        url:
          description: The callback url for Eduframe to send a HTTP POST payload to.
          type: string
        active:
          description: State of webhook.
          type: boolean
        events:
          description: Array of events.
          items:
            $ref: '#/components/schemas/WebhookEvent'
          type: array
      required:
      - created_at
      - id
      - updated_at
      type: object
    WebhookNotificationWithIncludes:
      example:
        event_id: event_id
        data: "{}"
        send_attempts:
        - status_code: 0
          response: response
          created_at: created_at
        - status_code: 0
          response: response
          created_at: created_at
        id: id
        status: pending
      properties:
        id:
          description: Unique identifier of the webhook notification.
          type: string
        event_id:
          description: Unique identifier of the linked event.
          type: string
        data:
          description: The content of the webhook.
          properties: {}
          type: object
        status:
          description: Status of the webhook notification.
          enum:
          - pending
          - retry
          - succeeded
          - failed
          type: string
        send_attempts:
          items:
            $ref: '#/components/schemas/WebhookNotificationWithIncludes_send_attempts_inner'
          type: array
      required:
      - data
      - event_id
      - id
      - send_attempts
      - status
      type: object
    WebhookNotificationFailed:
      example:
        event_id: event_id
        data: "{}"
        webhook_id: webhook_id
        created_at: 2000-01-23T04:56:07.000+00:00
        id: id
        status: failed
      properties:
        id:
          description: Unique identifier of the webhook notification.
          type: string
        event_id:
          description: Unique identifier of the linked event.
          type: string
        webhook_id:
          description: Unique identifier of the linked webhook.
          type: string
        data:
          description: The content of the webhook.
          properties: {}
          type: object
        status:
          description: Status of the webhook notification.
          enum:
          - failed
          type: string
        created_at:
          description: Timestamp of creation.
          format: date-time
          type: string
      required:
      - created_at
      - data
      - event_id
      - id
      - status
      - webhook_id
      type: object
    create_account_request_signup_answers_attributes_inner_value:
      anyOf:
      - nullable: true
        type: string
      - type: boolean
      - items:
          type: string
        type: array
      description: The formatted value of the answer.
    create_account_request_signup_answers_attributes_inner:
      properties:
        signup_question_id:
          description: Unique identifier of the question.
          type: integer
        value:
          $ref: '#/components/schemas/create_account_request_signup_answers_attributes_inner_value'
      required:
      - signup_question_id
      - value
      type: object
    create_account_request:
      properties:
        name:
          description: Arbitrary string representing the name of the account. Is autogenerated
            for personal accounts.
          type: string
        email:
          description: A string representing the billing e-mail of the account
          format: email
          nullable: true
          type: string
        phone:
          description: A string representing the phone number of the account
          nullable: true
          type: string
        label_ids:
          description: IDs of the labels
          items:
            type: integer
          type: array
        custom:
          description: The custom properties of the account.
          properties: {}
          type: object
        address_attributes:
          $ref: '#/components/schemas/AddressPayload'
        signup_answers_attributes:
          items:
            $ref: '#/components/schemas/create_account_request_signup_answers_attributes_inner'
          type: array
      required:
      - name
      type: object
    update_account_request:
      properties:
        name:
          description: Arbitrary string representing the name of the account. Is autogenerated
            for personal accounts.
          type: string
        email:
          description: A string representing the billing e-mail of the account
          format: email
          nullable: true
          type: string
        phone:
          description: A string representing the phone number of the account
          nullable: true
          type: string
        label_ids:
          description: IDs of the labels
          items:
            type: integer
          type: array
        custom:
          description: The custom properties of the account.
          properties: {}
          type: object
        address_attributes:
          $ref: '#/components/schemas/AddressPayload'
      required:
      - name
      type: object
    create_affiliation_request:
      properties:
        user_id:
          description: Unique identifier of the associated user
          type: integer
        account_id:
          description: Unique identifier of the associated account
          type: integer
        key_contact:
          default: false
          description: Boolean indicating if this user is a key contact of the account.
          type: boolean
      required:
      - account_id
      - user_id
      type: object
    update_affiliation_by_id_request:
      properties:
        key_contact:
          description: Boolean indicating if this user is a key contact of the account.
          type: boolean
        user_id:
          description: Unique identifier of the associated user
          type: integer
        account_id:
          description: Unique identifier of the associated account
          type: integer
      type: object
    set_attendance_request:
      properties:
        meeting_id:
          description: Unique identifier of the meeting.
          type: integer
        enrollment_id:
          description: Unique identifier of the enrollment.
          type: integer
        state:
          $ref: '#/components/schemas/AttendanceState'
        comment:
          description: Comment about this attendance.
          nullable: true
          type: string
      required:
      - enrollment_id
      - meeting_id
      type: object
    create_authentication_request:
      properties:
        uid:
          description: Login identifier.
          type: string
        user_id:
          description: Identifier of the associated User.
          type: integer
        authentication_provider_type:
          $ref: '#/components/schemas/AuthenticationProviderType'
      required:
      - authentication_provider_type
      - uid
      - user_id
      type: object
    update_catalog_product_by_id_request_course_tab_contents_attributes_inner:
      properties:
        id:
          description: Unique identifier of the course tab content.
          type: integer
        content:
          description: The HTML content of the course tab.
          nullable: true
          type: string
        course_tab_id:
          description: Unique identifier of the course tab.
          type: integer
      required:
      - content
      - course_tab_id
      - id
      type: object
    update_catalog_product_by_id_request:
      properties:
        category_id:
          description: Identifier of the category of the course.
          type: integer
        is_published:
          description: Boolean showing if the product is published or not.
          type: boolean
        custom:
          description: The custom properties of the product.
          properties: {}
          type: object
        course_tab_contents_attributes:
          items:
            $ref: '#/components/schemas/update_catalog_product_by_id_request_course_tab_contents_attributes_inner'
          type: array
      type: object
    update_catalog_variant_by_id_request:
      properties:
        is_published:
          description: Boolean showing if the variant is published or not.
          type: boolean
      required:
      - is_published
      type: object
    create_category_request:
      properties:
        name:
          description: Title of the category.
          type: string
        description:
          description: The description of the category.
          nullable: true
          type: string
        is_published:
          description: Boolean if the category is published on the website.
          type: boolean
        meta_title:
          description: "The meta title of the category, used for SEO (Search Engine\
            \ Optimisation) purposes."
          nullable: true
          type: string
        meta_description:
          description: "The meta description of the category, used for SEO (Search\
            \ Engine Optimisation) purposes."
          nullable: true
          type: string
        parent_id:
          description: Unique identifier of the parent category
          nullable: true
          type: integer
      required:
      - name
      type: object
    update_category_by_id_request:
      properties:
        name:
          description: Title of the category.
          type: string
        slug:
          description: Friendly identifier of a category.
          type: string
        description:
          description: The description of the category.
          nullable: true
          type: string
        is_published:
          description: Boolean if the category is published on the website.
          type: boolean
        meta_title:
          description: "The meta title of the category, used for SEO (Search Engine\
            \ Optimisation) purposes."
          nullable: true
          type: string
        meta_description:
          description: "The meta description of the category, used for SEO (Search\
            \ Engine Optimisation) purposes."
          nullable: true
          type: string
        parent_id:
          description: Unique identifier of the parent category
          nullable: true
          type: integer
      type: object
    create_comment_request:
      properties:
        content:
          description: A string representing the content of a comment.
          type: string
        commentable_id:
          description: Identifier of the subject the comment is linked to.
          type: integer
        commentable_type:
          $ref: '#/components/schemas/CommentType'
      required:
      - commentable_id
      - commentable_type
      - content
      type: object
    update_comment_by_id_request:
      properties:
        content:
          description: A string representing the content of a comment.
          type: string
      type: object
    create_course_location_request:
      properties:
        name:
          description: Name of the location where the course is held.
          type: string
        address_attributes:
          $ref: '#/components/schemas/AddressPayload'
      required:
      - name
      type: object
    update_course_location_by_id_request:
      properties:
        name:
          description: Name of the location where the course is held.
          type: string
        address_attributes:
          $ref: '#/components/schemas/AddressPatchPayload'
      type: object
    create_course_variant_request:
      properties:
        name:
          description: The name of the course variant.
          type: string
      required:
      - name
      type: object
    update_enrollment_by_id_request:
      properties:
        end_date:
          description: "If it is an enrollment of a fixed course, it equals the end\
            \ date. For a flexible course, it returns the enrollment specific end\
            \ date."
          nullable: true
          type: string
      type: object
    create_grade_request:
      properties:
        grade:
          description: The grade awarded (at least one of grade and score is required)
          nullable: true
          type: string
        score:
          description: The score awarded (at least one of grade and score is required)
          nullable: true
          type: number
        gradeable_id:
          description: Unique model identifier of the gradeable (enrollment / ...)
          type: integer
        gradeable_type:
          description: Model type of the gradeable (enrollment / ...)
          type: string
        comment:
          description: Additional comment about the grade
          nullable: true
          type: string
      required:
      - grade
      - gradeable_id
      - gradeable_type
      - score
      type: object
    update_grade_by_id_request:
      properties:
        grade:
          description: The grade awarded (at least one of grade and score is required)
          nullable: true
          type: string
        score:
          description: The score awarded (at least one of grade and score is required)
          nullable: true
          type: number
        gradeable_id:
          description: Unique model identifier of the gradeable (enrollment / ...)
          type: integer
        gradeable_type:
          description: Model type of the gradeable (enrollment / ...)
          type: string
        comment:
          description: Additional comment about the grade
          nullable: true
          type: string
        enrollment_id:
          description: Unique identifier of the enrollment
          type: integer
      type: object
    create_invoice_vat_request:
      properties:
        name:
          description: Name of the invoice vat.
          type: string
        percentage:
          description: Number representing the VAT percentage.
          type: string
      required:
      - name
      - percentage
      type: object
    create_invoice_request_invoice_items_attributes_inner:
      properties:
        catalog_variant_id:
          description: Unique identifier of the catalog variant.
          nullable: true
          type: integer
        units:
          description: Integer representing the number of units of the invoice item.
          type: number
        unit_price:
          description: Decimal representing the price of an unit.
          type: string
        name:
          description: The name of the invoice item.
          type: string
        invoice_vat_id:
          description: Identifier of the invoice vat.
          type: integer
        _destroy:
          description: Set if you want to delete this item.
          type: boolean
      required:
      - name
      - unit_price
      - units
      type: object
    create_invoice_request:
      properties:
        account_id:
          description: Identifier of the account.
          type: integer
        feature:
          description: Some description of the invoice which is displayed on the invoice.
          nullable: true
          type: string
        footnote:
          description: The note displayed at the bottom of the invoice.
          nullable: true
          type: string
        invoice_items_attributes:
          items:
            $ref: '#/components/schemas/create_invoice_request_invoice_items_attributes_inner'
          type: array
      required:
      - account_id
      type: object
    create_invoice_payment_by_invoice_id_request:
      properties:
        amount:
          description: A number representing the total amount of the invoice.
          type: string
        currency:
          description: The currency used for the payment.
          enum:
          - EUR
          - ISK
          - USD
          - GBP
          type: string
        date:
          description: Date on which the payment was created.
          type: string
        payment_method_id:
          description: Identifier of the payment method.
          type: integer
      required:
      - amount
      type: object
    create_label_request:
      properties:
        name:
          description: The name of the label
          type: string
        color:
          description: Hex code of the color of the label
          type: string
        model_type:
          description: The model type for which this label is made available
          enum:
          - Lead
          - Order
          - Catalog::Product
          - User
          - Account
          - Teacher
          type: string
      required:
      - model_type
      - name
      type: object
    update_label_by_id_request:
      properties:
        name:
          description: The name of the label
          type: string
        color:
          description: Hex code of the color of the label
          type: string
        model_type:
          description: The model type for which this label is made available
          enum:
          - Lead
          - Order
          - Catalog::Product
          - User
          - Account
          - Teacher
          type: string
      type: object
    create_lead_request_lead_products_inner:
      properties:
        catalog_product_id:
          description: ID of the catalog product
          type: integer
        catalog_variant_id:
          description: ID of the catalog variant
          nullable: true
          type: integer
      required:
      - catalog_product_id
      type: object
    create_lead_request:
      properties:
        title:
          description: Title of the lead
          type: string
        account_id:
          description: ID of the account linked to this lead
          nullable: true
          type: integer
        user_id:
          description: ID of the user linked to this lead
          nullable: true
          type: integer
        value:
          description: Decimal representing the price of a lead
          nullable: true
          type: string
        company_name:
          description: Name of the company where this lead comes from
          nullable: true
          type: string
        first_name:
          description: The first name of the lead
          nullable: true
          type: string
        middle_name:
          description: The middle name of the lead
          nullable: true
          type: string
        last_name:
          description: The last name of the lead
          nullable: true
          type: string
        administrator_id:
          description: ID of administrator that owns the lead
          nullable: true
          type: integer
        email:
          description: The email of the lead
          nullable: true
          type: string
        phone:
          description: |
            The phone number of the lead
            **Note** : Use an international phone format unless the phone number is
            from the educator configured country.
          nullable: true
          type: string
        status:
          description: The status of the lead
          enum:
          - prospect
          - waiting_list
          - won
          - lost
          - archive
          type: string
        quality:
          description: Star scoring for the lead
          nullable: true
          type: number
        wants_newsletter:
          description: Indicates if lead wants to receive the newsletter or not
          type: boolean
        comment:
          description: Comment for a lead
          nullable: true
          type: string
        label_ids:
          description: IDs of the labels
          items:
            type: integer
          type: array
        address_attributes:
          $ref: '#/components/schemas/AddressPayload'
        lead_products:
          description: |
            Array of products and variants the lead is interested in.
          items:
            $ref: '#/components/schemas/create_lead_request_lead_products_inner'
          type: array
      type: object
    create_material_group_request:
      properties:
        name:
          description: Name of the material group where the course is held.
          type: string
      required:
      - name
      type: object
    update_material_group_by_id_request:
      properties:
        name:
          description: Name of the material group where the course is held.
          type: string
      type: object
    create_material_request:
      properties:
        name:
          description: Name of the material.
          type: string
        use_type:
          description: Type of material.
          enum:
          - reservable
          - consumable
          type: string
        material_group_id:
          description: Unique identifier of the material group.
          type: integer
      required:
      - material_group_id
      - name
      type: object
    update_material_by_id_request:
      properties:
        name:
          description: Name of the material.
          type: string
        material_group_id:
          description: Unique identifier of the material group.
          type: integer
      type: object
    create_meeting_location_request:
      properties:
        name:
          description: Name of the meeting location.
          type: string
        course_location_id:
          description: Unique identifier of the course location.
          type: integer
        capacity:
          description: Capacity of the meeting location
          nullable: true
          type: integer
        address_attributes:
          $ref: '#/components/schemas/AddressPayload'
      required:
      - course_location_id
      - name
      type: object
    update_meeting_location_by_id_request:
      properties:
        name:
          description: Name of the meeting location.
          type: string
        course_location_id:
          description: Unique identifier of the course location.
          type: integer
        capacity:
          description: Capacity of the meeting location
          nullable: true
          type: number
        address_attributes:
          $ref: '#/components/schemas/AddressPatchPayload'
      type: object
    create_order_request:
      properties:
        cost:
          description: Decimal representing the value of the order
          nullable: true
          type: string
        cost_scheme:
          description: The cost schema that the payment will follow for the specified
            order.
          enum:
          - student
          - order
          - tbd
          - free
          type: string
        catalog_variant_id:
          description: Unique identifier of the orders CatalogVariant.
          type: integer
        creator_id:
          description: Unique identifier of the orders Creator (User).
          type: integer
        account_id:
          description: |
            The unique identifier associated with the orders Account. If not provided, the system will default to using the personal account.
          type: integer
        planned_course_id:
          description: |
            *DEPRECATED*: Use catalog_variant_id instead.
            Unique identifier of the order's planned course.
          type: integer
        payment_method_id:
          description: Unique identifier of the orders PaymentMethod.
          type: integer
        student_ids:
          description: Array of student ids. A non-empty array is required if there
            are no student ids specified in the enrollments_attributes.
          items:
            type: integer
          type: array
        payment_option_id:
          description: Unique identifier of the orders PaymentOption.
          type: integer
        custom:
          description: The custom properties of the order.
          properties: {}
          type: object
        approve:
          description: "Optional: If the order should be approved or not. When omitted\
            \ will default to false"
          type: boolean
        label_ids:
          description: "Optional: Assign labels to the order."
          items:
            type: integer
          type: array
        referral_id:
          description: "Optional: Identifier of the referral."
          type: integer
      required:
      - catalog_variant_id
      - creator_id
      type: object
    add_label_to_order_request:
      properties:
        label_id:
          description: Unique identifier of the label.
          type: integer
      required:
      - label_id
      type: object
    create_teacher_enrollment_by_planned_course_id_request:
      properties:
        teacher_id:
          description: Unique identifier of the teacher.
          type: integer
        teacher_role_id:
          description: Unique identifier of the teacher role.
          type: integer
      required:
      - teacher_id
      type: object
    create_program_element_request:
      properties:
        course_id:
          description: The identifier of the associated course.
          type: integer
        edition_id:
          description: The identifier of the associated course.
          type: integer
        planned_course_id:
          description: The identifier of the associated course.
          nullable: true
          type: integer
      required:
      - course_id
      - edition_id
      type: object
    update_program_element_by_id_request:
      properties:
        edition_id:
          description: The identifier of the associated course.
          type: integer
        planned_course_id:
          description: The identifier of the associated course.
          nullable: true
          type: integer
      type: object
    award_certificate_to_program_enrollment_by_id_request:
      properties:
        certificate_template_id:
          description: Id of the certificate template to use for the certificate
          type: integer
      required:
      - certificate_template_id
      type: object
    create_task_request:
      properties:
        name:
          description: The title of the task.
          type: string
        description:
          description: A string representing the description of the task.
          nullable: true
          type: string
        due_date:
          description: Date when the task must be completed.
          nullable: true
          type: string
        starred:
          description: Boolean if the task is starred.
          type: boolean
        assignee_id:
          description: Unique identifier of the assigned user for the task.
          nullable: true
          type: integer
        subject_type:
          description: Type of the subject.
          enum:
          - Course
          - Account
          - User
          - Lead
          - Invoice
          - PlannedCourse
          - Order
          - Program::Program
          - Program::Edition
          nullable: true
          type: string
        subject_id:
          description: Identifier of the subject.
          nullable: true
          type: integer
        completed:
          description: Boolean representing the status of the task. The default value
            is false.
          type: boolean
      required:
      - name
      type: object
    update_task_by_id_request:
      properties:
        name:
          description: The title of the task.
          type: string
        description:
          description: A string representing the description of the task.
          nullable: true
          type: string
        due_date:
          description: Date when the task must be completed.
          nullable: true
          type: string
        starred:
          description: Boolean if the task is starred.
          type: boolean
        assignee_id:
          description: Unique identifier of the assigned user for the task.
          nullable: true
          type: integer
        subject_type:
          description: Type of the subject.
          enum:
          - Course
          - Account
          - User
          - Lead
          - Invoice
          - PlannedCourse
          - Order
          - Program::Program
          - Program::Edition
          nullable: true
          type: string
        subject_id:
          description: Identifier of the subject.
          nullable: true
          type: integer
        completed:
          description: Boolean representing the status of the task. The default value
            is false.
          type: boolean
      type: object
    create_teacher_enrollment_request:
      properties:
        planned_course_id:
          description: Unique identifier of the planned course.
          type: integer
        teacher_id:
          description: Unique identifier of the teacher.
          type: integer
        teacher_role_id:
          description: |
            Unique identifier of the teacher role.

            ![Teacher Roles](https://img.shields.io/badge/Feature-Teacher_Roles-blue)
          type: integer
      required:
      - planned_course_id
      - teacher_id
      type: object
    update_teacher_enrollment_by_id_request:
      properties:
        planned_course_id:
          description: Unique identifier of the planned course.
          type: integer
        teacher_id:
          description: Unique identifier of the teacher.
          type: integer
        teacher_role_id:
          description: |
            Unique identifier of the teacher role.

            ![Teacher Roles](https://img.shields.io/badge/Feature-Teacher_Roles-blue)
          type: integer
      type: object
    create_teacher_role_request:
      properties:
        name:
          description: The name of the teacher role.
          type: string
      required:
      - name
      type: object
    create_teacher_request:
      properties:
        user_id:
          description: The id of the user to make a teacher
          type: integer
    create_teacher_201_response:
      example:
        result: Success
        location: https://openapi-generator.tech
      properties:
        result:
          description: The result of the operation.
          enum:
          - Success
          type: string
        location:
          description: The URI of the created resource.
          format: uri
          type: string
      required:
      - location
      type: object
    create_user_request:
      properties:
        first_name:
          description: First name of the user.
          type: string
        middle_name:
          description: Middle name of the user.
          nullable: true
          type: string
        last_name:
          description: Last name of the user.
          type: string
        email:
          description: The e-mail of the user.
          type: string
        locale:
          $ref: '#/components/schemas/Locale'
        wants_newsletter:
          description: Boolean representing the possibility of the user to receive
            newsletters.
          type: boolean
        with_authentication:
          description: If the user should be able to login and thus receive login
            details by mail. Only relevant when creating the user.
          type: boolean
        custom:
          description: The custom properties of the user.
          properties: {}
          type: object
        address_attributes:
          $ref: '#/components/schemas/AddressPayload'
        invoice_address_attributes:
          $ref: '#/components/schemas/AddressPayload'
        label_ids:
          description: |
            An array containing the identifiers of the labels associated with the user. When updating this array, the existing labels are replaced with the new ones provided.
          items:
            type: integer
          type: array
      required:
      - email
      - first_name
      - last_name
      type: object
    update_user_by_id_request:
      properties:
        first_name:
          description: First name of the user.
          type: string
        middle_name:
          description: Middle name of the user.
          nullable: true
          type: string
        last_name:
          description: Last name of the user.
          type: string
        email:
          description: The e-mail of the user.
          type: string
        locale:
          $ref: '#/components/schemas/Locale'
        wants_newsletter:
          description: Boolean representing the possibility of the user to receive
            newsletters.
          type: boolean
        with_authentication:
          description: If the user should be able to login and thus receive login
            details by mail. Only relevant when creating the user.
          type: boolean
        custom:
          description: The custom properties of the user.
          properties: {}
          type: object
        address_attributes:
          $ref: '#/components/schemas/AddressPatchPayload'
        invoice_address_attributes:
          $ref: '#/components/schemas/AddressPatchPayload'
        label_ids:
          description: IDs of the labels
          items:
            type: integer
          type: array
      type: object
    create_webhook_request:
      properties:
        url:
          description: The callback url for Eduframe to send a HTTP POST payload to.
          format: uri
          type: string
        active:
          description: State of webhook.
          type: boolean
        events:
          description: Array of events.
          items:
            $ref: '#/components/schemas/WebhookEvent'
          type: array
      required:
      - url
      type: object
    update_webhook_by_id_request:
      properties:
        url:
          description: The callback url for Eduframe to send a HTTP POST payload to.
          type: string
        active:
          description: State of webhook.
          type: boolean
        events:
          description: Array of events.
          items:
            $ref: '#/components/schemas/WebhookEvent'
          type: array
      type: object
    AccountWithIncludes_allOf_custom:
      description: The custom properties of the user.
      example: {}
      properties: {}
      type: object
    ProductWithIncludes_allOf_custom:
      description: The custom properties of the product.
      example: {}
      properties: {}
      type: object
    CourseWithIncludes_allOf_custom:
      description: The custom properties of the program.
      example: "{\"custom_field1\":\"value\",\"custom_field2\":\"value\"}"
      properties: {}
      type: object
    CoursePayload_course_tab_contents_attributes_inner:
      example:
        content: content
        course_tab_id: 5
      properties:
        content:
          description: The HTML content of the course tab.
          nullable: true
          type: string
        course_tab_id:
          description: Unique identifier of the course tab.
          type: integer
      required:
      - content
      - course_tab_id
      type: object
    CoursePatchPayload_course_tab_contents_attributes_inner:
      example:
        id: 6
        content: content
        course_tab_id: 1
      properties:
        id:
          description: Unique identifier of the course tab content.
          type: integer
        content:
          description: The HTML content of the course tab.
          nullable: true
          type: string
        course_tab_id:
          description: Unique identifier of the course tab.
          type: integer
      type: object
    InvoiceWithIncludes_allOf_invoice_items:
      allOf:
      - $ref: '#/components/schemas/InvoiceItem'
      - additionalProperties: false
        type: object
      example:
        updated_at: 2000-01-23T04:56:07.000+00:00
        invoice_vat_id: 9
        name: name
        catalog_variant_id: 3
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 2
        units: 7
        unit_price: unit_price
    OrderWithIncludes_allOf_custom:
      description: The custom properties of the order.
      example: {}
      properties: {}
      type: object
    ProgramProgramPatchPayload_course_tab_contents_attributes_inner:
      example:
        id: 1
        content: content
        course_tab_id: 5
      properties:
        id:
          description: Unique identifier of the course tab content.
          type: integer
        content:
          description: The HTML content of the course tab.
          nullable: true
          type: string
        course_tab_id:
          description: Unique identifier of the course tab.
          type: integer
      required:
      - id
      type: object
    WebhookNotificationWithIncludes_send_attempts_inner:
      example:
        status_code: 0
        response: response
        created_at: created_at
      properties:
        response:
          description: The response body of the send attempt.
          type: string
        status_code:
          description: The response status code of the send attempt.
          type: integer
        created_at:
          description: Timestamp of the send attempt.
          type: string
      required:
      - created_at
      - response
      - status_code
      type: object
  securitySchemes:
    Bearer:
      in: header
      name: Authorization
      type: apiKey
