{
  "openapi": "3.0.3",
  "info": {
    "title": "Eduframe - API",
    "description": null,
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://api.eduframe.nl/api/v1"
    }
  ],
  "security": [
    {
      "Bearer": []
    }
  ],
  "tags": [
    {
      "name": "accounts",
      "description": ""
    },
    {
      "name": "affiliations",
      "description": ""
    },
    {
      "name": "attendances",
      "description": ""
    },
    {
      "name": "authentications",
      "description": ""
    },
    {
      "name": "catalog-products",
      "description": ""
    },
    {
      "name": "catalog-variants",
      "description": ""
    },
    {
      "name": "categories",
      "description": ""
    },
    {
      "name": "comments",
      "description": ""
    },
    {
      "name": "course_locations",
      "description": ""
    },
    {
      "name": "course_tabs",
      "description": ""
    },
    {
      "name": "course_variants",
      "description": ""
    },
    {
      "name": "courses",
      "description": ""
    },
    {
      "name": "credit_categories",
      "description": ""
    },
    {
      "name": "credits",
      "description": ""
    },
    {
      "name": "custom_associations",
      "description": ""
    },
    {
      "name": "custom_field_options",
      "description": ""
    },
    {
      "name": "custom_objects",
      "description": ""
    },
    {
      "name": "custom_records",
      "description": ""
    },
    {
      "name": "discount_codes",
      "description": ""
    },
    {
      "name": "educators",
      "description": ""
    },
    {
      "name": "enrollments",
      "description": ""
    },
    {
      "name": "grades",
      "description": ""
    },
    {
      "name": "invoice_vats",
      "description": ""
    },
    {
      "name": "invoices",
      "description": ""
    },
    {
      "name": "labels",
      "description": ""
    },
    {
      "name": "leads",
      "description": ""
    },
    {
      "name": "material_groups",
      "description": ""
    },
    {
      "name": "materials",
      "description": ""
    },
    {
      "name": "meeting_locations",
      "description": ""
    },
    {
      "name": "meetings",
      "description": ""
    },
    {
      "name": "orders",
      "description": ""
    },
    {
      "name": "payment_methods",
      "description": ""
    },
    {
      "name": "payment_options",
      "description": ""
    },
    {
      "name": "payments",
      "description": ""
    },
    {
      "name": "planned_courses",
      "description": ""
    },
    {
      "name": "planning-conflicts",
      "description": ""
    },
    {
      "name": "planning-events",
      "description": ""
    },
    {
      "name": "planning-locations",
      "description": ""
    },
    {
      "name": "planning-materials",
      "description": ""
    },
    {
      "name": "planning-teachers",
      "description": ""
    },
    {
      "name": "program-blocks",
      "description": ""
    },
    {
      "name": "program-editions",
      "description": ""
    },
    {
      "name": "program-elements",
      "description": ""
    },
    {
      "name": "program-enrollments",
      "description": ""
    },
    {
      "name": "program-personal-program-elements",
      "description": ""
    },
    {
      "name": "program-programs",
      "description": ""
    },
    {
      "name": "referrals",
      "description": ""
    },
    {
      "name": "signup_questions",
      "description": ""
    },
    {
      "name": "tasks",
      "description": ""
    },
    {
      "name": "teacher_enrollments",
      "description": ""
    },
    {
      "name": "teacher_roles",
      "description": ""
    },
    {
      "name": "teachers",
      "description": ""
    },
    {
      "name": "theses",
      "description": ""
    },
    {
      "name": "users",
      "description": ""
    },
    {
      "name": "webhook-notifications",
      "description": ""
    },
    {
      "name": "webhooks",
      "description": "\n<h4 id=\"label-Setup\">Setup<span><a href=\"#label-Setup\">&para;</a> <a href=\"#top\">&uarr;</a></span></h4>\n\n<p>To setup a webhook, you can create one through the API or go to the admin setting to use the UI.</p>\n\n<h4 id=\"label-Webhook+Return+Payload\">Webhook Return Payload<span><a href=\"#label-Webhook+Return+Payload\">&para;</a> <a href=\"#top\">&uarr;</a></span></h4>\n\n<p>An example payload for approving an order would look something like this:</p>\n\n<pre>{\n  &quot;tenant_id&quot;: &quot;uuid&quot;                 // UUID of the tenant\n  &quot;educator&quot;: &quot;some-subdomain&quot;,       // Subdomain of the educator\n  &quot;event&quot;: &quot;account.updated&quot;          // Event that triggered the webhook\n  &quot;event_data&quot;: &quot;Account&quot;,            // Event-specific data\n}</pre>\n\n<p>The Open API format of these payloads:</p>\n\n<pre class=\"ruby\">{\n  <span class=\"ruby-value\">&quot;tenant_id&quot;:</span> {\n    <span class=\"ruby-value\">&quot;type&quot;:</span> <span class=\"ruby-string\">&quot;string&quot;</span>\n  },\n  <span class=\"ruby-value\">&quot;educator&quot;:</span> {\n    <span class=\"ruby-value\">&quot;type&quot;:</span> <span class=\"ruby-string\">&quot;string&quot;</span>\n  },\n  <span class=\"ruby-value\">&quot;event&quot;:</span> {\n    <span class=\"ruby-value\">&quot;type&quot;:</span> <span class=\"ruby-string\">&quot;string&quot;</span>\n  },\n  <span class=\"ruby-value\">&quot;event_data&quot;:</span> {\n    <span class=\"ruby-value\">&quot;type&quot;:</span> <span class=\"ruby-string\">&quot;object&quot;</span>\n  }\n}\n</pre>\n"
    }
  ],
  "paths": {
    "/accounts": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Get all accounts",
        "operationId": "get_accounts",
        "security": [
          {
            "Bearer": [
              "relations:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Filter results on search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key_contact_user_id",
            "in": "query",
            "description": "Filter results on key_contact_user_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter results on user_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "account_type",
            "in": "query",
            "description": "Filter results on account_type",
            "schema": {
              "$ref": "#/components/schemas/AccountType"
            }
          },
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountWithIncludes"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Create an account",
        "operationId": "create_account",
        "security": [
          {
            "Bearer": [
              "relations:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Arbitrary string representing the name of the account. Is autogenerated for personal accounts."
                  },
                  "email": {
                    "type": "string",
                    "nullable": true,
                    "format": "email",
                    "description": "A string representing the billing e-mail of the account"
                  },
                  "phone": {
                    "type": "string",
                    "description": "A string representing the phone number of the account",
                    "nullable": true
                  },
                  "label_ids": {
                    "type": "array",
                    "description": "IDs of the labels",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "custom": {
                    "type": "object",
                    "properties": {},
                    "description": "The custom properties of the account."
                  },
                  "address_attributes": {
                    "$ref": "#/components/schemas/AddressPayload"
                  },
                  "signup_answers_attributes": {
                    "type": "array",
                    "items": {
                      "required": [
                        "signup_question_id",
                        "value"
                      ],
                      "type": "object",
                      "properties": {
                        "signup_question_id": {
                          "type": "integer",
                          "description": "Unique identifier of the question."
                        },
                        "value": {
                          "anyOf": [
                            {
                              "type": "string",
                              "nullable": true
                            },
                            {
                              "type": "boolean"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          ],
                          "description": "The formatted value of the answer."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/accounts/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Get a single account",
        "operationId": "get_account_by_id",
        "security": [
          {
            "Bearer": [
              "relations:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "accounts"
        ],
        "summary": "Update an account",
        "operationId": "update_account",
        "security": [
          {
            "Bearer": [
              "relations:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Arbitrary string representing the name of the account. Is autogenerated for personal accounts."
                  },
                  "email": {
                    "type": "string",
                    "nullable": true,
                    "format": "email",
                    "description": "A string representing the billing e-mail of the account"
                  },
                  "phone": {
                    "type": "string",
                    "description": "A string representing the phone number of the account",
                    "nullable": true
                  },
                  "label_ids": {
                    "type": "array",
                    "description": "IDs of the labels",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "custom": {
                    "type": "object",
                    "properties": {},
                    "description": "The custom properties of the account."
                  },
                  "address_attributes": {
                    "$ref": "#/components/schemas/AddressPayload"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/affiliations": {
      "get": {
        "tags": [
          "affiliations"
        ],
        "summary": "Get all affiliations",
        "operationId": "get_affiliations",
        "security": [
          {
            "Bearer": [
              "relations:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter results on user_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "description": "Filter results on account_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Affiliation"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "affiliations"
        ],
        "summary": "Create an affiliation affiliations",
        "operationId": "create_affiliation",
        "security": [
          {
            "Bearer": [
              "relations:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "account_id",
                  "user_id"
                ],
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "integer",
                    "description": "Unique identifier of the associated user"
                  },
                  "account_id": {
                    "type": "integer",
                    "description": "Unique identifier of the associated account"
                  },
                  "key_contact": {
                    "type": "boolean",
                    "default": false,
                    "description": "Boolean indicating if this user is a key contact of the account."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Affiliation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/affiliations/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "delete": {
        "tags": [
          "affiliations"
        ],
        "summary": "Delete an affiliation",
        "operationId": "delete_affiliation_by_id",
        "security": [
          {
            "Bearer": [
              "relations:destroy"
            ]
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "affiliations"
        ],
        "summary": "Update an affiliation.",
        "operationId": "update_affiliation_by_id",
        "security": [
          {
            "Bearer": [
              "relations:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key_contact": {
                    "type": "boolean",
                    "description": "Boolean indicating if this user is a key contact of the account."
                  },
                  "user_id": {
                    "type": "integer",
                    "description": "Unique identifier of the associated user"
                  },
                  "account_id": {
                    "type": "integer",
                    "description": "Unique identifier of the associated account"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Affiliation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/attendances": {
      "get": {
        "tags": [
          "attendances"
        ],
        "summary": "Get all attendance records",
        "operationId": "get_attendances",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "meeting_id",
            "in": "query",
            "description": "Filter attendances on meeting_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Attendance"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/attendances/upsert": {
      "post": {
        "tags": [
          "attendances"
        ],
        "summary": "Set an attendance.",
        "operationId": "set_attendance",
        "security": [
          {
            "Bearer": [
              "courses:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "meeting_id",
                  "enrollment_id"
                ],
                "properties": {
                  "meeting_id": {
                    "type": "integer",
                    "description": "Unique identifier of the meeting."
                  },
                  "enrollment_id": {
                    "type": "integer",
                    "description": "Unique identifier of the enrollment."
                  },
                  "state": {
                    "$ref": "#/components/schemas/AttendanceState"
                  },
                  "comment": {
                    "type": "string",
                    "nullable": true,
                    "description": "Comment about this attendance."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attendance"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/authentications": {
      "post": {
        "tags": [
          "authentications"
        ],
        "summary": "Create an authentication.",
        "operationId": "create_authentication",
        "security": [
          {
            "Bearer": [
              "authentications:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "uid",
                  "user_id",
                  "authentication_provider_type"
                ],
                "type": "object",
                "properties": {
                  "uid": {
                    "type": "string",
                    "description": "Login identifier."
                  },
                  "user_id": {
                    "type": "integer",
                    "description": "Identifier of the associated User."
                  },
                  "authentication_provider_type": {
                    "$ref": "#/components/schemas/AuthenticationProviderType"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Authentication"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/products": {
      "get": {
        "tags": [
          "catalog-products"
        ],
        "summary": "Get all catalog products",
        "operationId": "get_catalog_products",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "published",
            "in": "query",
            "description": "Show only published products",
            "schema": {
              "type": "string",
              "enum": [
                "published"
              ]
            }
          },
          {
            "name": "category_id",
            "in": "query",
            "description": "Filter results on category_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "productable_type",
            "in": "query",
            "description": "Filter results on productable_type",
            "schema": {
              "type": "string",
              "enum": [
                "Course",
                "Program::Program"
              ]
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Filter results on search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the results. Can change order by using `<sort_by>:<direction>` where `<direction>` is either `asc` or `desc`",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id:asc",
                  "id:desc",
                  "position:asc",
                  "position:desc"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductWithIncludes"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/products/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "catalog-products"
        ],
        "summary": "Get a catalog product record",
        "operationId": "get_catalog_product_by_id",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "catalog-products"
        ],
        "summary": "Update a catalog product",
        "operationId": "update_catalog_product_by_id",
        "security": [
          {
            "Bearer": [
              "courses:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "category_id": {
                    "type": "integer",
                    "description": "Identifier of the category of the course."
                  },
                  "is_published": {
                    "type": "boolean",
                    "description": "Boolean showing if the product is published or not."
                  },
                  "custom": {
                    "type": "object",
                    "properties": {},
                    "description": "The custom properties of the product."
                  },
                  "course_tab_contents_attributes": {
                    "type": "array",
                    "items": {
                      "required": [
                        "content",
                        "course_tab_id",
                        "id"
                      ],
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Unique identifier of the course tab content."
                        },
                        "content": {
                          "type": "string",
                          "description": "The HTML content of the course tab.",
                          "nullable": true
                        },
                        "course_tab_id": {
                          "type": "integer",
                          "description": "Unique identifier of the course tab."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/variants": {
      "get": {
        "tags": [
          "catalog-variants"
        ],
        "summary": "Get all catalog variants",
        "operationId": "get_catalog_variants",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "published_public",
            "in": "query",
            "description": "Only show published variants and planned_courses that are either planned or in progress",
            "schema": {
              "type": "string",
              "enum": [
                "published_public"
              ]
            }
          },
          {
            "name": "product_id",
            "in": "query",
            "description": "Filter results on product_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "variantable_id",
            "in": "query",
            "description": "Filter results on variantable_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "variantable_type",
            "in": "query",
            "description": "Filter results on variantable_type",
            "schema": {
              "type": "string",
              "enum": [
                "planned_course",
                "program_edition"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VariantWithIncludes"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/catalog/variants/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "catalog-variants"
        ],
        "summary": "Get a catalog variant record",
        "operationId": "get_catalog_variant_by_id",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VariantWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "catalog-variants"
        ],
        "summary": "Update a catalog variant",
        "operationId": "update_catalog_variant_by_id",
        "security": [
          {
            "Bearer": [
              "courses:modify",
              "courses:read"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "is_published"
                ],
                "type": "object",
                "properties": {
                  "is_published": {
                    "type": "boolean",
                    "description": "Boolean showing if the variant is published or not."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VariantWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "categories"
        ],
        "summary": "Get all category records",
        "operationId": "get_categories",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "published",
            "in": "query",
            "description": "Show only published categories",
            "schema": {
              "type": "string",
              "enum": [
                "published"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the results. Can change order by using `<sort_by>:<direction>` where `<direction>` is either `asc` or `desc`",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "position:asc",
                  "position:desc"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "categories"
        ],
        "summary": "Create a category.",
        "operationId": "create_category",
        "security": [
          {
            "Bearer": [
              "courses:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Title of the category."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the category.",
                    "nullable": true
                  },
                  "is_published": {
                    "type": "boolean",
                    "description": "Boolean if the category is published on the website."
                  },
                  "meta_title": {
                    "type": "string",
                    "description": "The meta title of the category, used for SEO (Search Engine Optimisation) purposes.",
                    "nullable": true
                  },
                  "meta_description": {
                    "type": "string",
                    "description": "The meta description of the category, used for SEO (Search Engine Optimisation) purposes.",
                    "nullable": true
                  },
                  "parent_id": {
                    "type": "integer",
                    "description": "Unique identifier of the parent category",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/categories/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "categories"
        ],
        "summary": "Get a category record",
        "operationId": "get_category_by_id",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "categories"
        ],
        "summary": "Update a category.",
        "operationId": "update_category_by_id",
        "security": [
          {
            "Bearer": [
              "courses:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Title of the category."
                  },
                  "slug": {
                    "type": "string",
                    "description": "Friendly identifier of a category."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the category.",
                    "nullable": true
                  },
                  "is_published": {
                    "type": "boolean",
                    "description": "Boolean if the category is published on the website."
                  },
                  "meta_title": {
                    "type": "string",
                    "description": "The meta title of the category, used for SEO (Search Engine Optimisation) purposes.",
                    "nullable": true
                  },
                  "meta_description": {
                    "type": "string",
                    "description": "The meta description of the category, used for SEO (Search Engine Optimisation) purposes.",
                    "nullable": true
                  },
                  "parent_id": {
                    "type": "integer",
                    "nullable": true,
                    "description": "Unique identifier of the parent category"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/comments": {
      "post": {
        "tags": [
          "comments"
        ],
        "summary": "Create a comment.",
        "operationId": "create_comment",
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "commentable_id",
                  "commentable_type",
                  "content"
                ],
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "A string representing the content of a comment."
                  },
                  "commentable_id": {
                    "type": "integer",
                    "description": "Identifier of the subject the comment is linked to."
                  },
                  "commentable_type": {
                    "description": "Type of the subject the comment is linked to.",
                    "$ref": "#/components/schemas/CommentType"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/comments/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "delete": {
        "tags": [
          "comments"
        ],
        "summary": "Delete a comment.",
        "operationId": "delete_comment_by_id",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "comments"
        ],
        "summary": "Update a comment.",
        "operationId": "update_comment_by_id",
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "A string representing the content of a comment."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/course_locations": {
      "get": {
        "tags": [
          "course_locations"
        ],
        "summary": "Get all course location records",
        "operationId": "get_course_locations",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CourseLocationWithIncludes"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "course_locations"
        ],
        "summary": "Create a course location.",
        "operationId": "create_course_location",
        "security": [
          {
            "Bearer": [
              "settings:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the location where the course is held."
                  },
                  "address_attributes": {
                    "$ref": "#/components/schemas/AddressPayload"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseLocationWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/course_locations/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "course_locations"
        ],
        "summary": "Get a course location record",
        "operationId": "get_course_location_by_id",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseLocationWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "course_locations"
        ],
        "summary": "Delete a course location.",
        "operationId": "delete_course_location_by_id",
        "security": [
          {
            "Bearer": [
              "destroyable_settings:destroy"
            ]
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "course_locations"
        ],
        "summary": "Update a course location.",
        "operationId": "update_course_location_by_id",
        "security": [
          {
            "Bearer": [
              "settings:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the location where the course is held."
                  },
                  "address_attributes": {
                    "$ref": "#/components/schemas/AddressPatchPayload"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseLocationWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/course_tabs": {
      "get": {
        "tags": [
          "course_tabs"
        ],
        "summary": "Get all course tab records",
        "operationId": "get_course_tabs",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CourseTab"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/course_variants": {
      "get": {
        "tags": [
          "course_variants"
        ],
        "summary": "Get all course variant records",
        "operationId": "get_course_variants",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CourseVariant"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "course_variants"
        ],
        "summary": "Create a course variant",
        "operationId": "create_course_variant",
        "security": [
          {
            "Bearer": [
              "settings:modify",
              "settings:read"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the course variant."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseVariant"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/course_variants/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "course_variants"
        ],
        "summary": "Get a course variant record",
        "operationId": "get_course_variant_by_id",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseVariant"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/courses": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Get all course records",
        "operationId": "get_courses",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "published",
            "in": "query",
            "description": "Show only published courses",
            "schema": {
              "type": "string",
              "enum": [
                "published"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CourseWithIncludes"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "courses"
        ],
        "summary": "Create a course.",
        "operationId": "create_course",
        "security": [
          {
            "Bearer": [
              "courses:modify",
              "courses:read"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CoursePayload"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/courses/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Get a course record",
        "operationId": "get_course_by_id",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "courses"
        ],
        "summary": "Update a course.",
        "operationId": "update_course_by_id",
        "security": [
          {
            "Bearer": [
              "courses:modify",
              "courses:read"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CoursePatchPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/courses/{course_id}/planned_courses": {
      "parameters": [
        {
          "name": "course_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "planned_courses"
        ],
        "summary": "Get all planned course records of a single course",
        "operationId": "get_planned_courses_by_course_id",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Filter results on search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter results on type",
            "schema": {
              "type": "string",
              "enum": [
                "FixedPlannedCourse",
                "FlexiblePlannedCourse"
              ]
            }
          },
          {
            "name": "parents_published",
            "in": "query",
            "description": "Filter results on parents_published",
            "schema": {
              "type": "string",
              "enum": [
                "parents_published"
              ]
            }
          },
          {
            "name": "published_public",
            "in": "query",
            "description": "Only show courses that are published and are either planned or in progress",
            "schema": {
              "type": "string",
              "enum": [
                "published_public"
              ]
            }
          },
          {
            "name": "start_date_from",
            "in": "query",
            "description": "Filter results on start_date_from",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_date_until",
            "in": "query",
            "description": "Filter results on start_date_until",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "availability_state",
            "in": "query",
            "description": "Filter results on availability_state",
            "schema": {
              "$ref": "#/components/schemas/AvailabilityState"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter results on status",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/PlannedCourseStatus"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the results. Can change order by using `<sort_by>:<direction>` where `<direction>` is either `asc` or `desc`",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "start_date:asc",
                  "start_date:desc"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlannedCourseWithIncludes"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/courses/{course_id}/planned_courses/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "course_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "planned_courses"
        ],
        "summary": "Get a planned course record of a single course",
        "operationId": "get_planned_courses_by_id_and_course_id",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlannedCourseWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/credit_categories": {
      "get": {
        "tags": [
          "credit_categories"
        ],
        "summary": "Get all credit category records",
        "operationId": "get_credit_categories",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreditCategoryWithIncludes"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/credits": {
      "get": {
        "tags": [
          "credits"
        ],
        "summary": "Get all credit records",
        "operationId": "get_credits",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "student_id",
            "in": "query",
            "description": "Filter results on student_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Credit"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/custom/{object_type}/associations": {
      "parameters": [
        {
          "$ref": "#/components/parameters/CustomObjectTypeInPath"
        }
      ],
      "get": {
        "tags": [
          "custom_associations"
        ],
        "summary": "Get all associations of an system object",
        "x-badges": [
          {
            "name": "Beta",
            "color": "#7d15a3",
            "position": "after"
          }
        ],
        "description": "![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)\n",
        "operationId": "get_associations_of_object",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomAssociation"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/custom/{object_type}/fields/{field_slug}/options": {
      "parameters": [
        {
          "$ref": "#/components/parameters/CustomObjectTypeInPath"
        },
        {
          "$ref": "#/components/parameters/CustomFieldSlugInPath"
        }
      ],
      "get": {
        "tags": [
          "custom_field_options"
        ],
        "summary": "Get all options of a custom field",
        "x-badges": [
          {
            "name": "Beta",
            "color": "#7d15a3",
            "position": "after"
          }
        ],
        "operationId": "get_options_of_custom_field",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomFieldOption"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "custom_field_options"
        ],
        "summary": "Add an option to a custom field",
        "x-badges": [
          {
            "name": "Beta",
            "color": "#7d15a3",
            "position": "after"
          }
        ],
        "operationId": "add_option_to_custom_field",
        "security": [
          {
            "Bearer": [
              "settings:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldOptionPayload"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldOption"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/custom/{object_type}/fields/{field_slug}/options/{option_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/CustomObjectTypeInPath"
        },
        {
          "$ref": "#/components/parameters/CustomFieldSlugInPath"
        },
        {
          "$ref": "#/components/parameters/CustomFieldOptionIdInPath"
        }
      ],
      "get": {
        "tags": [
          "custom_field_options"
        ],
        "summary": "Get an option of a custom field",
        "x-badges": [
          {
            "name": "Beta",
            "color": "#7d15a3",
            "position": "after"
          }
        ],
        "operationId": "get_option_of_custom_field",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldOption"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "custom_field_options"
        ],
        "summary": "Update an option of a custom field",
        "x-badges": [
          {
            "name": "Beta",
            "color": "#7d15a3",
            "position": "after"
          }
        ],
        "operationId": "update_option_of_custom_field",
        "security": [
          {
            "Bearer": [
              "settings:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldOptionPatchPayload"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "custom_field_options"
        ],
        "summary": "Delete an option from custom field",
        "x-badges": [
          {
            "name": "Beta",
            "color": "#7d15a3",
            "position": "after"
          }
        ],
        "operationId": "delete_option_of_custom_field",
        "security": [
          {
            "Bearer": [
              "settings:modify"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/custom/objects": {
      "get": {
        "tags": [
          "custom_objects"
        ],
        "summary": "Get all custom objects",
        "x-badges": [
          {
            "name": "Beta",
            "color": "#7d15a3",
            "position": "after"
          }
        ],
        "description": "![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)\n",
        "operationId": "get_custom_objects",
        "parameters": [
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomObject"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/custom/objects/{object_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/CustomObjectIdInPath"
        }
      ],
      "get": {
        "tags": [
          "custom_objects"
        ],
        "summary": "Get a custom object by object_id",
        "x-badges": [
          {
            "name": "Beta",
            "color": "#7d15a3",
            "position": "after"
          }
        ],
        "description": "![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)\n",
        "operationId": "get_custom_object_by_object_id",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomObjectWithFields"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/custom/objects/{object_id}/records": {
      "parameters": [
        {
          "$ref": "#/components/parameters/CustomObjectIdInPath"
        }
      ],
      "get": {
        "tags": [
          "custom_records"
        ],
        "summary": "Get all custom records",
        "x-badges": [
          {
            "name": "Beta",
            "color": "#7d15a3",
            "position": "after"
          }
        ],
        "description": "![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)\n",
        "operationId": "get_custom_records",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomRecord"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "custom_records"
        ],
        "summary": "Create a custom record",
        "x-badges": [
          {
            "name": "Beta",
            "color": "#7d15a3",
            "position": "after"
          }
        ],
        "description": "![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)\n",
        "operationId": "create_custom_record",
        "security": [
          {
            "Bearer": [
              "settings:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomRecordPayload"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomRecord"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/custom/objects/{object_id}/records/{record_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/CustomObjectIdInPath"
        },
        {
          "$ref": "#/components/parameters/CustomRecordIdInPath"
        }
      ],
      "get": {
        "tags": [
          "custom_records"
        ],
        "summary": "Get a custom record",
        "x-badges": [
          {
            "name": "Beta",
            "color": "#7d15a3",
            "position": "after"
          }
        ],
        "description": "![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)\n",
        "operationId": "get_custom_record",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomRecord"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "custom_records"
        ],
        "summary": "Update a custom record",
        "x-badges": [
          {
            "name": "Beta",
            "color": "#7d15a3",
            "position": "after"
          }
        ],
        "description": "![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)\n",
        "operationId": "update_custom_record",
        "security": [
          {
            "Bearer": [
              "settings:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomRecordPatchPayload"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "custom_records"
        ],
        "summary": "Delete a custom record",
        "x-badges": [
          {
            "name": "Beta",
            "color": "#7d15a3",
            "position": "after"
          }
        ],
        "description": "![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)\n",
        "operationId": "delete_custom_record",
        "security": [
          {
            "Bearer": [
              "destroyable_settings:destroy"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/customers/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/discount_codes": {
      "get": {
        "tags": [
          "discount_codes"
        ],
        "summary": "Get all discount codes",
        "operationId": "get_discount_codes",
        "security": [
          {
            "Bearer": [
              "orders:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DiscountCode"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/educators/current": {
      "get": {
        "tags": [
          "educators"
        ],
        "summary": "Get an educator record",
        "operationId": "get_current_educator",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EducatorWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/enrollments": {
      "get": {
        "tags": [
          "enrollments"
        ],
        "summary": "Get all enrollment records",
        "operationId": "get_enrollments",
        "security": [
          {
            "Bearer": [
              "orders:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "student_id",
            "in": "query",
            "description": "Filter results on student_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "planned_course_id",
            "in": "query",
            "description": "Filter results on planned_course_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter results on status",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "confirmed",
                  "active",
                  "canceled",
                  "completed"
                ]
              }
            }
          },
          {
            "name": "with_canceled",
            "in": "query",
            "description": "Filter results based on whether they include a canceled status or not",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnrollmentWithIncludes"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/enrollments/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "enrollments"
        ],
        "summary": "Get an enrollment record",
        "operationId": "get_enrollment_by_id",
        "security": [
          {
            "Bearer": [
              "orders:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrollmentWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "enrollments"
        ],
        "summary": "Update an enrollment",
        "operationId": "update_enrollment_by_id",
        "security": [
          {
            "Bearer": [
              "orders:read",
              "orders:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "end_date": {
                    "type": "string",
                    "description": "If it is an enrollment of a fixed course, it equals the end date. For a flexible course, it returns the enrollment specific end date.",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrollmentWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/enrollments/{id}/cancel": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "put": {
        "tags": [
          "enrollments"
        ],
        "summary": "Cancel an enrollment",
        "operationId": "cancel_enrollment_by_id",
        "security": [
          {
            "Bearer": [
              "orders:read",
              "orders:modify"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrollmentWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/grades": {
      "post": {
        "tags": [
          "grades"
        ],
        "summary": "Create a grade",
        "operationId": "create_grade",
        "security": [
          {
            "Bearer": [
              "orders:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "grade",
                  "score",
                  "gradeable_id",
                  "gradeable_type"
                ],
                "type": "object",
                "properties": {
                  "grade": {
                    "type": "string",
                    "nullable": true,
                    "description": "The grade awarded (at least one of grade and score is required)"
                  },
                  "score": {
                    "type": "number",
                    "nullable": true,
                    "description": "The score awarded (at least one of grade and score is required)"
                  },
                  "gradeable_id": {
                    "type": "integer",
                    "description": "Unique model identifier of the gradeable (enrollment / ...)"
                  },
                  "gradeable_type": {
                    "type": "string",
                    "description": "Model type of the gradeable (enrollment / ...)"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Additional comment about the grade",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Grade"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/grades/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "grades"
        ],
        "summary": "Get a grade record",
        "operationId": "get_grade_by_id",
        "security": [
          {
            "Bearer": [
              "orders:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Grade"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "grades"
        ],
        "summary": "Delete a grade.",
        "operationId": "delete_grade_by_id",
        "security": [
          {
            "Bearer": [
              "orders:destroy"
            ]
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "grades"
        ],
        "summary": "Update a grade",
        "operationId": "update_grade_by_id",
        "security": [
          {
            "Bearer": [
              "orders:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "grade": {
                    "type": "string",
                    "nullable": true,
                    "description": "The grade awarded (at least one of grade and score is required)"
                  },
                  "score": {
                    "type": "number",
                    "nullable": true,
                    "description": "The score awarded (at least one of grade and score is required)"
                  },
                  "gradeable_id": {
                    "type": "integer",
                    "description": "Unique model identifier of the gradeable (enrollment / ...)"
                  },
                  "gradeable_type": {
                    "type": "string",
                    "description": "Model type of the gradeable (enrollment / ...)"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Additional comment about the grade",
                    "nullable": true
                  },
                  "enrollment_id": {
                    "type": "integer",
                    "description": "Unique identifier of the enrollment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Grade"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/invoice_vats": {
      "get": {
        "tags": [
          "invoice_vats"
        ],
        "summary": "Get all invoice vat records",
        "operationId": "get_invoice_vats",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceVatWithIncludes"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "invoice_vats"
        ],
        "summary": "Create an invoice vat.",
        "operationId": "create_invoice_vat",
        "security": [
          {
            "Bearer": [
              "settings:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "percentage"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the invoice vat."
                  },
                  "percentage": {
                    "type": "string",
                    "description": "Number representing the VAT percentage."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceVatWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/invoices": {
      "get": {
        "tags": [
          "invoices"
        ],
        "summary": "Get all invoice records",
        "operationId": "get_invoices",
        "security": [
          {
            "Bearer": [
              "invoices:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "description": "Filter results on account_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter results on status",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InvoiceStatus"
              }
            }
          },
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceWithIncludes"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "invoices"
        ],
        "summary": "Create an invoice.",
        "operationId": "create_invoice",
        "security": [
          {
            "Bearer": [
              "invoices:read",
              "invoices:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "account_id"
                ],
                "type": "object",
                "properties": {
                  "account_id": {
                    "type": "integer",
                    "description": "Identifier of the account."
                  },
                  "feature": {
                    "type": "string",
                    "description": "Some description of the invoice which is displayed on the invoice.",
                    "nullable": true
                  },
                  "footnote": {
                    "type": "string",
                    "description": "The note displayed at the bottom of the invoice.",
                    "nullable": true
                  },
                  "invoice_items_attributes": {
                    "type": "array",
                    "items": {
                      "required": [
                        "name",
                        "unit_price",
                        "units"
                      ],
                      "type": "object",
                      "properties": {
                        "catalog_variant_id": {
                          "type": "integer",
                          "nullable": true,
                          "description": "Unique identifier of the catalog variant."
                        },
                        "units": {
                          "type": "number",
                          "description": "Integer representing the number of units of the invoice item."
                        },
                        "unit_price": {
                          "type": "string",
                          "description": "Decimal representing the price of an unit."
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the invoice item."
                        },
                        "invoice_vat_id": {
                          "type": "integer",
                          "description": "Identifier of the invoice vat."
                        },
                        "_destroy": {
                          "type": "boolean",
                          "description": "Set if you want to delete this item."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/invoices/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "invoices"
        ],
        "summary": "Get an invoice record",
        "operationId": "get_invoice_by_id",
        "security": [
          {
            "Bearer": [
              "invoices:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/invoices/{id}/open": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "post": {
        "tags": [
          "invoices"
        ],
        "summary": "Changes the state from concept to open.\nThis will assign the actual invoice number so it's ready for sending.\nIf the current state is not concept, this endpoint does nothing.\n",
        "operationId": "open_invoice_by_id",
        "security": [
          {
            "Bearer": [
              "invoices:read",
              "invoices:modify"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/invoices/{id}/pdf": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "invoices"
        ],
        "summary": "Get the base64 encoded version of the invoice PDF",
        "operationId": "get_invoice_pdf_by_id",
        "security": [
          {
            "Bearer": [
              "invoices:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/invoices/{invoice_id}/invoice_items": {
      "parameters": [
        {
          "name": "invoice_id",
          "in": "path",
          "description": "Filter results on invoice_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/invoices/{invoice_id}/payments": {
      "parameters": [
        {
          "name": "invoice_id",
          "in": "path",
          "description": "Filter results on invoice_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "payments"
        ],
        "summary": "Get all payment records of an invoice",
        "operationId": "get_invoice_payments_by_invoice_id",
        "security": [
          {
            "Bearer": [
              "payments:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentWithIncludes"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "payments"
        ],
        "summary": "Create a payment.",
        "operationId": "create_invoice_payment_by_invoice_id",
        "security": [
          {
            "Bearer": [
              "payments:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "amount"
                ],
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "string",
                    "description": "A number representing the total amount of the invoice."
                  },
                  "currency": {
                    "type": "string",
                    "description": "The currency used for the payment.",
                    "enum": [
                      "EUR",
                      "ISK",
                      "USD",
                      "GBP"
                    ]
                  },
                  "date": {
                    "type": "string",
                    "description": "Date on which the payment was created."
                  },
                  "payment_method_id": {
                    "type": "integer",
                    "description": "Identifier of the payment method."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentWithFixedIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/invoices/{invoice_id}/payments/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "invoice_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "delete": {
        "tags": [
          "payments"
        ],
        "summary": "Delete a payment.",
        "operationId": "delete_invoice_payment_by_id_and_invoice_id",
        "security": [
          {
            "Bearer": [
              "destroyable_payments:destroy"
            ]
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/labels": {
      "get": {
        "tags": [
          "labels"
        ],
        "summary": "Get all labels",
        "operationId": "get_labels",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "model_type",
            "in": "query",
            "description": "Filter results on model_type",
            "schema": {
              "type": "string",
              "enum": [
                "Lead",
                "Order",
                "Catalog::Product",
                "User",
                "Account",
                "Teacher",
                "Program::Enrollment"
              ]
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Filter results on search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter results on id",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Label"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "labels"
        ],
        "summary": "Create a label",
        "operationId": "create_label",
        "security": [
          {
            "Bearer": [
              "settings:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "model_type",
                  "name"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the label"
                  },
                  "color": {
                    "type": "string",
                    "description": "Hex code of the color of the label"
                  },
                  "model_type": {
                    "type": "string",
                    "description": "The model type for which this label is made available",
                    "enum": [
                      "Lead",
                      "Order",
                      "Catalog::Product",
                      "User",
                      "Account",
                      "Teacher"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/labels/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "labels"
        ],
        "summary": "Get a label",
        "operationId": "get_label_by_id",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "labels"
        ],
        "summary": "Delete a label",
        "operationId": "delete_label_by_id",
        "security": [
          {
            "Bearer": [
              "destroyable_settings:destroy"
            ]
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "labels"
        ],
        "summary": "Update a label",
        "operationId": "update_label_by_id",
        "security": [
          {
            "Bearer": [
              "settings:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the label"
                  },
                  "color": {
                    "type": "string",
                    "description": "Hex code of the color of the label"
                  },
                  "model_type": {
                    "type": "string",
                    "description": "The model type for which this label is made available",
                    "enum": [
                      "Lead",
                      "Order",
                      "Catalog::Product",
                      "User",
                      "Account",
                      "Teacher"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/leads": {
      "get": {
        "tags": [
          "leads"
        ],
        "summary": "Get all lead records",
        "operationId": "get_leads",
        "security": [
          {
            "Bearer": [
              "leads:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeadWithIncludes"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "leads"
        ],
        "summary": "Create a lead.",
        "operationId": "create_lead",
        "security": [
          {
            "Bearer": [
              "leads:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Title of the lead"
                  },
                  "account_id": {
                    "type": "integer",
                    "nullable": true,
                    "description": "ID of the account linked to this lead"
                  },
                  "user_id": {
                    "type": "integer",
                    "nullable": true,
                    "description": "ID of the user linked to this lead"
                  },
                  "value": {
                    "type": "string",
                    "nullable": true,
                    "description": "Decimal representing the price of a lead"
                  },
                  "company_name": {
                    "type": "string",
                    "description": "Name of the company where this lead comes from",
                    "nullable": true
                  },
                  "first_name": {
                    "type": "string",
                    "description": "The first name of the lead",
                    "nullable": true
                  },
                  "middle_name": {
                    "type": "string",
                    "nullable": true,
                    "description": "The middle name of the lead"
                  },
                  "last_name": {
                    "type": "string",
                    "description": "The last name of the lead",
                    "nullable": true
                  },
                  "administrator_id": {
                    "type": "integer",
                    "description": "ID of administrator that owns the lead",
                    "nullable": true
                  },
                  "email": {
                    "type": "string",
                    "description": "The email of the lead",
                    "nullable": true
                  },
                  "phone": {
                    "type": "string",
                    "description": "The phone number of the lead\n**Note** : Use an international phone format unless the phone number is\nfrom the educator configured country.\n",
                    "nullable": true
                  },
                  "status": {
                    "type": "string",
                    "description": "The status of the lead",
                    "enum": [
                      "prospect",
                      "waiting_list",
                      "won",
                      "lost",
                      "archive"
                    ]
                  },
                  "quality": {
                    "type": "number",
                    "description": "Star scoring for the lead",
                    "nullable": true
                  },
                  "wants_newsletter": {
                    "type": "boolean",
                    "description": "Indicates if lead wants to receive the newsletter or not"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Comment for a lead",
                    "nullable": true
                  },
                  "label_ids": {
                    "type": "array",
                    "description": "IDs of the labels",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "address_attributes": {
                    "$ref": "#/components/schemas/AddressPayload"
                  },
                  "lead_products": {
                    "type": "array",
                    "description": "Array of products and variants the lead is interested in.\n",
                    "items": {
                      "type": "object",
                      "required": [
                        "catalog_product_id"
                      ],
                      "properties": {
                        "catalog_product_id": {
                          "type": "integer",
                          "description": "ID of the catalog product"
                        },
                        "catalog_variant_id": {
                          "type": "integer",
                          "description": "ID of the catalog variant",
                          "nullable": true
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeadWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/leads/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "leads"
        ],
        "summary": "Get one lead record",
        "operationId": "get_lead_by_id",
        "security": [
          {
            "Bearer": [
              "leads:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeadWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "leads"
        ],
        "summary": "Delete a lead.",
        "operationId": "delete_lead_by_id",
        "security": [
          {
            "Bearer": [
              "leads:destroy"
            ]
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/material_groups": {
      "get": {
        "tags": [
          "material_groups"
        ],
        "summary": "Get all material group records",
        "operationId": "get_material_groups",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MaterialGroup"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "material_groups"
        ],
        "summary": "Create a material group.",
        "operationId": "create_material_group",
        "security": [
          {
            "Bearer": [
              "settings:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the material group where the course is held."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaterialGroup"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/material_groups/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "material_groups"
        ],
        "summary": "Get a material group record",
        "operationId": "get_material_group_by_id",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaterialGroup"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "material_groups"
        ],
        "summary": "Delete a material group.",
        "operationId": "delete_material_group_by_id",
        "security": [
          {
            "Bearer": [
              "destroyable_settings:destroy"
            ]
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "material_groups"
        ],
        "summary": "Update a material group.",
        "operationId": "update_material_group_by_id",
        "security": [
          {
            "Bearer": [
              "settings:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the material group where the course is held."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaterialGroup"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/materials": {
      "get": {
        "tags": [
          "materials"
        ],
        "summary": "Get all material records",
        "operationId": "get_materials",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MaterialWithIncludes"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "materials"
        ],
        "summary": "Create a material.",
        "operationId": "create_material",
        "security": [
          {
            "Bearer": [
              "settings:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "material_group_id",
                  "name"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the material."
                  },
                  "use_type": {
                    "type": "string",
                    "description": "Type of material.",
                    "enum": [
                      "reservable",
                      "consumable"
                    ]
                  },
                  "material_group_id": {
                    "type": "integer",
                    "description": "Unique identifier of the material group."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaterialWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/materials/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "delete": {
        "tags": [
          "materials"
        ],
        "summary": "Delete a material.",
        "operationId": "delete_material_by_id",
        "security": [
          {
            "Bearer": [
              "destroyable_settings:destroy"
            ]
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "materials"
        ],
        "summary": "Update a material.",
        "operationId": "update_material_by_id",
        "security": [
          {
            "Bearer": [
              "settings:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the material."
                  },
                  "material_group_id": {
                    "type": "integer",
                    "description": "Unique identifier of the material group."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaterialWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/meeting_locations": {
      "get": {
        "tags": [
          "meeting_locations"
        ],
        "summary": "Get all meeting location records",
        "operationId": "get_meeting_locations",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeetingLocationWithIncludes"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "meeting_locations"
        ],
        "summary": "Create a meeting location.",
        "operationId": "create_meeting_location",
        "security": [
          {
            "Bearer": [
              "settings:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "course_location_id",
                  "name"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the meeting location."
                  },
                  "course_location_id": {
                    "type": "integer",
                    "description": "Unique identifier of the course location."
                  },
                  "capacity": {
                    "type": "integer",
                    "description": "Capacity of the meeting location",
                    "nullable": true
                  },
                  "address_attributes": {
                    "$ref": "#/components/schemas/AddressPayload"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingLocationWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/meeting_locations/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "meeting_locations"
        ],
        "summary": "Get an meeting location",
        "operationId": "get_meeting_location_by_id",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingLocationWithIncludes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "meeting_locations"
        ],
        "summary": "Delete a course location.",
        "operationId": "delete_meeting_location_by_id",
        "security": [
          {
            "Bearer": [
              "destroyable_settings:destroy"
            ]
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "meeting_locations"
        ],
        "summary": "Update a meeting location.",
        "operationId": "update_meeting_location_by_id",
        "security": [
          {
            "Bearer": [
              "settings:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the meeting location."
                  },
                  "course_location_id": {
                    "type": "integer",
                    "description": "Unique identifier of the course location."
                  },
                  "capacity": {
                    "type": "number",
                    "description": "Capacity of the meeting location",
                    "nullable": true
                  },
                  "address_attributes": {
                    "$ref": "#/components/schemas/AddressPatchPayload"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingLocationWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/meetings": {
      "get": {
        "tags": [
          "meetings"
        ],
        "summary": "Get all meeting records",
        "operationId": "get_meetings",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "planned_course_id",
            "in": "query",
            "description": "Filter results on planned_course_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Only show meetings ending after this date and time",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "Only show meetings starting before this date and time",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeetingWithIncludes"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/meetings/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "meetings"
        ],
        "summary": "Get an meeting record",
        "operationId": "get_meeting_by_id",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "meetings"
        ],
        "summary": "Delete a meeting.",
        "operationId": "delete_meeting_by_id",
        "security": [
          {
            "Bearer": [
              "courses:destroy"
            ]
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/meetings/{id}/materials": {
      "get": {
        "tags": [
          "planning-materials"
        ],
        "summary": "Get all planning materials of a meeting",
        "operationId": "get_planning_materials_of_meeting",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanningMaterial"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/orders": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "Get all order records",
        "operationId": "get_orders",
        "security": [
          {
            "Bearer": [
              "orders:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "creator_id",
            "in": "query",
            "description": "Filter results on creator_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "created_at_after",
            "in": "query",
            "description": "Filter results on created_at_after",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the results. Can change order by using `<sort_by>:<direction>` where `<direction>` is either `asc` or `desc`",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "created_at:asc",
                  "created_at:desc"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderWithIncludes"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "orders"
        ],
        "summary": "Create an order.",
        "operationId": "create_order",
        "security": [
          {
            "Bearer": [
              "orders:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "catalog_variant_id",
                  "creator_id"
                ],
                "type": "object",
                "properties": {
                  "cost": {
                    "type": "string",
                    "description": "Decimal representing the value of the order",
                    "nullable": true
                  },
                  "cost_scheme": {
                    "type": "string",
                    "description": "The cost schema that the payment will follow for the specified order.",
                    "enum": [
                      "student",
                      "order",
                      "tbd",
                      "free"
                    ]
                  },
                  "catalog_variant_id": {
                    "type": "integer",
                    "description": "Unique identifier of the orders CatalogVariant."
                  },
                  "creator_id": {
                    "type": "integer",
                    "description": "Unique identifier of the orders Creator (User)."
                  },
                  "account_id": {
                    "type": "integer",
                    "description": "The unique identifier associated with the orders Account. If not provided, the system will default to using the personal account.\n"
                  },
                  "planned_course_id": {
                    "type": "integer",
                    "description": "*DEPRECATED*: Use catalog_variant_id instead.\nUnique identifier of the order's planned course.\n"
                  },
                  "payment_method_id": {
                    "type": "integer",
                    "description": "Unique identifier of the orders PaymentMethod."
                  },
                  "student_ids": {
                    "type": "array",
                    "description": "Array of student ids. A non-empty array is required if there are no student ids specified in the enrollments_attributes.",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "payment_option_id": {
                    "type": "integer",
                    "description": "Unique identifier of the orders PaymentOption."
                  },
                  "custom": {
                    "type": "object",
                    "properties": {},
                    "description": "The custom properties of the order."
                  },
                  "approve": {
                    "type": "boolean",
                    "description": "Optional: If the order should be approved or not. When omitted will default to false"
                  },
                  "label_ids": {
                    "type": "array",
                    "description": "Optional: Assign labels to the order.",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "referral_id": {
                    "type": "integer",
                    "description": "Optional: Identifier of the referral."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/orders/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "Get an order record",
        "operationId": "get_order_by_id",
        "security": [
          {
            "Bearer": [
              "orders:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/orders/{id}/approve": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "put": {
        "tags": [
          "orders"
        ],
        "summary": "Approve an order",
        "operationId": "approve_order_by_id",
        "security": [
          {
            "Bearer": [
              "orders:read",
              "orders:modify"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/orders/{id}/cancel": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "put": {
        "tags": [
          "orders"
        ],
        "summary": "Cancel an order",
        "operationId": "cancel_order_by_id",
        "security": [
          {
            "Bearer": [
              "orders:read",
              "orders:modify"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/orders/{id}/deny": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "put": {
        "tags": [
          "orders"
        ],
        "summary": "Deny an order",
        "operationId": "deny_order_by_id",
        "security": [
          {
            "Bearer": [
              "orders:read",
              "orders:modify"
            ]
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/orders/{id}/labels": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "post": {
        "tags": [
          "labels"
        ],
        "summary": "Add label to an order",
        "operationId": "add_label_to_order",
        "security": [
          {
            "Bearer": [
              "orders:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "label_id"
                ],
                "type": "object",
                "properties": {
                  "label_id": {
                    "type": "integer",
                    "description": "Unique identifier of the label."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/payment_methods": {
      "get": {
        "tags": [
          "payment_methods"
        ],
        "summary": "Get all payment method records available for customers",
        "operationId": "get_payment_methods",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentMethod"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/payment_options": {
      "get": {
        "tags": [
          "payment_options"
        ],
        "summary": "Get all payment option records",
        "operationId": "get_payment_options",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentOption"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/payments/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "payments"
        ],
        "summary": "Get one payment record",
        "operationId": "get_payment_by_id",
        "security": [
          {
            "Bearer": [
              "payments:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/planned_courses": {
      "get": {
        "tags": [
          "planned_courses"
        ],
        "summary": "Get all planned course records",
        "operationId": "get_planned_courses",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Filter results on search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter results on type",
            "schema": {
              "type": "string",
              "enum": [
                "FixedPlannedCourse",
                "FlexiblePlannedCourse"
              ]
            }
          },
          {
            "name": "parents_published",
            "in": "query",
            "description": "Filter results on parents_published",
            "schema": {
              "type": "string",
              "enum": [
                "parents_published"
              ]
            }
          },
          {
            "name": "published_public",
            "in": "query",
            "description": "Only show courses that are published and are either planned or in progress",
            "schema": {
              "type": "string",
              "enum": [
                "published_public"
              ]
            }
          },
          {
            "name": "start_date_from",
            "in": "query",
            "description": "Filter results on start_date_from",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_date_until",
            "in": "query",
            "description": "Filter results on start_date_until",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "availability_state",
            "in": "query",
            "description": "Filter results on availability_state",
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed"
              ]
            }
          },
          {
            "name": "course_id",
            "in": "query",
            "description": "Filter results on course_id",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter results on status",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "planned",
                  "active",
                  "completed",
                  "canceled"
                ]
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the results. Can change order by using `<sort_by>:<direction>` where `<direction>` is either `asc` or `desc`",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "start_date:asc",
                  "start_date:desc"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlannedCourseWithIncludes"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "planned_courses"
        ],
        "summary": "Create a planned course.",
        "operationId": "create_planned_course",
        "security": [
          {
            "Bearer": [
              "courses:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlannedCoursePayload"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlannedCourseWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/planned_courses/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "planned_courses"
        ],
        "summary": "Get a planned course record",
        "operationId": "get_planned_course_by_id",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlannedCourseWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "planned_courses"
        ],
        "summary": "Update a planned course.",
        "operationId": "update_planned_course_by_id",
        "security": [
          {
            "Bearer": [
              "courses:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlannedCoursePatchPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlannedCourseWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/planned_courses/{id}/cancel": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "put": {
        "tags": [
          "planned_courses"
        ],
        "summary": "Cancel a planned course.",
        "operationId": "cancel_planned_course_by_id",
        "security": [
          {
            "Bearer": [
              "courses:destroy"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlannedCourseWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/planned_courses/{planned_course_id}/meetings": {
      "parameters": [
        {
          "name": "planned_course_id",
          "in": "path",
          "description": "Filter results on planned_course_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "meetings"
        ],
        "summary": "Get all meeting records of a planned course",
        "operationId": "get_meetings_by_planned_course_id",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the results. Can change order by using `<sort_by>:<direction>` where `<direction>` is either `asc` or `desc`",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "start_date_time:asc",
                  "start_date_time:desc",
                  "name:asc",
                  "name:desc"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeetingWithIncludes"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/planned_courses/{planned_course_id}/teacher_enrollments": {
      "parameters": [
        {
          "name": "planned_course_id",
          "in": "path",
          "description": "Filter results on planned_course_id",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "teacher_enrollments"
        ],
        "summary": "Get all teacher enrollments for given planned course.",
        "operationId": "get_teacher_enrollments_by_planned_course_id",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeacherEnrollment"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "teacher_enrollments"
        ],
        "summary": "Enroll a teacher to the given planned course.",
        "operationId": "create_teacher_enrollment_by_planned_course_id",
        "security": [
          {
            "Bearer": [
              "courses:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "teacher_id"
                ],
                "type": "object",
                "properties": {
                  "teacher_id": {
                    "type": "integer",
                    "description": "Unique identifier of the teacher."
                  },
                  "teacher_role_id": {
                    "type": "integer",
                    "description": "Unique identifier of the teacher role."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeacherEnrollment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/planning/conflicts": {
      "get": {
        "tags": [
          "planning-conflicts"
        ],
        "summary": "Get all conflicts",
        "operationId": "get_planning_conflicts",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanningConflict"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/planning/events": {
      "get": {
        "tags": [
          "planning-events"
        ],
        "summary": "Get all planning event records",
        "operationId": "get_planning_events",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanningEventWithIncludes"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/planning/events/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "planning-events"
        ],
        "summary": "Get an planning event record",
        "operationId": "get_planning_event_by_id",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanningEventWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "planning-events"
        ],
        "summary": "Delete a planning event.",
        "operationId": "delete_planning_event_by_id",
        "security": [
          {
            "Bearer": [
              "courses:destroy"
            ]
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/planning/events/{id}/materials": {
      "get": {
        "tags": [
          "planning-materials"
        ],
        "summary": "Get all planning materials of a planning event",
        "operationId": "get_planning_materials_of_planing_event",
        "security": [
          {
            "Bearer": [
              "courses:read",
              "settings:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanningMaterial"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/planning/locations": {
      "get": {
        "tags": [
          "planning-locations"
        ],
        "summary": "Get all locations that are available",
        "operationId": "get_planning_locations",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeetingLocation"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/planning/materials": {
      "get": {
        "tags": [
          "planning-materials"
        ],
        "summary": "Get all materials that are available",
        "operationId": "get_planning_materials",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Material"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/planning/teachers": {
      "get": {
        "tags": [
          "planning-teachers"
        ],
        "summary": "Get all teachers that are available",
        "operationId": "get_planning_teachers",
        "security": [
          {
            "Bearer": [
              "relations:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/plugins/data/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/plugins/plugins/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ]
          }
        }
      ]
    },
    "/program/editions": {
      "get": {
        "tags": [
          "program-editions"
        ],
        "summary": "Get all program editions",
        "description": "![Program](https://img.shields.io/badge/Feature-Programs-1d8127)\n",
        "operationId": "get_program_editions",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "program_id",
            "in": "query",
            "description": "Filter results on program_id",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EditionWithIncludes"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "program-editions"
        ],
        "summary": "Create a program edition",
        "description": "![Program](https://img.shields.io/badge/Feature-Programs-1d8127)\n",
        "operationId": "create_program_edition",
        "security": [
          {
            "Bearer": [
              "courses:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProgramEditionPayload"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditionWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/program/editions/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "program-editions"
        ],
        "summary": "Get a program edition",
        "description": "![Program](https://img.shields.io/badge/Feature-Programs-1d8127)\n",
        "operationId": "get_program_edition_by_id",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditionWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "program-editions"
        ],
        "summary": "Delete a program edition",
        "description": "![Program](https://img.shields.io/badge/Feature-Programs-1d8127)\n",
        "operationId": "delete_program_edition_by_id",
        "security": [
          {
            "Bearer": [
              "courses:destroy"
            ]
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "program-editions"
        ],
        "summary": "Update a program edition",
        "description": "![Program](https://img.shields.io/badge/Feature-Programs-1d8127)\n",
        "operationId": "update_program_edition_by_id",
        "security": [
          {
            "Bearer": [
              "courses:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProgramEditionPatchPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditionWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/program/editions/{id}/elements": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "program-editions"
        ],
        "summary": "Get the elements of a program edition",
        "x-badges": [
          {
            "name": "Beta",
            "color": "#7d15a3",
            "position": "after"
          }
        ],
        "description": "![Program](https://img.shields.io/badge/Feature-Programs-1d8127)\n",
        "operationId": "get_elements_of_program_edition",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProgramEditionElement"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/program/elements": {
      "get": {
        "tags": [
          "program-elements"
        ],
        "summary": "Get all elements",
        "operationId": "get_program_elements",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "description": "![Program](https://img.shields.io/badge/Feature-Programs-1d8127)\n\nThis endpoint will only return elements of type 'Course Element' that are directly linked to the program edition(s). It does not consider possible blocks.\n",
        "parameters": [
          {
            "name": "edition_id",
            "in": "query",
            "description": "Filter results on edition_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Element"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "program-elements"
        ],
        "summary": "Create a program element",
        "operationId": "create_program_element",
        "security": [
          {
            "Bearer": [
              "courses:modify"
            ]
          }
        ],
        "description": "![Program](https://img.shields.io/badge/Feature-Programs-1d8127)\n\nThis endpoint can only create elements of type 'Course Element' that are directly linked to the program edition(s). It does not consider possible blocks.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "course_id",
                  "edition_id"
                ],
                "type": "object",
                "properties": {
                  "course_id": {
                    "type": "integer",
                    "description": "The identifier of the associated course."
                  },
                  "edition_id": {
                    "type": "integer",
                    "description": "The identifier of the associated course."
                  },
                  "planned_course_id": {
                    "type": "integer",
                    "nullable": true,
                    "description": "The identifier of the associated course."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Element"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/program/elements/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "program-elements"
        ],
        "summary": "Get an element",
        "operationId": "get_program_element_by_id",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "description": "![Program](https://img.shields.io/badge/Feature-Programs-1d8127)\n\nThis endpoint will only return elements of type 'Course Element' that are directly linked to the program edition(s). It does not consider possible blocks.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Element"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "program-elements"
        ],
        "summary": "Delete a element",
        "operationId": "delete_program_element_by_id",
        "security": [
          {
            "Bearer": [
              "courses:destroy"
            ]
          }
        ],
        "description": "![Program](https://img.shields.io/badge/Feature-Programs-1d8127)\n\nThis endpoint can only remove elements of type 'Course Element' that are directly linked to the program edition(s). It does not consider possible blocks.\n",
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "program-elements"
        ],
        "summary": "Update an element",
        "operationId": "update_program_element_by_id",
        "security": [
          {
            "Bearer": [
              "courses:modify"
            ]
          }
        ],
        "description": "![Program](https://img.shields.io/badge/Feature-Programs-1d8127)\n\nThis endpoint can only change elements of type 'Course Element' that are directly linked to the program edition(s). It does not consider possible blocks.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "edition_id": {
                    "type": "integer",
                    "description": "The identifier of the associated course."
                  },
                  "planned_course_id": {
                    "type": "integer",
                    "description": "The identifier of the associated course.",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Element"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/program/enrollments": {
      "get": {
        "tags": [
          "program-enrollments"
        ],
        "summary": "Get all program enrollments",
        "description": "![Program](https://img.shields.io/badge/Feature-Programs-1d8127)\n",
        "operationId": "get_program_enrollments",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "student_id",
            "in": "query",
            "description": "Filter results on student_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "edition_id",
            "in": "query",
            "description": "Filter results on edition_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProgramEnrollmentWithIncludes"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/program/enrollments/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "program-enrollments"
        ],
        "summary": "Get a program enrollment record",
        "description": "![Program](https://img.shields.io/badge/Feature-Programs-1d8127)\n",
        "operationId": "get_program_enrollment_by_id",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProgramEnrollmentWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/program/enrollments/{id}/award_certificate": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "put": {
        "tags": [
          "program-enrollments"
        ],
        "summary": "Awards a certificate to a program enrollment",
        "description": "![Program](https://img.shields.io/badge/Feature-Programs-1d8127)\n",
        "operationId": "award_certificate_to_program_enrollment_by_id",
        "security": [
          {
            "Bearer": [
              "courses:read",
              "courses:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "certificate_template_id"
                ],
                "type": "object",
                "properties": {
                  "certificate_template_id": {
                    "type": "integer",
                    "description": "Id of the certificate template to use for the certificate"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProgramEnrollmentWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/program/enrollments/{id}/cancel": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "put": {
        "tags": [
          "program-enrollments"
        ],
        "summary": "Cancel a program enrollment",
        "description": "![Program](https://img.shields.io/badge/Feature-Programs-1d8127)\n",
        "operationId": "cancel_program_enrollment_by_id",
        "security": [
          {
            "Bearer": [
              "courses:read",
              "courses:modify"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProgramEnrollmentWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/program/enrollments/{id}/delete_certificate": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "post": {
        "tags": [
          "program-enrollments"
        ],
        "summary": "Deletes a certificate from a program enrollment",
        "description": "![Program](https://img.shields.io/badge/Feature-Programs-1d8127)\n",
        "operationId": "delete_certificate_from_program_enrollment_by_id",
        "security": [
          {
            "Bearer": [
              "courses:read",
              "courses:modify"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProgramEnrollmentWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/program/programs": {
      "get": {
        "tags": [
          "program-programs"
        ],
        "summary": "Get all programs",
        "description": "![Program](https://img.shields.io/badge/Feature-Programs-1d8127)\n",
        "operationId": "get_programs",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProgramWithIncludes"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "program-programs"
        ],
        "summary": "Create a program",
        "description": "![Program](https://img.shields.io/badge/Feature-Programs-1d8127)\n",
        "operationId": "create_program",
        "security": [
          {
            "Bearer": [
              "courses:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProgramProgramPayload"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProgramWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/program/programs/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "program-programs"
        ],
        "summary": "Get a program",
        "description": "![Program](https://img.shields.io/badge/Feature-Programs-1d8127)\n",
        "operationId": "get_program_by_id",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProgramWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "program-programs"
        ],
        "summary": "Delete a program",
        "description": "![Program](https://img.shields.io/badge/Feature-Programs-1d8127)\n",
        "operationId": "delete_program_by_id",
        "security": [
          {
            "Bearer": [
              "courses:destroy"
            ]
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "program-programs"
        ],
        "summary": "Update a program",
        "description": "![Program](https://img.shields.io/badge/Feature-Programs-1d8127)\n",
        "operationId": "update_program_by_id",
        "security": [
          {
            "Bearer": [
              "courses:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProgramProgramPatchPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProgramWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/referrals": {
      "get": {
        "tags": [
          "referrals"
        ],
        "summary": "Get all referral records",
        "operationId": "get_referrals",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Referral"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/signup_questions": {
      "get": {
        "tags": [
          "signup_questions"
        ],
        "summary": "Get all signup_question records",
        "operationId": "get_signup_questions",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "for_user",
            "in": "query",
            "description": "Filter results on for_user",
            "schema": {
              "type": "string",
              "enum": [
                "for_user"
              ]
            }
          },
          {
            "name": "for_account",
            "in": "query",
            "description": "Filter results on for_account",
            "schema": {
              "type": "string",
              "enum": [
                "for_account"
              ]
            }
          },
          {
            "name": "for_type",
            "in": "query",
            "description": "Filter results on for_type",
            "schema": {
              "type": "string",
              "enum": [
                "user",
                "teacher",
                "account",
                "catalog_product",
                "order",
                "catalog_variant"
              ]
            }
          },
          {
            "name": "visibility",
            "in": "query",
            "description": "Filter results on visibility",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "use_as_duplicate_indicator",
            "in": "query",
            "description": "Filter results on use_as_duplicate_indicator",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SignupQuestion"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Get all task records",
        "operationId": "get_tasks",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "tasks"
        ],
        "summary": "Create a task.",
        "operationId": "create_task",
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The title of the task."
                  },
                  "description": {
                    "type": "string",
                    "description": "A string representing the description of the task.",
                    "nullable": true
                  },
                  "due_date": {
                    "type": "string",
                    "nullable": true,
                    "description": "Date when the task must be completed."
                  },
                  "starred": {
                    "type": "boolean",
                    "description": "Boolean if the task is starred."
                  },
                  "assignee_id": {
                    "type": "integer",
                    "nullable": true,
                    "description": "Unique identifier of the assigned user for the task."
                  },
                  "subject_type": {
                    "type": "string",
                    "nullable": true,
                    "description": "Type of the subject.",
                    "enum": [
                      "Course",
                      "Account",
                      "User",
                      "Lead",
                      "Invoice",
                      "PlannedCourse",
                      "Order",
                      "Program::Program",
                      "Program::Edition"
                    ]
                  },
                  "subject_id": {
                    "type": "integer",
                    "nullable": true,
                    "description": "Identifier of the subject."
                  },
                  "completed": {
                    "type": "boolean",
                    "description": "Boolean representing the status of the task. The default value is false."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tasks/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Get a task record",
        "operationId": "get_task_by_id",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "tasks"
        ],
        "summary": "Delete a task.",
        "operationId": "delete_task_by_id",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "tasks"
        ],
        "summary": "Update a task.",
        "operationId": "update_task_by_id",
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The title of the task."
                  },
                  "description": {
                    "type": "string",
                    "description": "A string representing the description of the task.",
                    "nullable": true
                  },
                  "due_date": {
                    "type": "string",
                    "description": "Date when the task must be completed.",
                    "nullable": true
                  },
                  "starred": {
                    "type": "boolean",
                    "description": "Boolean if the task is starred."
                  },
                  "assignee_id": {
                    "type": "integer",
                    "description": "Unique identifier of the assigned user for the task.",
                    "nullable": true
                  },
                  "subject_type": {
                    "type": "string",
                    "description": "Type of the subject.",
                    "nullable": true,
                    "enum": [
                      "Course",
                      "Account",
                      "User",
                      "Lead",
                      "Invoice",
                      "PlannedCourse",
                      "Order",
                      "Program::Program",
                      "Program::Edition"
                    ]
                  },
                  "subject_id": {
                    "type": "integer",
                    "description": "Identifier of the subject.",
                    "nullable": true
                  },
                  "completed": {
                    "type": "boolean",
                    "description": "Boolean representing the status of the task. The default value is false."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/teacher_enrollments": {
      "get": {
        "tags": [
          "teacher_enrollments"
        ],
        "summary": "Get all teacher enrollments.",
        "operationId": "get_teacher_enrollments",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "planned_course_id",
            "in": "query",
            "description": "Filter results on planned_course_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeacherEnrollment"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "teacher_enrollments"
        ],
        "summary": "Enroll a teacher to a planned_course.",
        "operationId": "create_teacher_enrollment",
        "security": [
          {
            "Bearer": [
              "courses:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "planned_course_id",
                  "teacher_id"
                ],
                "type": "object",
                "properties": {
                  "planned_course_id": {
                    "type": "integer",
                    "description": "Unique identifier of the planned course."
                  },
                  "teacher_id": {
                    "type": "integer",
                    "description": "Unique identifier of the teacher."
                  },
                  "teacher_role_id": {
                    "type": "integer",
                    "description": "Unique identifier of the teacher role.\n\n![Teacher Roles](https://img.shields.io/badge/Feature-Teacher_Roles-blue)\n"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeacherEnrollment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/teacher_enrollments/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "delete": {
        "tags": [
          "teacher_enrollments"
        ],
        "summary": "Delete a teacher enrollment.",
        "operationId": "delete_teacher_enrollment_by_id",
        "security": [
          {
            "Bearer": [
              "courses:destroy"
            ]
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "teacher_enrollments"
        ],
        "summary": "Update a teacher enrollment.",
        "operationId": "update_teacher_enrollment_by_id",
        "security": [
          {
            "Bearer": [
              "courses:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "planned_course_id": {
                    "type": "integer",
                    "description": "Unique identifier of the planned course."
                  },
                  "teacher_id": {
                    "type": "integer",
                    "description": "Unique identifier of the teacher."
                  },
                  "teacher_role_id": {
                    "type": "integer",
                    "description": "Unique identifier of the teacher role.\n\n![Teacher Roles](https://img.shields.io/badge/Feature-Teacher_Roles-blue)\n"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeacherEnrollment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/teacher_roles": {
      "get": {
        "tags": [
          "teacher_roles"
        ],
        "summary": "Get all teacher roles",
        "operationId": "get_teacher_roles",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeacherRole"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "teacher_roles"
        ],
        "summary": "Create a teacher role.",
        "operationId": "create_teacher_role",
        "security": [
          {
            "Bearer": [
              "courses:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the teacher role."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeacherRole"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/teacher_roles/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "teacher_roles"
        ],
        "summary": "Get a teacher role",
        "operationId": "get_teacher_role_by_id",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeacherRole"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "teacher_roles"
        ],
        "summary": "Delete a teacher role.",
        "operationId": "delete_teacher_role_by_id",
        "security": [
          {
            "Bearer": [
              "courses:destroy"
            ]
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "teacher_roles"
        ],
        "summary": "Update a teacher role.",
        "operationId": "update_teacher_role_by_id",
        "security": [
          {
            "Bearer": [
              "courses:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the teacher role."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeacherRole"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/teachers": {
      "get": {
        "tags": [
          "teachers"
        ],
        "summary": "Get all teacher records",
        "operationId": "get_teachers",
        "security": [
          {
            "Bearer": [
              "teachers:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Filter results on search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label_id",
            "in": "query",
            "description": "Filter results on label_id",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter results on id",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeacherWithIncludes"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "teachers"
        ],
        "summary": "Create a new teacher",
        "operationId": "create_teacher",
        "security": [
          {
            "Bearer": [
              "teachers:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "user_id": {
                    "type": "integer",
                    "description": "The id of the user to make a teacher"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/teachers/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "teachers"
        ],
        "summary": "Get a teacher record",
        "operationId": "get_teacher_by_id",
        "security": [
          {
            "Bearer": [
              "teachers:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeacherWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/teachers/{id}/activate": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "post": {
        "tags": [
          "teachers"
        ],
        "summary": "Mark teacher as active",
        "operationId": "activate_teacher_by_id",
        "security": [
          {
            "Bearer": [
              "teachers:modify"
            ]
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/teachers/{id}/deactivate": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "post": {
        "tags": [
          "teachers"
        ],
        "summary": "Mark teacher as inactive",
        "operationId": "deactivate_teacher_by_id",
        "security": [
          {
            "Bearer": [
              "teachers:modify"
            ]
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/theses": {
      "get": {
        "tags": [
          "theses"
        ],
        "summary": "Get all thesis records",
        "x-badges": [
          {
            "name": "Beta",
            "color": "#7d15a3",
            "position": "after"
          }
        ],
        "description": "![Program](https://img.shields.io/badge/Feature-Programs-1d8127)\n",
        "operationId": "get_theses",
        "security": [
          {
            "Bearer": [
              "courses:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Thesis"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get all user records",
        "operationId": "get_users",
        "security": [
          {
            "Bearer": [
              "relations:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "role",
            "in": "query",
            "description": "Filter results on role",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Filter results on email",
            "schema": {
              "type": "string",
              "format": "email"
            }
          },
          {
            "name": "label_id",
            "in": "query",
            "description": "Filter results on label_id",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the results. Can change order by using `<sort_by>:<direction>` where `<direction>` is either `asc` or `desc`",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "created_at:asc",
                  "created_at:desc"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserWithIncludes"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create a user.",
        "operationId": "create_user",
        "security": [
          {
            "Bearer": [
              "relations:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "email",
                  "first_name",
                  "last_name"
                ],
                "type": "object",
                "properties": {
                  "first_name": {
                    "type": "string",
                    "description": "First name of the user."
                  },
                  "middle_name": {
                    "type": "string",
                    "description": "Middle name of the user.",
                    "nullable": true
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Last name of the user."
                  },
                  "email": {
                    "type": "string",
                    "description": "The e-mail of the user."
                  },
                  "locale": {
                    "$ref": "#/components/schemas/Locale"
                  },
                  "wants_newsletter": {
                    "type": "boolean",
                    "description": "Boolean representing the possibility of the user to receive newsletters."
                  },
                  "with_authentication": {
                    "type": "boolean",
                    "description": "If the user should be able to login and thus receive login details by mail. Only relevant when creating the user."
                  },
                  "custom": {
                    "type": "object",
                    "properties": {},
                    "description": "The custom properties of the user."
                  },
                  "address_attributes": {
                    "$ref": "#/components/schemas/AddressPayload"
                  },
                  "invoice_address_attributes": {
                    "$ref": "#/components/schemas/AddressPayload"
                  },
                  "label_ids": {
                    "type": "array",
                    "description": "An array containing the identifiers of the labels associated with the user. When updating this array, the existing labels are replaced with the new ones provided.\n",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get an user record",
        "operationId": "get_user_by_id",
        "security": [
          {
            "Bearer": [
              "relations:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Update a user.",
        "operationId": "update_user_by_id",
        "security": [
          {
            "Bearer": [
              "relations:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "first_name": {
                    "type": "string",
                    "description": "First name of the user."
                  },
                  "middle_name": {
                    "type": "string",
                    "description": "Middle name of the user.",
                    "nullable": true
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Last name of the user."
                  },
                  "email": {
                    "type": "string",
                    "description": "The e-mail of the user."
                  },
                  "locale": {
                    "$ref": "#/components/schemas/Locale"
                  },
                  "wants_newsletter": {
                    "type": "boolean",
                    "description": "Boolean representing the possibility of the user to receive newsletters."
                  },
                  "with_authentication": {
                    "type": "boolean",
                    "description": "If the user should be able to login and thus receive login details by mail. Only relevant when creating the user."
                  },
                  "custom": {
                    "type": "object",
                    "properties": {},
                    "description": "The custom properties of the user."
                  },
                  "address_attributes": {
                    "$ref": "#/components/schemas/AddressPatchPayload"
                  },
                  "invoice_address_attributes": {
                    "$ref": "#/components/schemas/AddressPatchPayload"
                  },
                  "label_ids": {
                    "type": "array",
                    "description": "IDs of the labels",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWithIncludes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{user_id}/authentications": {
      "parameters": [
        {
          "name": "user_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "tags": [
          "authentications"
        ],
        "summary": "Get the authentications of an user",
        "operationId": "get_authentications_by_user_id",
        "security": [
          {
            "Bearer": [
              "authentications:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "description": "Filter results on provider",
            "schema": {
              "$ref": "#/components/schemas/AuthenticationProviderType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Authentication"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{user_id}/authentications/{id}": {
      "parameters": [
        {
          "name": "user_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "delete": {
        "tags": [
          "authentications"
        ],
        "summary": "Remove an authentication from a user. NOTE: It is impossible to remove the last authentication for a user.",
        "operationId": "delete_authentication_from_user",
        "security": [
          {
            "Bearer": [
              "authentications:destroy"
            ]
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/webhooks": {
      "get": {
        "tags": [
          "webhooks"
        ],
        "summary": "Get all registered webhooks",
        "operationId": "get_webhooks",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Webhook"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "webhooks"
        ],
        "summary": "Register a webhook.",
        "operationId": "create_webhook",
        "security": [
          {
            "Bearer": [
              "settings:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "url"
                ],
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "The callback url for Eduframe to send a HTTP POST payload to.",
                    "format": "uri"
                  },
                  "active": {
                    "type": "boolean",
                    "description": "State of webhook."
                  },
                  "events": {
                    "type": "array",
                    "description": "Array of events.",
                    "items": {
                      "$ref": "#/components/schemas/WebhookEvent"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/webhooks/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "webhooks"
        ],
        "summary": "Get a registered webhook",
        "operationId": "get_webhook_by_id",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "webhooks"
        ],
        "summary": "Delete a webhook.",
        "operationId": "delete_webhook_by_id",
        "security": [
          {
            "Bearer": [
              "settings:modify"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "webhooks"
        ],
        "summary": "Update a webhook.",
        "operationId": "update_webhook_by_id",
        "security": [
          {
            "Bearer": [
              "settings:modify"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "The callback url for Eduframe to send a HTTP POST payload to."
                  },
                  "active": {
                    "type": "boolean",
                    "description": "State of webhook."
                  },
                  "events": {
                    "type": "array",
                    "description": "Array of events.",
                    "items": {
                      "$ref": "#/components/schemas/WebhookEvent"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/webhooks/{webhook_id}/notifications": {
      "parameters": [
        {
          "name": "webhook_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "webhook-notifications"
        ],
        "summary": "Get the notifications for a specific webhook",
        "operationId": "get_webhook_notifications_by_webhook_id",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookNotificationWithIncludes"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/webhooks/{webhook_id}/notifications/failed": {
      "parameters": [
        {
          "name": "webhook_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "webhook-notifications"
        ],
        "summary": "Get the failed webhook notifications",
        "x-badges": [
          {
            "name": "Beta",
            "color": "#7d15a3",
            "position": "after"
          }
        ],
        "operationId": "get_webhook_notifications_failed",
        "security": [
          {
            "Bearer": [
              "settings:read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "Only show failed notifications created after this date and time",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "Only show failed notifications starting before this date and time",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "$ref": "#/components/parameters/Cursor"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookNotificationFailed"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    },
    "schemas": {
      "AccountType": {
        "type": "string",
        "description": "Helper to identify the type of account. If it is personal, you can also see that since the personal_user_id is set.",
        "enum": [
          "business",
          "personal"
        ]
      },
      "Account": {
        "type": "object",
        "required": [
          "id",
          "name",
          "email",
          "phone",
          "account_type",
          "label_ids",
          "personal_user_id",
          "slug",
          "visible",
          "users_count",
          "updated_at",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the account."
          },
          "name": {
            "type": "string",
            "description": "Arbitrary string representing the name of the account. Is autogenerated for personal accounts."
          },
          "email": {
            "type": "string",
            "nullable": true,
            "format": "email",
            "description": "A string representing the billing e-mail of the account"
          },
          "phone": {
            "type": "string",
            "description": "A string representing the phone number of the account",
            "nullable": true
          },
          "account_type": {
            "readOnly": true,
            "$ref": "#/components/schemas/AccountType"
          },
          "label_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "An array of integers representing unique identifier values associated with labels.\n"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "Country": {
        "type": "string",
        "description": "An ISO3166 two-letter country code.",
        "enum": [
          "AD",
          "AE",
          "AF",
          "AG",
          "AI",
          "AL",
          "AM",
          "AO",
          "AQ",
          "AR",
          "AS",
          "AT",
          "AU",
          "AW",
          "AX",
          "AZ",
          "BA",
          "BB",
          "BD",
          "BE",
          "BF",
          "BG",
          "BH",
          "BI",
          "BJ",
          "BL",
          "BM",
          "BN",
          "BO",
          "BQ",
          "BR",
          "BS",
          "BT",
          "BV",
          "BW",
          "BY",
          "BZ",
          "CA",
          "CC",
          "CD",
          "CF",
          "CG",
          "CH",
          "CI",
          "CK",
          "CL",
          "CM",
          "CN",
          "CO",
          "CR",
          "CU",
          "CV",
          "CW",
          "CX",
          "CY",
          "CZ",
          "DE",
          "DJ",
          "DK",
          "DM",
          "DO",
          "DZ",
          "EC",
          "EE",
          "EG",
          "EH",
          "ER",
          "ES",
          "ET",
          "FI",
          "FJ",
          "FK",
          "FM",
          "FO",
          "FR",
          "GA",
          "GB",
          "GD",
          "GE",
          "GF",
          "GG",
          "GH",
          "GI",
          "GL",
          "GM",
          "GN",
          "GP",
          "GQ",
          "GR",
          "GS",
          "GT",
          "GU",
          "GW",
          "GY",
          "HK",
          "HM",
          "HN",
          "HR",
          "HT",
          "HU",
          "ID",
          "IE",
          "IL",
          "IM",
          "IN",
          "IO",
          "IQ",
          "IR",
          "IS",
          "IT",
          "JE",
          "JM",
          "JO",
          "JP",
          "KE",
          "KG",
          "KH",
          "KI",
          "KM",
          "KN",
          "KP",
          "KR",
          "KW",
          "KY",
          "KZ",
          "LA",
          "LB",
          "LC",
          "LI",
          "LK",
          "LR",
          "LS",
          "LT",
          "LU",
          "LV",
          "LY",
          "MA",
          "MC",
          "MD",
          "ME",
          "MF",
          "MG",
          "MH",
          "MK",
          "ML",
          "MM",
          "MN",
          "MO",
          "MP",
          "MQ",
          "MR",
          "MS",
          "MT",
          "MU",
          "MV",
          "MW",
          "MX",
          "MY",
          "MZ",
          "NA",
          "NC",
          "NE",
          "NF",
          "NG",
          "NI",
          "NL",
          "NO",
          "NP",
          "NR",
          "NU",
          "NZ",
          "OM",
          "PA",
          "PE",
          "PF",
          "PG",
          "PH",
          "PK",
          "PL",
          "PM",
          "PN",
          "PR",
          "PS",
          "PT",
          "PW",
          "PY",
          "QA",
          "RE",
          "RO",
          "RS",
          "RU",
          "RW",
          "SA",
          "SB",
          "SC",
          "SD",
          "SE",
          "SG",
          "SH",
          "SI",
          "SJ",
          "SK",
          "SL",
          "SM",
          "SN",
          "SO",
          "SR",
          "SS",
          "ST",
          "SV",
          "SX",
          "SY",
          "SZ",
          "TC",
          "TD",
          "TF",
          "TG",
          "TH",
          "TJ",
          "TK",
          "TL",
          "TM",
          "TN",
          "TO",
          "TR",
          "TT",
          "TV",
          "TW",
          "TZ",
          "UA",
          "UG",
          "UM",
          "US",
          "UY",
          "UZ",
          "VA",
          "VC",
          "VE",
          "VG",
          "VI",
          "VN",
          "VU",
          "WF",
          "WS",
          "YE",
          "YT",
          "ZA",
          "ZM",
          "ZW"
        ]
      },
      "UsaState": {
        "type": "string",
        "description": "An letter USA state code.",
        "nullable": true,
        "enum": [
          "AL",
          "AK",
          "AZ",
          "AR",
          "CA",
          "CO",
          "CT",
          "DC",
          "DE",
          "FL",
          "GA",
          "HI",
          "ID",
          "IL",
          "IN",
          "IA",
          "KS",
          "KY",
          "LA",
          "ME",
          "MD",
          "MA",
          "MI",
          "MN",
          "MS",
          "MO",
          "MT",
          "NE",
          "NV",
          "NH",
          "NJ",
          "NM",
          "NY",
          "NC",
          "ND",
          "OH",
          "OK",
          "OR",
          "PA",
          "RI",
          "SC",
          "SD",
          "TN",
          "TX",
          "UT",
          "VT",
          "VA",
          "WA",
          "WV",
          "WI",
          "WY"
        ]
      },
      "Address": {
        "type": "object",
        "nullable": true,
        "description": "The Account Address",
        "required": [
          "addressee",
          "address",
          "address_line2",
          "postal_code",
          "city",
          "country",
          "state_province"
        ],
        "properties": {
          "addressee": {
            "type": "string",
            "description": "The addressee of the address.",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "Concatenation of the street and house number."
          },
          "address_line2": {
            "type": "string",
            "description": "A string representing the second line of the address.",
            "nullable": true
          },
          "postal_code": {
            "type": "string",
            "description": "A string representing the postal code."
          },
          "city": {
            "type": "string",
            "description": "A string representing the city."
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "state_province": {
            "$ref": "#/components/schemas/UsaState"
          }
        },
        "additionalProperties": false
      },
      "AccountWithIncludes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Account"
          },
          {
            "type": "object",
            "properties": {
              "custom": {
                "type": "object",
                "properties": {},
                "description": "The custom properties of the user."
              },
              "address": {
                "$ref": "#/components/schemas/Address"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Error": {
        "required": [
          "code",
          "errors",
          "message"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "properties": {},
            "description": "An object of all the errors that occurred including failed the model validations"
          },
          "code": {
            "type": "number",
            "description": "The HTTP status code of the response"
          },
          "message": {
            "type": "string",
            "description": "A sort of human readable error message"
          }
        }
      },
      "AddressPayload": {
        "type": "object",
        "nullable": true,
        "required": [
          "address",
          "city",
          "country",
          "postal_code"
        ],
        "properties": {
          "addressee": {
            "type": "string",
            "description": "The addressee of the address.",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "Concatenation of the street and house number."
          },
          "address_line2": {
            "type": "string",
            "description": "A string representing the second line of the address.",
            "nullable": true
          },
          "postal_code": {
            "type": "string",
            "description": "A string representing the postal code."
          },
          "city": {
            "type": "string",
            "description": "A string representing the city."
          },
          "state_province": {
            "$ref": "#/components/schemas/UsaState"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          }
        }
      },
      "Affiliation": {
        "type": "object",
        "required": [
          "id",
          "account_id",
          "user_id",
          "key_contact",
          "updated_at",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the affiliation record."
          },
          "account_id": {
            "type": "integer",
            "description": "Unique identifier of the associated account"
          },
          "user_id": {
            "type": "integer",
            "description": "Unique identifier of the associated user"
          },
          "key_contact": {
            "type": "boolean",
            "default": false,
            "description": "Boolean indicating if this user is a key contact of the account."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "AttendanceState": {
        "type": "string",
        "description": "Indicator of the attendance state.",
        "enum": [
          "absent",
          "absent_with_leave",
          "attended",
          "blanco",
          "late"
        ]
      },
      "Attendance": {
        "type": "object",
        "required": [
          "id",
          "meeting_id",
          "enrollment_id",
          "state",
          "comment",
          "updated_at",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the attendance record."
          },
          "meeting_id": {
            "type": "integer",
            "description": "Unique identifier of the meeting."
          },
          "enrollment_id": {
            "type": "integer",
            "description": "Unique identifier of the enrollment."
          },
          "state": {
            "$ref": "#/components/schemas/AttendanceState"
          },
          "comment": {
            "type": "string",
            "description": "Comment about this attendance.",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "AuthenticationProviderType": {
        "type": "string",
        "description": "Type of the associated AuthenticationProvider.",
        "enum": [
          "azure_active_directory",
          "eduframe",
          "openid_connect",
          "surf_conext"
        ]
      },
      "Authentication": {
        "type": "object",
        "required": [
          "id",
          "authentication_provider_id",
          "otp_enabled",
          "uid",
          "user_id",
          "updated_at",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the authentication."
          },
          "user_id": {
            "type": "integer",
            "description": "Identifier of the associated User."
          },
          "authentication_provider_id": {
            "type": "integer",
            "description": "Unique identifier of the authentication provider"
          },
          "uid": {
            "type": "string",
            "description": "Login identifier."
          },
          "otp_enabled": {
            "type": "boolean",
            "description": "Whether or not the user has enabled two factor authentication."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "CostScheme": {
        "type": "string",
        "description": "How should the variant be paid by default.",
        "enum": [
          "free",
          "order",
          "student",
          "tbd"
        ]
      },
      "Currency": {
        "type": "string",
        "description": "An ISO4217 currency code.",
        "enum": [
          "EUR",
          "GBP",
          "ISK",
          "USD"
        ]
      },
      "ProductableType": {
        "type": "string",
        "description": "The product type.",
        "enum": [
          "Course",
          "Program::Program"
        ]
      },
      "Product": {
        "type": "object",
        "required": [
          "avatar",
          "category_id",
          "conditions_or_default",
          "cost",
          "cost_scheme",
          "created_at",
          "currency",
          "id",
          "is_published",
          "label_ids",
          "name",
          "position",
          "productable_id",
          "productable_type",
          "show_on_website",
          "signup_url",
          "slug",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the catalog product."
          },
          "name": {
            "type": "string",
            "description": "Name of the product."
          },
          "slug": {
            "type": "string",
            "description": "Slug of the product."
          },
          "label_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "An array of integers representing unique identifier values associated with labels.\n"
          },
          "cost_scheme": {
            "$ref": "#/components/schemas/CostScheme"
          },
          "cost": {
            "type": "string",
            "description": "Cost of the product.",
            "nullable": true
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "productable_type": {
            "$ref": "#/components/schemas/ProductableType"
          },
          "productable_id": {
            "type": "integer",
            "description": "Unique identifier of the productable."
          },
          "avatar": {
            "type": "string",
            "description": "URL to the original avatar image file."
          },
          "position": {
            "type": "integer",
            "description": "Sorting position of the element. Lower is higher."
          },
          "conditions_or_default": {
            "type": "string",
            "nullable": true,
            "description": "Conditions for this product with a fallback to the default course conditions of the educator."
          },
          "category_id": {
            "type": "integer",
            "description": "Identifier of the category of the course."
          },
          "is_published": {
            "type": "boolean",
            "description": "Boolean showing if the product is published or not."
          },
          "show_on_website": {
            "type": "boolean",
            "description": "Boolean showing if the product is shown on the website or not.",
            "readOnly": true
          },
          "signup_url": {
            "type": "string",
            "description": "URL to the signup page for this course.",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "CourseTabContent": {
        "type": "object",
        "required": [
          "id",
          "course_tab_id",
          "content"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the course tab content."
          },
          "course_tab_id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the course tab."
          },
          "content": {
            "type": "string",
            "nullable": true,
            "description": "The HTML content of the course tab."
          }
        },
        "additionalProperties": false
      },
      "CustomAssociationWithRecords": {
        "type": "object",
        "required": [
          "associable_type",
          "custom_association_id",
          "custom_record_ids"
        ],
        "properties": {
          "associable_type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the associated system model in slug format."
          },
          "custom_association_id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier for the custom association."
          },
          "custom_object_id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier for the custom object."
          },
          "custom_record_ids": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "integer"
            },
            "description": "List of custom record identifiers linked."
          }
        }
      },
      "ProductWithIncludes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Product"
          },
          {
            "type": "object",
            "properties": {
              "course_tab_contents": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CourseTabContent"
                }
              },
              "custom": {
                "type": "object",
                "properties": {},
                "description": "The custom properties of the product."
              },
              "custom_associations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomAssociationWithRecords"
                },
                "description": "The custom associations linked to the catalog product.\n\n![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)\n![Beta](https://img.shields.io/badge/Beta-7d15a3)\n"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "VariantableType": {
        "type": "string",
        "description": "The type of the catalog variant.",
        "enum": [
          "PlannedCourse",
          "Program::Edition"
        ]
      },
      "Variant": {
        "type": "object",
        "required": [
          "availability",
          "available_places",
          "cost",
          "cost_scheme",
          "created_at",
          "currency",
          "id",
          "is_published",
          "show_on_website",
          "name",
          "product_id",
          "updated_at",
          "variantable_id",
          "variantable_type"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the catalog variant."
          },
          "product_id": {
            "type": "integer",
            "description": "Unique identifier of the catalog product."
          },
          "name": {
            "type": "string",
            "description": "Name of the catalog variant."
          },
          "sku": {
            "type": "string",
            "description": "An optional unique identifier of the catalog variant.",
            "nullable": true
          },
          "cost_scheme": {
            "$ref": "#/components/schemas/CostScheme"
          },
          "cost": {
            "type": "string",
            "nullable": true,
            "description": "Cost of the variant."
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "variantable_type": {
            "$ref": "#/components/schemas/VariantableType"
          },
          "variantable_id": {
            "type": "integer",
            "description": "Unique identifier of the variantable."
          },
          "availability": {
            "type": "string",
            "description": "Availability of the catalog variant.",
            "enum": [
              "available",
              "limited_availability",
              "not_available"
            ]
          },
          "available_places": {
            "type": "integer",
            "description": "Number of available places."
          },
          "is_published": {
            "type": "boolean",
            "description": "Boolean showing if the variant is published or not."
          },
          "show_on_website": {
            "type": "boolean",
            "description": "Boolean showing if the variant is shown on the website or not.",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "VariantWithIncludes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Variant"
          },
          {
            "type": "object",
            "properties": {
              "custom": {
                "type": "object",
                "properties": {},
                "description": "The custom properties of the product."
              },
              "custom_associations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomAssociationWithRecords"
                },
                "description": "The custom associations linked to the catalog variant.\n\n![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)\n![Beta](https://img.shields.io/badge/Beta-7d15a3)\n"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Category": {
        "type": "object",
        "required": [
          "id",
          "name",
          "position",
          "is_published",
          "parent_id",
          "slug",
          "avatar",
          "avatar_url",
          "description",
          "meta_title",
          "meta_description",
          "products_count",
          "children_count",
          "courses_count",
          "updated_at",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the category."
          },
          "name": {
            "type": "string",
            "description": "Title of the category."
          },
          "position": {
            "type": "integer",
            "description": "Sorting position of the category. Lower is higher."
          },
          "avatar": {
            "type": "string",
            "description": "URL to the original avatar image file."
          },
          "avatar_url": {
            "type": "string",
            "description": "URL to a resized avatar image (300x200^)."
          },
          "slug": {
            "type": "string",
            "description": "Friendly identifier of a category."
          },
          "description": {
            "type": "string",
            "description": "The description of the category.",
            "nullable": true
          },
          "is_published": {
            "type": "boolean",
            "description": "Boolean if the category is published on the website."
          },
          "parent_id": {
            "type": "integer",
            "nullable": true,
            "description": "Unique identifier of the parent category"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "CommentType": {
        "type": "string",
        "enum": [
          "Account",
          "Invoice",
          "Lead",
          "Order",
          "PlannedCourse",
          "Program::Editions::Edition",
          "Task",
          "User"
        ]
      },
      "Comment": {
        "type": "object",
        "required": [
          "id",
          "content",
          "creator_id",
          "updated_at",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the comment."
          },
          "content": {
            "type": "string",
            "description": "A string representing the content of a comment."
          },
          "creator_id": {
            "type": "integer",
            "nullable": true,
            "description": "Unique identifier of the creator of the comment."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "CourseLocation": {
        "type": "object",
        "required": [
          "id",
          "name",
          "updated_at",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the course location"
          },
          "name": {
            "type": "string",
            "description": "Name of the location where the course is held."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "CourseLocationWithIncludes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CourseLocation"
          },
          {
            "type": "object",
            "properties": {
              "address": {
                "$ref": "#/components/schemas/Address"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "AddressPatchPayload": {
        "type": "object",
        "nullable": true,
        "properties": {
          "addressee": {
            "type": "string",
            "description": "The addressee of the address.",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "Concatenation of the street and house number."
          },
          "address_line2": {
            "type": "string",
            "description": "A string representing the second line of the address.",
            "nullable": true
          },
          "postal_code": {
            "type": "string",
            "description": "A string representing the postal code."
          },
          "city": {
            "type": "string",
            "description": "A string representing the city."
          },
          "state_province": {
            "$ref": "#/components/schemas/UsaState"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          }
        }
      },
      "CourseTab": {
        "type": "object",
        "required": [
          "id",
          "name",
          "position"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the course tab."
          },
          "name": {
            "type": "string",
            "description": "The name of the course tab."
          },
          "position": {
            "type": "integer",
            "description": "The position of the course tab."
          }
        },
        "additionalProperties": false
      },
      "CourseVariant": {
        "type": "object",
        "required": [
          "id",
          "name",
          "updated_at",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the course variant"
          },
          "name": {
            "type": "string",
            "description": "The name of the course variant."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "Course": {
        "type": "object",
        "required": [
          "avatar",
          "avatar_thumb_url",
          "avatar_url",
          "category_id",
          "certificate_template_id",
          "code",
          "conditions_or_default",
          "cost",
          "cost_scheme",
          "created_at",
          "id",
          "is_published",
          "label_ids",
          "meta_description",
          "meta_title",
          "name",
          "position",
          "signup_url",
          "slug",
          "slug_history",
          "starting_price",
          "updated_at",
          "website_url"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the course"
          },
          "position": {
            "type": "integer",
            "description": "Sorting position of the course. Lower is higher."
          },
          "starting_price": {
            "type": "string",
            "description": "Lowest price of all of its planned courses."
          },
          "signup_url": {
            "type": "string",
            "description": "URL to the signup page for this course."
          },
          "slug": {
            "type": "string",
            "description": "Human readable identifier, unique per educator."
          },
          "slug_history": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string"
            },
            "description": "List of old slugs, old calls will be redirected."
          },
          "avatar": {
            "type": "string",
            "description": "URL to the original avatar image file."
          },
          "avatar_url": {
            "type": "string",
            "description": "URL to a resized avatar image (300x200^)."
          },
          "avatar_thumb_url": {
            "type": "string",
            "description": "URL to a resized avatar image (748x296^)."
          },
          "conditions_or_default": {
            "type": "string",
            "nullable": true,
            "description": "Conditions for this course with a fallback to the default course conditions of the educator."
          },
          "website_url": {
            "type": "string",
            "nullable": true,
            "description": "Expected URL of the course on the educator website."
          },
          "certificate_template_id": {
            "type": "integer",
            "nullable": true,
            "description": "Identifier of the optionally linked certificate template."
          },
          "category_id": {
            "type": "integer",
            "description": "Identifier of the category of the course."
          },
          "name": {
            "type": "string",
            "description": "The name of the course."
          },
          "code": {
            "type": "string",
            "description": "The code of the course."
          },
          "duration": {
            "type": "string",
            "description": "The duration of the course.",
            "nullable": true
          },
          "level": {
            "type": "string",
            "description": "A string indicating the level of the course.",
            "nullable": true
          },
          "meta_title": {
            "type": "string",
            "description": "Meta title of the course for SEO purposes.",
            "nullable": true
          },
          "meta_description": {
            "type": "string",
            "description": "Meta description of the course for SEO purposes.",
            "nullable": true
          },
          "result": {
            "type": "string",
            "description": "The result of the course",
            "nullable": true
          },
          "label_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "An array of integers representing unique identifier values associated with labels.\n"
          },
          "cost": {
            "type": "string",
            "description": "The price to be paid for this course.",
            "nullable": true
          },
          "cost_scheme": {
            "$ref": "#/components/schemas/CostScheme"
          },
          "is_published": {
            "type": "boolean",
            "description": "Boolean representing the publishable status of the course."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "CourseWithIncludes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Course"
          },
          {
            "type": "object",
            "required": [
              "custom",
              "label_ids"
            ],
            "properties": {
              "custom": {
                "type": "object",
                "properties": {},
                "description": "The custom properties of the program.",
                "example": {
                  "custom_field1": "value",
                  "custom_field2": "value"
                }
              },
              "label_ids": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "An array of integers representing unique identifier values associated with labels.\n"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "CustomAssociationsRecordsPayload": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "custom_association_id",
          "custom_record_ids"
        ],
        "properties": {
          "custom_association_id": {
            "type": "integer",
            "description": "The unique identifier of the association."
          },
          "custom_record_ids": {
            "description": "List of custom record identifiers linked.",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "CoursePayload": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "category_id",
          "code",
          "name"
        ],
        "properties": {
          "category_id": {
            "type": "integer",
            "description": "Identifier of the category of the course."
          },
          "name": {
            "type": "string",
            "description": "The name of the course."
          },
          "code": {
            "type": "string",
            "description": "The code of the course."
          },
          "cost_scheme": {
            "type": "string",
            "description": "How should the course be paid by default.",
            "enum": [
              "student",
              "order",
              "tbd",
              "free"
            ]
          },
          "cost": {
            "type": "string",
            "description": "The price to be paid for this course. Required if cost_scheme is student (default value) or order.",
            "nullable": true
          },
          "meta_title": {
            "type": "string",
            "description": "Meta title of the course for SEO purposes.",
            "nullable": true
          },
          "meta_description": {
            "type": "string",
            "description": "Meta description of the course for SEO purposes.",
            "nullable": true
          },
          "is_published": {
            "type": "boolean",
            "description": "Boolean representing the publishable status of the course."
          },
          "custom": {
            "type": "object",
            "properties": {},
            "description": "The custom properties of the course."
          },
          "custom_associations": {
            "type": "array",
            "description": "Custom associations are a way to link custom records to a course.\n\n![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)\n",
            "items": {
              "$ref": "#/components/schemas/CustomAssociationsRecordsPayload"
            }
          },
          "course_tab_contents_attributes": {
            "type": "array",
            "items": {
              "required": [
                "content",
                "course_tab_id"
              ],
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "description": "The HTML content of the course tab.",
                  "nullable": true
                },
                "course_tab_id": {
                  "type": "integer",
                  "description": "Unique identifier of the course tab."
                }
              }
            }
          }
        }
      },
      "CoursePatchPayload": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "category_id": {
            "type": "integer",
            "description": "Identifier of the category of the course."
          },
          "name": {
            "type": "string",
            "description": "The name of the course."
          },
          "code": {
            "type": "string",
            "description": "The code of the course."
          },
          "duration": {
            "type": "string",
            "description": "The duration of the course.",
            "nullable": true
          },
          "level": {
            "type": "string",
            "description": "A string indicating the level of the course.",
            "nullable": true
          },
          "meta_title": {
            "type": "string",
            "description": "Meta title of the course for SEO purposes.",
            "nullable": true
          },
          "meta_description": {
            "type": "string",
            "description": "Meta description of the course for SEO purposes.",
            "nullable": true
          },
          "result": {
            "type": "string",
            "description": "The result of the course",
            "nullable": true
          },
          "cost": {
            "type": "string",
            "description": "The price to be paid for this course.",
            "nullable": true
          },
          "cost_scheme": {
            "type": "string",
            "description": "How should the course be paid by default.",
            "enum": [
              "student",
              "order",
              "tbd",
              "free"
            ]
          },
          "is_published": {
            "type": "boolean",
            "description": "Boolean representing the publishable status of the course."
          },
          "conditions": {
            "type": "string",
            "description": "The conditions of the course."
          },
          "custom": {
            "type": "object",
            "properties": {},
            "description": "The custom properties of the program."
          },
          "custom_associations": {
            "type": "array",
            "description": "The new set of custom records linked to a course.\n\n![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)\n",
            "items": {
              "$ref": "#/components/schemas/CustomAssociationsRecordsPayload"
            }
          },
          "course_tab_contents_attributes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Unique identifier of the course tab content."
                },
                "content": {
                  "type": "string",
                  "description": "The HTML content of the course tab.",
                  "nullable": true
                },
                "course_tab_id": {
                  "type": "integer",
                  "description": "Unique identifier of the course tab."
                }
              }
            }
          }
        }
      },
      "AvailabilityState": {
        "type": "string",
        "description": "By default this is just +open+.\nHowever, you can make this planned course available for a subset of accounts.\nIf that's the case the state is +closed+.\n",
        "enum": [
          "open",
          "closed"
        ]
      },
      "PlannedCourseStatus": {
        "type": "string",
        "description": "State of the planned course",
        "enum": [
          "planned",
          "active",
          "completed",
          "canceled"
        ]
      },
      "PlannedCourse": {
        "type": "object",
        "required": [
          "availability_state",
          "available_places",
          "confirmed_active_and_completed_enrollments_count",
          "cost",
          "cost_multiplier",
          "cost_scheme",
          "course_id",
          "course_location_id",
          "course_variant_id",
          "created_at",
          "currency",
          "current_participants",
          "duration_in_days",
          "end_date",
          "id",
          "is_published",
          "max_participants",
          "min_participants",
          "payable",
          "requested_enrollments_count",
          "start_date",
          "status",
          "type",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the user."
          },
          "status": {
            "$ref": "#/components/schemas/PlannedCourseStatus"
          },
          "duration_in_days": {
            "type": "integer",
            "description": "The period of time of the planned course.\nFor flexible planned courses this equals the provided +duration+.\nFor fixed planned courses this equals the number of meetings if any,\nif the fixed planned course has no meetings, it's the number of days between the start and end date.\n",
            "nullable": true
          },
          "availability_state": {
            "$ref": "#/components/schemas/AvailabilityState"
          },
          "payable": {
            "type": "boolean",
            "description": "Boolean wether there are payments involved for this course.\nBasically its true if the cost_scheme is +student+ or +order+.\n"
          },
          "current_participants": {
            "type": "integer",
            "description": "The current amount of participants."
          },
          "confirmed_active_and_completed_enrollments_count": {
            "type": "integer",
            "description": "The amount of confirmed active and completed enrollments."
          },
          "requested_enrollments_count": {
            "type": "integer",
            "description": "The amount of requested enrollments. ie. the number of reserved seats"
          },
          "available_places": {
            "type": "boolean",
            "description": "Boolean if there are any places available."
          },
          "canvas_link": {
            "type": "string",
            "description": "URL to the course in canvas. Is only returned if available.",
            "nullable": true
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "cost_multiplier": {
            "type": "string",
            "nullable": true,
            "description": "A positive float representing the multiplier for the VAT.\nSay you have 21% VAT, this will return +1.21+.\n"
          },
          "is_published": {
            "type": "boolean",
            "description": "Boolean if is published on the website."
          },
          "course_id": {
            "type": "integer",
            "description": "Unique identifier of the course."
          },
          "type": {
            "type": "string",
            "description": "The type of the course.",
            "enum": [
              "FixedPlannedCourse",
              "FlexiblePlannedCourse"
            ]
          },
          "start_date": {
            "type": "string",
            "description": "Date at which the planned course starts. Only needed for fixed planned courses."
          },
          "end_date": {
            "type": "string",
            "nullable": true,
            "description": "Date at which the planned course ends. Only needed for fixed planned courses."
          },
          "min_participants": {
            "type": "integer",
            "description": "A number representing the minimum number of participants that can enroll for the planned course.",
            "nullable": true
          },
          "max_participants": {
            "type": "integer",
            "description": "A number representing the maximum number of participants that can enroll for the planned course.",
            "nullable": true
          },
          "cost_scheme": {
            "$ref": "#/components/schemas/CostScheme"
          },
          "cost": {
            "type": "string",
            "nullable": true,
            "description": "A positive float representing the price of the planned course."
          },
          "course_variant_id": {
            "type": "integer",
            "nullable": true,
            "description": "Unique identifier of the course variant."
          },
          "course_location_id": {
            "type": "integer",
            "nullable": true,
            "description": "Unique identifier of the course location."
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "PlannedCourseWithIncludes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PlannedCourse"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CreditCategory": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the credit category."
          },
          "name": {
            "type": "string",
            "description": "Name of the credit category."
          }
        },
        "additionalProperties": false
      },
      "CreditType": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the credit type."
          },
          "name": {
            "type": "string",
            "description": "Name of the credit type."
          }
        },
        "additionalProperties": false
      },
      "CreditCategoryWithIncludes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreditCategory"
          },
          {
            "type": "object",
            "required": [
              "types"
            ],
            "properties": {
              "types": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreditType"
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Credit": {
        "type": "object",
        "required": [
          "id",
          "student_id",
          "credits",
          "description",
          "course_id",
          "enrollment_id",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the credit."
          },
          "student_id": {
            "type": "integer",
            "description": "Unique identifier of the orders Student (User)."
          },
          "credits": {
            "type": "number",
            "description": "The amount of awarded credits."
          },
          "description": {
            "type": "string",
            "description": "Description of the awarded credits.",
            "nullable": true
          },
          "course_id": {
            "type": "integer",
            "nullable": true,
            "description": "Unique identifier of the Course."
          },
          "enrollment_id": {
            "type": "integer",
            "nullable": true,
            "description": "Unique identifier of the Enrollment."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "CustomObject": {
        "type": "object",
        "required": [
          "id",
          "name_singular",
          "name_plural"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier of the custom object"
          },
          "name_singular": {
            "type": "string",
            "description": "The singular name of the custom object"
          },
          "name_plural": {
            "type": "string",
            "description": "The plural name of the custom object"
          }
        }
      },
      "CustomAssociation": {
        "type": "object",
        "required": [
          "id",
          "custom_object"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "The unique identifier of the association."
          },
          "custom_object": {
            "$ref": "#/components/schemas/CustomObject"
          }
        }
      },
      "CustomFieldOption": {
        "type": "object",
        "required": [
          "id",
          "value",
          "enabled"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the custom field."
          },
          "value": {
            "type": "string",
            "description": "The value of the option"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the option can be chosen or not"
          }
        },
        "additionalProperties": false
      },
      "CustomFieldOptionPayload": {
        "type": "object",
        "required": [
          "value",
          "enabled"
        ],
        "properties": {
          "value": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the option can be chosen or not"
          }
        },
        "additionalProperties": false
      },
      "CustomFieldOptionPatchPayload": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the option can be chosen or not"
          }
        },
        "additionalProperties": false
      },
      "SignupQuestionFieldType": {
        "type": "string",
        "description": "The type of field.",
        "enum": [
          "boolean",
          "datepicker",
          "decimal",
          "phone",
          "select",
          "multiselect",
          "ssn",
          "string",
          "text",
          "vat_number"
        ]
      },
      "CustomObjectField": {
        "required": [
          "id",
          "slug",
          "title",
          "field_type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the question."
          },
          "slug": {
            "type": "string",
            "readOnly": true,
            "description": "The slug of the custom field"
          },
          "title": {
            "type": "string",
            "description": "The title and label of the question"
          },
          "field_type": {
            "$ref": "#/components/schemas/SignupQuestionFieldType"
          }
        }
      },
      "CustomObjectWithFields": {
        "type": "object",
        "required": [
          "id",
          "name_singular",
          "name_plural",
          "fields"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier of the custom object"
          },
          "name_singular": {
            "type": "string",
            "description": "The singular name of the custom object"
          },
          "name_plural": {
            "type": "string",
            "description": "The plural name of the custom object"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomObjectField"
            }
          }
        }
      },
      "CustomFieldValue": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "number"
          },
          {
            "type": "boolean"
          },
          {
            "type": "string",
            "format": "date",
            "title": "date"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ]
      },
      "CustomRecord": {
        "type": "object",
        "required": [
          "id",
          "active",
          "display_name",
          "properties"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the custom record."
          },
          "active": {
            "type": "boolean",
            "description": "Whether the custom record is active."
          },
          "display_name": {
            "type": "string",
            "description": "The display name of the custom record."
          },
          "properties": {
            "type": "object",
            "description": "The JSON properties of the custom record.",
            "additionalProperties": {
              "$ref": "#/components/schemas/CustomFieldValue"
            }
          }
        },
        "additionalProperties": false
      },
      "CustomRecordPayload": {
        "type": "object",
        "required": [
          "display_name",
          "properties"
        ],
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Whether the custom record is active.",
            "default": true
          },
          "display_name": {
            "type": "string",
            "description": "The display name of the custom record."
          },
          "properties": {
            "type": "object",
            "description": "The JSON properties of the custom record.",
            "additionalProperties": {
              "$ref": "#/components/schemas/CustomFieldValue"
            }
          }
        },
        "additionalProperties": false
      },
      "CustomRecordPatchPayload": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Whether the custom record is active."
          },
          "display_name": {
            "type": "string",
            "description": "The display name of the custom record."
          },
          "properties": {
            "type": "object",
            "description": "The JSON properties of the custom record.",
            "additionalProperties": {
              "$ref": "#/components/schemas/CustomFieldValue"
            }
          }
        },
        "additionalProperties": false
      },
      "DiscountCode": {
        "type": "object",
        "required": [
          "id",
          "name",
          "discount_code",
          "discount_type",
          "amount",
          "max_usage",
          "usage_count",
          "start_date",
          "expiration_date"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the discount code."
          },
          "name": {
            "type": "string",
            "description": "The name of the discount code."
          },
          "discount_code": {
            "type": "string",
            "description": "The discount code."
          },
          "discount_type": {
            "type": "string",
            "enum": [
              "fixed",
              "percentage"
            ],
            "description": "The type of discount, which can be a fixed amount or a percentage."
          },
          "amount": {
            "type": "number",
            "description": "The amount of the discount."
          },
          "max_usage": {
            "type": "integer",
            "description": "The maximum number of times the discount code can be used.",
            "nullable": true
          },
          "usage_count": {
            "type": "integer",
            "description": "The number of times the discount code has been used."
          },
          "start_date": {
            "type": "string",
            "format": "date",
            "description": "The start date of the discount code."
          },
          "expiration_date": {
            "type": "string",
            "format": "date",
            "description": "The expiration date of the discount code."
          }
        },
        "additionalProperties": false
      },
      "Locale": {
        "type": "string",
        "nullable": true,
        "enum": [
          "de",
          "en",
          "en-GB",
          "en-US",
          "es",
          "is",
          "nl"
        ]
      },
      "Educator": {
        "type": "object",
        "required": [
          "id",
          "name",
          "country",
          "currency",
          "default_invoice_vat_multiplier",
          "email",
          "phone",
          "signup_contact_info",
          "signup_default_account_type",
          "slug",
          "standard_planning_text",
          "time_zone",
          "website_url"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the educator."
          },
          "slug": {
            "type": "string",
            "readOnly": true,
            "description": "Unique human readable identifier of the educator."
          },
          "standard_planning_text": {
            "type": "string",
            "description": "Text that is shown by default on the planning page and signup.",
            "nullable": true
          },
          "default_invoice_vat_multiplier": {
            "type": "string",
            "nullable": true,
            "description": "Default VAT multiplier of the educator."
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the educator.",
            "nullable": true
          },
          "website_url": {
            "type": "string",
            "description": "Website URL of the educator.",
            "nullable": true
          },
          "signup_default_account_type": {
            "type": "string",
            "description": "What is de default selected account type on the signup page.",
            "enum": [
              "personal",
              "business"
            ]
          },
          "signup_contact_info": {
            "type": "string",
            "description": "The contact info shown on the signup form (for directing questions to).",
            "nullable": true
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "email": {
            "type": "string",
            "description": "The email (reply to) of the educator.",
            "nullable": true
          },
          "time_zone": {
            "type": "string",
            "description": "Time zone identifier of the educator."
          },
          "name": {
            "type": "string",
            "description": "The name of the educator."
          },
          "locale": {
            "$ref": "#/components/schemas/Locale"
          },
          "terms_url": {
            "type": "string",
            "description": "URL to the terms and conditions of the educator."
          }
        },
        "additionalProperties": false
      },
      "EducatorWithIncludes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Educator"
          },
          {
            "type": "object",
            "properties": {
              "invoice_address": {
                "$ref": "#/components/schemas/Address"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "EnrollmentStatus": {
        "type": "string",
        "description": "The status of the enrollment.",
        "enum": [
          "active",
          "canceled",
          "completed",
          "confirmed"
        ]
      },
      "GraduationState": {
        "type": "string",
        "description": "The graduation state of the enrollment.",
        "enum": [
          "awaiting_judgement",
          "failed",
          "passed"
        ]
      },
      "Enrollment": {
        "type": "object",
        "required": [
          "id",
          "student_id",
          "planned_course_id",
          "order_id",
          "start_date",
          "end_date",
          "status",
          "graduation_state",
          "updated_at",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the enrollment."
          },
          "student_id": {
            "type": "integer",
            "description": "Unique identifier of the student."
          },
          "planned_course_id": {
            "type": "integer",
            "description": "Unique identifier of the planned course."
          },
          "order_id": {
            "type": "integer",
            "nullable": true,
            "description": "Unique identifier of the order."
          },
          "start_date": {
            "type": "string",
            "format": "date",
            "description": "If it is an enrollment of a fixed course, it equals the start date. For a flexible course, it returns the enrollment specific start date."
          },
          "end_date": {
            "type": "string",
            "nullable": true,
            "format": "date",
            "description": "If it is an enrollment of a fixed course, it equals the end date. For a flexible course, it returns the enrollment specific end date."
          },
          "status": {
            "$ref": "#/components/schemas/EnrollmentStatus"
          },
          "graduation_state": {
            "$ref": "#/components/schemas/GraduationState"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "Grade": {
        "type": "object",
        "nullable": true,
        "required": [
          "id",
          "grader_id",
          "comment",
          "grade",
          "gradeable_id",
          "gradeable_type",
          "result",
          "score",
          "updated_at",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the grade"
          },
          "grader_id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the user that awarded this grade"
          },
          "result": {
            "type": "string",
            "description": "The actual grade which is either the grade or the score"
          },
          "grade": {
            "type": "string",
            "nullable": true,
            "description": "The grade awarded (at least one of grade and score is required)"
          },
          "score": {
            "type": "string",
            "nullable": true,
            "description": "The score awarded (at least one of grade and score is required)"
          },
          "gradeable_id": {
            "type": "integer",
            "description": "Unique model identifier of the gradeable (enrollment / ...)"
          },
          "gradeable_type": {
            "type": "string",
            "description": "Model type of the gradeable (enrollment / ...)"
          },
          "comment": {
            "type": "string",
            "description": "Additional comment about the grade",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "EnrollmentWithIncludes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Enrollment"
          },
          {
            "type": "object",
            "properties": {
              "grade": {
                "$ref": "#/components/schemas/Grade"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "InvoiceVat": {
        "type": "object",
        "required": [
          "id",
          "name",
          "percentage",
          "has_vat"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique idenitfier of the invoice vat."
          },
          "name": {
            "type": "string",
            "description": "Name of the invoice vat."
          },
          "percentage": {
            "type": "string",
            "description": "Number representing the VAT percentage."
          },
          "has_vat": {
            "type": "boolean",
            "description": "Boolean indicating whether the invoice vat has VAT."
          }
        },
        "additionalProperties": false
      },
      "InvoiceVatWithIncludes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InvoiceVat"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "InvoiceStatus": {
        "type": "string",
        "description": "The status of the invoice. The initial status will always be concept.",
        "enum": [
          "concept",
          "expired",
          "open",
          "paid"
        ]
      },
      "Invoice": {
        "type": "object",
        "required": [
          "account_id",
          "account_name",
          "created_at",
          "currency",
          "description",
          "expiration_date",
          "feature",
          "footnote",
          "id",
          "number",
          "number_int",
          "opened_at",
          "order_id",
          "order_number",
          "pdf_url",
          "reference_id",
          "status",
          "total_excl",
          "total_incl",
          "total_open",
          "updated_at",
          "xml_url"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the invoice."
          },
          "reference_id": {
            "type": "string",
            "description": "Reference id of the Invoice. Is used to find the invoice."
          },
          "number_int": {
            "type": "number",
            "nullable": true,
            "description": "The invoice number converted to an integer value."
          },
          "order_id": {
            "type": "integer",
            "nullable": true,
            "description": "Unique identifier of the order the invoice belongs to."
          },
          "order_number": {
            "type": "number",
            "nullable": true,
            "description": "The order number of the invoice."
          },
          "status": {
            "$ref": "#/components/schemas/InvoiceStatus"
          },
          "expiration_date": {
            "type": "string",
            "nullable": true,
            "description": "The expiration date of the invoice. Is set when the invoice is set to open."
          },
          "opened_at": {
            "type": "string",
            "nullable": true,
            "description": "The date when the invoice status was changed to open."
          },
          "description": {
            "type": "string",
            "description": "Human readable description of the invoice."
          },
          "account_name": {
            "type": "string",
            "description": "The name of the account that is paying. Is copied to the invoice and is thus not automatically updated if the account name changes."
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "total_incl": {
            "type": "string",
            "description": "The total cost of the invoice including VAT."
          },
          "total_excl": {
            "type": "string",
            "description": "The total cost of the invoice excluding VAT."
          },
          "total_open": {
            "type": "string",
            "description": "The open cost of the invoice including VAT."
          },
          "pdf_url": {
            "type": "string",
            "description": "Url to the download path of the invoice in PDF format."
          },
          "xml_url": {
            "type": "string",
            "description": "Url to the download path of the invoice in UML format."
          },
          "number": {
            "type": "string",
            "description": "The invoice number which is unique per educator. If left empty, it autoincrements."
          },
          "account_id": {
            "type": "integer",
            "description": "Identifier of the account."
          },
          "feature": {
            "type": "string",
            "description": "Some description of the invoice which is displayed on the invoice.",
            "nullable": true
          },
          "footnote": {
            "type": "string",
            "description": "The note displayed at the bottom of the invoice.",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "InvoiceItem": {
        "type": "object",
        "required": [
          "id",
          "name",
          "units",
          "unit_price",
          "invoice_vat_id",
          "catalog_variant_id",
          "updated_at",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the invoice item."
          },
          "name": {
            "type": "string",
            "description": "The name of the invoice item."
          },
          "units": {
            "type": "integer",
            "description": "Integer representing the number of units of the invoice item."
          },
          "unit_price": {
            "type": "string",
            "description": "Decimal representing the price of an unit."
          },
          "invoice_vat_id": {
            "type": "integer",
            "description": "Identifier of the invoice vat."
          },
          "catalog_variant_id": {
            "type": "integer",
            "nullable": true,
            "description": "Unique identifier of the catalog variant."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "InvoiceWithIncludes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Invoice"
          },
          {
            "type": "object",
            "properties": {
              "invoice_items": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/InvoiceItem"
                    },
                    {
                      "type": "object",
                      "additionalProperties": false
                    }
                  ]
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Payment": {
        "type": "object",
        "required": [
          "id",
          "invoice_id",
          "amount",
          "currency",
          "payment_method_id",
          "status",
          "gateway_id",
          "date"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the payment."
          },
          "invoice_id": {
            "type": "integer",
            "description": "Unique identifier of the linked invoice."
          },
          "amount": {
            "type": "string",
            "description": "A number representing the total amount of the invoice."
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "payment_method_id": {
            "type": "integer",
            "description": "Identifier of the payment method."
          },
          "status": {
            "type": "string",
            "description": "The status of the payment.",
            "enum": [
              "new",
              "open",
              "paid",
              "failed",
              "internal_server_error"
            ]
          },
          "gateway_id": {
            "type": "integer",
            "nullable": true,
            "description": "The payment provider payment id."
          },
          "date": {
            "type": "string",
            "description": "Date on which the payment was created."
          }
        },
        "additionalProperties": false
      },
      "PaymentWithIncludes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Payment"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "PaymentMethod": {
        "type": "object",
        "required": [
          "id",
          "name",
          "gateway",
          "plugin_id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the payment method."
          },
          "name": {
            "type": "string",
            "description": "Human readable name of the payment method."
          },
          "gateway": {
            "type": "string",
            "nullable": true,
            "description": "The type of the integration.",
            "enum": [
              "Mollie",
              "StripeIdeal",
              "StripeAlipay",
              "StripeGiropay",
              "ValitorBasic",
              "ValitorLoan",
              "Borgun",
              "StripeCheckout",
              "AuthorizeNet",
              "TouchNet",
              "WpmEducation"
            ]
          },
          "plugin_id": {
            "type": "integer",
            "nullable": true,
            "description": "Unique identifier of the optionally linked plugin."
          }
        }
      },
      "PluginData": {
        "type": "object",
        "required": [
          "id",
          "data"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Identifier of the data."
          },
          "data": {
            "type": "string",
            "nullable": true,
            "description": "Provided data."
          }
        },
        "additionalProperties": false
      },
      "PluginDataWithIncludes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PluginData"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "PaymentWithFixedIncludes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Payment"
          },
          {
            "type": "object",
            "properties": {
              "payment_method": {
                "$ref": "#/components/schemas/PaymentMethod"
              },
              "plugin_data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PluginDataWithIncludes"
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Label": {
        "type": "object",
        "required": [
          "id",
          "name",
          "color",
          "model_type",
          "updated_at",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the label"
          },
          "name": {
            "type": "string",
            "description": "The name of the label"
          },
          "color": {
            "type": "string",
            "pattern": "^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$",
            "example": "#aa33cc",
            "default": "#777777",
            "description": "Hex color"
          },
          "model_type": {
            "type": "string",
            "description": "The model type for which this label is made available",
            "enum": [
              "Account",
              "Catalog::Product",
              "Lead",
              "Order",
              "Teacher",
              "User"
            ]
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "description": "Timestamp of creation."
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "description": "Timestamp of last update."
          }
        },
        "additionalProperties": false
      },
      "Lead": {
        "type": "object",
        "required": [
          "id",
          "account_id",
          "administrator_id",
          "company_name",
          "created_at",
          "creation_method",
          "email",
          "first_name",
          "last_name",
          "middle_name",
          "label_ids",
          "phone",
          "quality",
          "referral_text",
          "status",
          "title",
          "updated_at",
          "user_id",
          "value",
          "wants_newsletter"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the lead"
          },
          "creation_method": {
            "type": "string",
            "description": "Indicates the lead was created"
          },
          "referral_text": {
            "type": "string",
            "nullable": true,
            "description": "Text supplied at referral"
          },
          "title": {
            "type": "string",
            "description": "Title of the lead"
          },
          "account_id": {
            "type": "integer",
            "nullable": true,
            "description": "ID of the account linked to this lead"
          },
          "user_id": {
            "type": "integer",
            "nullable": true,
            "description": "ID of the user linked to this lead"
          },
          "label_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "An array of integers representing unique identifier values associated with labels.\n"
          },
          "value": {
            "type": "string",
            "nullable": true,
            "description": "Decimal representing the price of a lead"
          },
          "company_name": {
            "type": "string",
            "nullable": true,
            "description": "Name of the company where this lead comes from"
          },
          "first_name": {
            "type": "string",
            "nullable": true,
            "description": "The first name of the lead"
          },
          "middle_name": {
            "type": "string",
            "nullable": true,
            "description": "The middle name of the lead"
          },
          "last_name": {
            "type": "string",
            "nullable": true,
            "description": "The last name of the lead"
          },
          "administrator_id": {
            "type": "integer",
            "nullable": true,
            "description": "ID of administrator that owns the lead"
          },
          "email": {
            "type": "string",
            "nullable": true,
            "description": "The email of the lead"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the lead",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "The status of the lead",
            "enum": [
              "prospect",
              "waiting_list",
              "won",
              "lost",
              "archive"
            ]
          },
          "quality": {
            "type": "string",
            "description": "Star scoring for the lead",
            "nullable": true
          },
          "wants_newsletter": {
            "type": "boolean",
            "description": "Indicates if lead wants to receive the newsletter or not"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "CourseLead": {
        "type": "object",
        "required": [
          "id",
          "lead_id",
          "course_id",
          "planned_course_id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the course lead"
          },
          "lead_id": {
            "type": "integer",
            "description": "Unique identifier of the lead"
          },
          "course_id": {
            "type": "integer",
            "description": "ID of the course"
          },
          "planned_course_id": {
            "type": "integer",
            "nullable": true,
            "description": "ID of the planned course"
          }
        },
        "additionalProperties": false
      },
      "LeadProduct": {
        "type": "object",
        "required": [
          "catalog_product_id",
          "catalog_variant_id"
        ],
        "properties": {
          "catalog_product_id": {
            "type": "integer",
            "description": "ID of the catalog product"
          },
          "catalog_variant_id": {
            "type": "integer",
            "nullable": true,
            "description": "ID of the catalog variant"
          }
        },
        "additionalProperties": false
      },
      "LeadWithIncludes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Lead"
          },
          {
            "type": "object",
            "properties": {
              "address": {
                "$ref": "#/components/schemas/Address"
              },
              "lead_products": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LeadProduct"
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MaterialGroup": {
        "type": "object",
        "required": [
          "id",
          "name",
          "updated_at",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the material group"
          },
          "name": {
            "type": "string",
            "description": "Name of the material group where the course is held."
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "Material": {
        "type": "object",
        "required": [
          "id",
          "name",
          "use_type",
          "material_group_id",
          "updated_at",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the material"
          },
          "name": {
            "type": "string",
            "description": "Name of the material."
          },
          "use_type": {
            "type": "string",
            "description": "Type of material.",
            "enum": [
              "reservable",
              "consumable"
            ]
          },
          "material_group_id": {
            "type": "integer",
            "description": "Unique identifier of the material group."
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "MaterialWithIncludes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Material"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "MeetingLocation": {
        "type": "object",
        "required": [
          "id",
          "course_location_id",
          "name",
          "capacity",
          "updated_at",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the meeting location"
          },
          "course_location_id": {
            "type": "integer",
            "description": "Unique identifier of the course location."
          },
          "name": {
            "type": "string"
          },
          "capacity": {
            "type": "integer",
            "description": "Capacity of the meeting location",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "MeetingLocationWithIncludes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MeetingLocation"
          },
          {
            "type": "object",
            "properties": {
              "address": {
                "$ref": "#/components/schemas/Address"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Meeting": {
        "type": "object",
        "required": [
          "id",
          "name",
          "planned_course_id",
          "start_date_time",
          "end_date_time",
          "description",
          "description_dashboard",
          "meeting_location_id",
          "planning_meeting_location_ids",
          "updated_at",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the meeting."
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "The name of the meeting."
          },
          "planned_course_id": {
            "type": "integer",
            "description": "Unique identifier of the planned course."
          },
          "start_date_time": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the meeting is starting."
          },
          "end_date_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the meeting is ending."
          },
          "meeting_location_id": {
            "type": "integer",
            "description": "Unique identifier of the meeting location.",
            "nullable": true
          },
          "planning_meeting_location_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "description": {
            "type": "string",
            "description": "The description of the meeting.",
            "nullable": true
          },
          "description_dashboard": {
            "type": "string",
            "description": "The description that will be shown in the dashboard.",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "PlanningAttendee": {
        "type": "object",
        "required": [
          "id",
          "attendable_id",
          "attendable_type",
          "teacher_id",
          "comment"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the planning attendee"
          },
          "attendable_id": {
            "type": "integer",
            "description": "Unique identifier of the object that is attended."
          },
          "attendable_type": {
            "type": "string",
            "description": "Type of the object that is attended."
          },
          "teacher_id": {
            "type": "integer",
            "description": "Unique identifier of the teacher."
          },
          "teacher_role_id": {
            "type": "integer",
            "description": "Unique identifier of the teacher role."
          },
          "comment": {
            "type": "string",
            "nullable": true,
            "description": "Comment on the teacher assignment"
          }
        },
        "additionalProperties": false
      },
      "PlanningMaterial": {
        "required": [
          "amount",
          "comment",
          "material_id"
        ],
        "type": "object",
        "properties": {
          "material_id": {
            "type": "integer",
            "description": "Unique identifier of the material"
          },
          "amount": {
            "type": "integer",
            "description": "Amount of the material",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "Comment on the planning material",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MeetingWithIncludes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Meeting"
          },
          {
            "type": "object",
            "required": [
              "planning_meeting_location_ids",
              "planning_attendees"
            ],
            "properties": {
              "planning_attendees": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PlanningAttendee"
                }
              },
              "planning_materials": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PlanningMaterial"
                }
              },
              "planning_meeting_location_ids": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "OrderStatus": {
        "type": "string",
        "description": "State of the order.",
        "enum": [
          "active",
          "canceled",
          "denied",
          "requested"
        ]
      },
      "Order": {
        "type": "object",
        "required": [
          "id",
          "account_id",
          "payment_option_id",
          "catalog_variant_id",
          "cost",
          "cost_scheme",
          "creator_id",
          "customer_comment",
          "number",
          "number_of_students",
          "origin",
          "status",
          "total_cost_excl",
          "total_cost_incl",
          "updated_at",
          "label_ids",
          "referral_id",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the order."
          },
          "number": {
            "type": "number",
            "description": "Educator specific identifier of the order which autoincrements."
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatus"
          },
          "number_of_students": {
            "type": "integer",
            "description": "Number of students in this order."
          },
          "origin": {
            "type": "string",
            "description": "Where the order originated from ex. Unknown, backend, signup."
          },
          "customer_comment": {
            "type": "string",
            "nullable": true,
            "description": "Comment from the customer."
          },
          "total_cost_excl": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "description": "Decimal representing the cost of the order excluding VAT"
          },
          "total_cost_incl": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "description": "Decimal representing the cost of the order including VAT"
          },
          "cost": {
            "type": "string",
            "nullable": true,
            "description": "Decimal representing the value of the order"
          },
          "cost_scheme": {
            "$ref": "#/components/schemas/CostScheme"
          },
          "catalog_variant_id": {
            "type": "integer",
            "description": "Unique identifier of the orders CatalogVariant."
          },
          "creator_id": {
            "type": "integer",
            "nullable": true,
            "description": "Unique identifier of the orders Creator (User)."
          },
          "account_id": {
            "type": "integer",
            "description": "Unique identifier of the orders Account."
          },
          "payment_method_id": {
            "type": "integer",
            "nullable": true,
            "description": "Unique identifier of the orders PaymentMethod."
          },
          "payment_option_id": {
            "type": "integer",
            "nullable": true,
            "description": "Unique identifier of the orders PaymentOption."
          },
          "label_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "An array of integers representing unique identifier values associated with labels.\n"
          },
          "discount_code": {
            "type": "string",
            "nullable": true,
            "description": "The discount code used for this order."
          },
          "total_discount": {
            "type": "string",
            "nullable": true,
            "description": "Decimal representing the total discount applied to this order."
          },
          "referral_id": {
            "type": "integer",
            "nullable": true,
            "description": "Identifier of the referral."
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "OrderItem": {
        "type": "object",
        "required": [
          "id",
          "order_id",
          "student_id",
          "updated_at",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the order item."
          },
          "order_id": {
            "type": "integer",
            "description": "Unique identifier of the order."
          },
          "student_id": {
            "type": "integer",
            "description": "Unique identifier of the student."
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time",
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "OrderWithIncludes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Order"
          },
          {
            "type": "object",
            "properties": {
              "custom": {
                "type": "object",
                "properties": {},
                "description": "The custom properties of the order."
              },
              "order_items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderItem"
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "PaymentOption": {
        "type": "object",
        "required": [
          "id",
          "name",
          "available_from",
          "extra_cost",
          "percentage",
          "multiplier"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the payment option."
          },
          "name": {
            "type": "string",
            "description": "Human readable name of the payment option."
          },
          "available_from": {
            "type": "number",
            "description": "Minimum required price before this option is allowed."
          },
          "extra_cost": {
            "type": "string",
            "description": "Extra cost on the invoice if this option is used."
          },
          "percentage": {
            "type": "number",
            "nullable": true,
            "description": "If the type of payment option is with a percentual deposit."
          },
          "multiplier": {
            "type": "string",
            "nullable": true,
            "description": "The multiplier to get the total cost."
          }
        },
        "additionalProperties": false
      },
      "PlannedCoursePayload": {
        "type": "object",
        "required": [
          "course_id",
          "type",
          "cost"
        ],
        "properties": {
          "is_published": {
            "type": "boolean",
            "description": "Boolean if is published on the website."
          },
          "course_id": {
            "type": "integer",
            "description": "Unique identifier of the course."
          },
          "type": {
            "type": "string",
            "description": "The type of the course.",
            "enum": [
              "FixedPlannedCourse",
              "FlexiblePlannedCourse"
            ]
          },
          "start_date": {
            "type": "string",
            "description": "Date at which the planned course starts. Only needed for fixed planned courses."
          },
          "end_date": {
            "type": "string",
            "description": "Date at which the planned course ends. Only needed for fixed planned courses.",
            "nullable": true
          },
          "min_participants": {
            "type": "integer",
            "description": "A number representing the minimum number of participants that can enroll for the planned course.",
            "nullable": true
          },
          "max_participants": {
            "type": "integer",
            "description": "A number representing the maximum number of participants that can enroll for the planned course.",
            "nullable": true
          },
          "cost_scheme": {
            "type": "string",
            "description": "The cost schema that the payment will follow for the specified course.",
            "enum": [
              "student",
              "order",
              "tbd",
              "free"
            ]
          },
          "cost": {
            "type": "number",
            "description": "The price to be paid for this planned course. Required if cost_scheme is student (default value) or order.",
            "nullable": true
          },
          "course_variant_id": {
            "type": "integer",
            "description": "Unique identifier of the course variant.",
            "nullable": true
          },
          "course_location_id": {
            "type": "integer",
            "description": "Unique identifier of the course location.",
            "nullable": true
          },
          "duration": {
            "type": "number",
            "description": "The period of time of the planned course in days. Only needed for flexible planned courses."
          },
          "teacher_ids": {
            "type": "array",
            "description": "The ids of the teachers in the course",
            "items": {
              "type": "integer"
            }
          },
          "custom": {
            "type": "object",
            "properties": {},
            "description": "The custom properties of the planned course."
          },
          "custom_associations": {
            "type": "array",
            "description": "Custom associations are a way to link custom records to a program.\n![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)\n",
            "items": {
              "$ref": "#/components/schemas/CustomAssociationsRecordsPayload"
            }
          }
        }
      },
      "PlannedCoursePatchPayload": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "is_published": {
            "type": "boolean",
            "description": "Boolean if is published on the website."
          },
          "course_id": {
            "type": "integer",
            "description": "Unique identifier of the course."
          },
          "start_date": {
            "type": "string",
            "description": "Date at which the planned course starts. Only needed for fixed planned courses."
          },
          "end_date": {
            "type": "string",
            "description": "Date at which the planned course ends. Only needed for fixed planned courses.",
            "nullable": true
          },
          "min_participants": {
            "type": "integer",
            "description": "A number representing the minimum number of participants that can enroll for the planned course.",
            "nullable": true
          },
          "max_participants": {
            "type": "integer",
            "description": "A number representing the maximum number of participants that can enroll for the planned course.",
            "nullable": true
          },
          "cost_scheme": {
            "type": "string",
            "description": "The cost schema that the payment will follow for the specified course.",
            "enum": [
              "student",
              "order",
              "tbd",
              "free"
            ]
          },
          "cost": {
            "type": "number",
            "description": "A positive float representing the price of the planned course.",
            "nullable": true
          },
          "course_variant_id": {
            "type": "integer",
            "description": "Unique identifier of the course variant.",
            "nullable": true
          },
          "course_location_id": {
            "type": "integer",
            "description": "Unique identifier of the course location.",
            "nullable": true
          },
          "duration": {
            "type": "number",
            "description": "The period of time of the planned course. Only needed for flexible planned courses."
          },
          "teacher_ids": {
            "type": "array",
            "description": "The ids of the teachers in the course",
            "items": {
              "type": "string"
            }
          },
          "custom": {
            "type": "object",
            "properties": {},
            "description": "The custom properties of the planned course."
          },
          "custom_associations": {
            "type": "array",
            "description": "Custom associations are a way to link custom records to a program.\n![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)\n",
            "items": {
              "$ref": "#/components/schemas/CustomAssociationsRecordsPayload"
            }
          }
        }
      },
      "TeacherEnrollment": {
        "required": [
          "id",
          "planned_course_id",
          "teacher_id",
          "updated_at",
          "created_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the teacher enrollment."
          },
          "planned_course_id": {
            "type": "integer",
            "description": "Unique identifier of the planned course."
          },
          "teacher_id": {
            "type": "integer",
            "description": "Unique identifier of the teacher."
          },
          "teacher_role_id": {
            "type": "integer",
            "description": "Unique identifier of the teacher role.\n\n![Teacher Roles](https://img.shields.io/badge/Feature-Teacher_Roles-blue)\n"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "PlanningConflict": {
        "type": "object",
        "required": [
          "conflicting_event_end_date_time",
          "conflicting_event_id",
          "conflicting_event_start_date_time",
          "conflicting_event_type",
          "end_date_time",
          "event_end_date_time",
          "event_id",
          "event_start_date_time",
          "event_type",
          "resource_id",
          "resource_name",
          "resource_type",
          "start_date_time"
        ],
        "properties": {
          "resource_type": {
            "type": "string",
            "description": "Type of the resource",
            "enum": [
              "Teacher",
              "Material",
              "MeetingLocation"
            ]
          },
          "resource_id": {
            "type": "integer",
            "description": "Unique identifier of the resource"
          },
          "resource_name": {
            "type": "string",
            "description": "Name of the resource"
          },
          "event_id": {
            "type": "integer",
            "description": "Unique identifier of the event"
          },
          "event_type": {
            "type": "string",
            "description": "Type of the event",
            "enum": [
              "Meeting",
              "Planning::Event"
            ]
          },
          "event_start_date_time": {
            "type": "string",
            "description": "Timestamp of the start of the event"
          },
          "event_end_date_time": {
            "type": "string",
            "description": "Timestamp of the end of the event"
          },
          "conflicting_event_id": {
            "type": "integer",
            "description": "Unique identifier of the conflicting event"
          },
          "conflicting_event_type": {
            "type": "string",
            "description": "Type of the conflicting event",
            "enum": [
              "Meeting",
              "Planning::Event"
            ]
          },
          "conflicting_event_start_date_time": {
            "type": "string",
            "description": "Timestamp of the start of the conflicting event"
          },
          "conflicting_event_end_date_time": {
            "type": "string",
            "description": "Timestamp of the end of the conflicting event"
          },
          "start_date_time": {
            "type": "string",
            "description": "Timestamp of the start of the conflict"
          },
          "end_date_time": {
            "type": "string",
            "description": "Timestamp of the end of the conflict"
          }
        },
        "additionalProperties": false
      },
      "PlanningEvent": {
        "required": [
          "id",
          "name",
          "start_date_time",
          "end_date_time",
          "meeting_id",
          "meeting_location_id",
          "planning_meeting_location_ids"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the meeting template"
          },
          "meeting_id": {
            "type": "integer",
            "description": "Identifier of the meeting"
          },
          "meeting_location_id": {
            "type": "integer",
            "nullable": true,
            "description": "Unique identifier of the meeting location."
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "Name of the event"
          },
          "start_date_time": {
            "type": "string",
            "description": "Date and time when the event is starting"
          },
          "end_date_time": {
            "type": "string",
            "description": "The date and time when the event is ending"
          },
          "planning_meeting_location_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "PlanningEventWithIncludes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PlanningEvent"
          },
          {
            "type": "object",
            "required": [
              "planning_attendees"
            ],
            "properties": {
              "planning_attendees": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PlanningAttendee"
                }
              },
              "planning_materials": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PlanningMaterial"
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "User": {
        "required": [
          "id",
          "first_name",
          "middle_name",
          "last_name",
          "email",
          "avatar_url",
          "description",
          "locale",
          "label_ids",
          "notes_user",
          "roles",
          "slug",
          "employee_number",
          "student_number",
          "wants_newsletter",
          "teacher_headline",
          "teacher_description",
          "teacher_enrollments_count",
          "updated_at",
          "created_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the user."
          },
          "first_name": {
            "type": "string",
            "description": "First name of the user."
          },
          "middle_name": {
            "type": "string",
            "description": "Middle name of the user.",
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the user."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The e-mail of the user."
          },
          "avatar_url": {
            "type": "string",
            "description": "The relative url path to the avatar."
          },
          "roles": {
            "type": "array",
            "readOnly": true,
            "description": "List of roles the user has.",
            "items": {
              "type": "string",
              "enum": [
                "admin",
                "teacher",
                "customer",
                "student"
              ]
            }
          },
          "notes_user": {
            "type": "string",
            "nullable": true,
            "description": "Short note about the user."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Long description of the user. (same as teacher_description)"
          },
          "label_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "An array of integers representing unique identifier values associated with labels.\n"
          },
          "employee_number": {
            "type": "string",
            "nullable": true,
            "description": "The employee number of this user."
          },
          "student_number": {
            "type": "string",
            "nullable": true,
            "description": "Unique identifier of the student."
          },
          "teacher_headline": {
            "type": "string",
            "nullable": true,
            "description": "Short description of the user."
          },
          "teacher_description": {
            "type": "string",
            "nullable": true,
            "description": "Long description of the user. (same as description)"
          },
          "locale": {
            "$ref": "#/components/schemas/Locale"
          },
          "wants_newsletter": {
            "type": "boolean",
            "description": "Boolean representing the possibility of the user to receive newsletters."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "Edition": {
        "type": "object",
        "required": [
          "id",
          "name",
          "program_id",
          "cost",
          "cost_scheme",
          "min_participants",
          "max_participants",
          "current_participants",
          "is_published",
          "start_date",
          "end_date"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the program edition."
          },
          "name": {
            "type": "string",
            "description": "Name of the program edition."
          },
          "program_id": {
            "type": "integer",
            "description": "Unique identifier of associated program."
          },
          "cost": {
            "type": "string",
            "description": "The price to be paid for this edition.",
            "nullable": true
          },
          "cost_scheme": {
            "$ref": "#/components/schemas/CostScheme"
          },
          "min_participants": {
            "type": "integer",
            "description": "A number representing the minimum number of participants.",
            "nullable": true
          },
          "max_participants": {
            "type": "integer",
            "description": "A number representing the maximum number of participants.",
            "nullable": true
          },
          "current_participants": {
            "type": "integer",
            "readOnly": true,
            "description": "The current amount of participants."
          },
          "is_published": {
            "type": "boolean",
            "default": false,
            "description": "Boolean representing the publishable status of the edition."
          },
          "start_date": {
            "type": "string",
            "description": "Nominal start date of the edition.",
            "format": "date",
            "nullable": true
          },
          "end_date": {
            "type": "string",
            "description": "Nominal end date of the edition (inclusive).",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EditionWithIncludes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Edition"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ProgramEditionPayload": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "name",
          "program_id"
        ],
        "properties": {
          "program_id": {
            "type": "integer",
            "description": "Unique identifier of associated program."
          },
          "name": {
            "type": "string",
            "description": "Name of the program edition."
          },
          "cost": {
            "type": "number",
            "nullable": true,
            "description": "The price to be paid for this edition. Required if cost_scheme is student (default value) or order."
          },
          "cost_scheme": {
            "type": "string",
            "description": "How should the edition be paid by default.",
            "enum": [
              "student",
              "order",
              "tbd",
              "free"
            ]
          },
          "min_participants": {
            "description": "A number representing the minimum number of participants.",
            "type": "integer",
            "nullable": true
          },
          "max_participants": {
            "type": "integer",
            "description": "A number representing the maximum number of participants.",
            "nullable": true
          },
          "is_published": {
            "type": "boolean",
            "description": "Boolean representing the publishable status of the edition."
          },
          "custom": {
            "type": "object",
            "properties": {},
            "description": "The custom properties of the edition."
          },
          "custom_associations": {
            "type": "array",
            "description": "Custom associations are a way to link custom records to a program edition.\n\n![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)\n",
            "items": {
              "$ref": "#/components/schemas/CustomAssociationsRecordsPayload"
            }
          }
        }
      },
      "ProgramEditionPatchPayload": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "program_id": {
            "type": "integer",
            "description": "Unique identifier of associated program."
          },
          "name": {
            "type": "string",
            "description": "Name of the program edition."
          },
          "cost": {
            "type": "string",
            "description": "The price to be paid for this edition.",
            "nullable": true
          },
          "cost_scheme": {
            "type": "string",
            "description": "How should the edition be paid by default.",
            "enum": [
              "student",
              "order",
              "tbd",
              "free"
            ]
          },
          "min_participants": {
            "type": "integer",
            "description": "A number representing the minimum number of participants.",
            "nullable": true
          },
          "max_participants": {
            "type": "integer",
            "description": "A number representing the maximum number of participants.",
            "nullable": true
          },
          "is_published": {
            "type": "boolean",
            "description": "Boolean representing the publishable status of the edition."
          },
          "custom": {
            "type": "object",
            "properties": {},
            "description": "The custom properties of the edition."
          },
          "custom_associations": {
            "type": "array",
            "description": "The new set of custom records to be associated with the program.\n\n![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)\n",
            "items": {
              "$ref": "#/components/schemas/CustomAssociationsRecordsPayload"
            }
          }
        }
      },
      "ProgramEditionBaseElement": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "credits"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the element."
          },
          "credits": {
            "type": "string",
            "format": "decimal",
            "example": "5.0",
            "nullable": true,
            "description": "The credits of the element."
          }
        }
      },
      "ProgramEditionCourseElement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProgramEditionBaseElement"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "element_type",
              "course_id",
              "planned_course_id"
            ],
            "properties": {
              "element_type": {
                "type": "string",
                "description": "The type of the element.",
                "enum": [
                  "CourseElement"
                ]
              },
              "course_id": {
                "type": "integer",
                "description": "The identifier of the associated course."
              },
              "planned_course_id": {
                "type": "integer",
                "nullable": true,
                "description": "The identifier of the associated planned course."
              }
            }
          }
        ]
      },
      "ProgramEditionEvaluationElement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProgramEditionBaseElement"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "element_type"
            ],
            "properties": {
              "element_type": {
                "type": "string",
                "description": "The type of the element.",
                "enum": [
                  "EvaluationElement"
                ]
              }
            }
          }
        ]
      },
      "ProgramEditionBlockElementItem": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ProgramEditionCourseElement"
          },
          {
            "$ref": "#/components/schemas/ProgramEditionEvaluationElement"
          }
        ],
        "discriminator": {
          "propertyName": "element_type",
          "mapping": {
            "CourseElement": "#/components/schemas/ProgramEditionCourseElement",
            "EvaluationElement": "#/components/schemas/ProgramEditionEvaluationElement"
          }
        }
      },
      "ProgramEditionBlockElement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProgramEditionBaseElement"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "element_type",
              "elements"
            ],
            "properties": {
              "element_type": {
                "type": "string",
                "description": "The type of the element.",
                "enum": [
                  "BlockElement"
                ]
              },
              "elements": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProgramEditionBlockElementItem"
                },
                "description": "The elements of the block element."
              }
            }
          }
        ]
      },
      "ProgramEditionElectiveElement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProgramEditionBaseElement"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "element_type"
            ],
            "properties": {
              "element_type": {
                "type": "string",
                "description": "The type of the element.",
                "enum": [
                  "ElectiveElement"
                ]
              }
            }
          }
        ]
      },
      "ProgramEditionThesisElement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProgramEditionBaseElement"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "element_type",
              "course_id",
              "planned_course_id"
            ],
            "properties": {
              "element_type": {
                "type": "string",
                "description": "The type of the element.",
                "enum": [
                  "ThesisElement"
                ]
              },
              "course_id": {
                "type": "integer",
                "description": "The identifier of the associated course."
              },
              "planned_course_id": {
                "type": "integer",
                "nullable": true,
                "description": "The identifier of the associated planned course."
              }
            }
          }
        ]
      },
      "ProgramEditionElement": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ProgramEditionBlockElement"
          },
          {
            "$ref": "#/components/schemas/ProgramEditionCourseElement"
          },
          {
            "$ref": "#/components/schemas/ProgramEditionElectiveElement"
          },
          {
            "$ref": "#/components/schemas/ProgramEditionEvaluationElement"
          },
          {
            "$ref": "#/components/schemas/ProgramEditionThesisElement"
          }
        ],
        "discriminator": {
          "propertyName": "element_type",
          "mapping": {
            "BlockElement": "#/components/schemas/ProgramEditionBlockElement",
            "CourseElement": "#/components/schemas/ProgramEditionCourseElement",
            "ElectiveElement": "#/components/schemas/ProgramEditionElectiveElement",
            "EvaluationElement": "#/components/schemas/ProgramEditionEvaluationElement",
            "ThesisElement": "#/components/schemas/ProgramEditionThesisElement"
          }
        }
      },
      "Element": {
        "type": "object",
        "required": [
          "id",
          "course_id",
          "edition_id",
          "planned_course_id",
          "position"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the element."
          },
          "edition_id": {
            "type": "integer",
            "description": "The identifier of the associated course."
          },
          "position": {
            "type": "integer",
            "description": "Sorting position of the element. Lower is higher."
          },
          "course_id": {
            "type": "integer",
            "description": "The identifier of the associated course."
          },
          "planned_course_id": {
            "type": "integer",
            "nullable": true,
            "description": "The identifier of the associated course."
          }
        },
        "additionalProperties": false
      },
      "ProgramEnrollment": {
        "type": "object",
        "required": [
          "id",
          "student_id",
          "edition_id",
          "personal_program_id",
          "label_ids",
          "order_id",
          "state",
          "graduation_state",
          "graduation_date"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the enrollment"
          },
          "student_id": {
            "type": "integer",
            "description": "The identifier of the associated student"
          },
          "edition_id": {
            "type": "integer",
            "description": "The identifier of the associated edition"
          },
          "personal_program_id": {
            "type": "integer",
            "description": "The identifier of the associated personal program"
          },
          "label_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "An array of integers representing unique identifier values associated with labels.\n"
          },
          "order_id": {
            "type": "integer",
            "nullable": true,
            "description": "The identifier of the associated order"
          },
          "state": {
            "type": "string",
            "description": "The state of the enrollment",
            "enum": [
              "confirmed",
              "canceled"
            ]
          },
          "graduation_state": {
            "$ref": "#/components/schemas/GraduationState"
          },
          "graduation_date": {
            "type": "string",
            "format": "date",
            "description": "The graduation date of the enrollment",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProgramEnrollmentWithIncludes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProgramEnrollment"
          },
          {
            "type": "object",
            "properties": {
              "grade": {
                "$ref": "#/components/schemas/Grade"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "PersonalProgramElement": {
        "type": "object",
        "required": [
          "id",
          "enrollment_id",
          "course_id",
          "course_enrollment_id",
          "element_id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the personal program element."
          },
          "enrollment_id": {
            "type": "integer",
            "description": "The identifier of the associated enrollment."
          },
          "course_id": {
            "type": "integer",
            "description": "The identifier of the associated course."
          },
          "course_enrollment_id": {
            "type": "integer",
            "nullable": true,
            "description": "The identifier of the associated course enrollment."
          },
          "element_id": {
            "type": "integer",
            "nullable": true,
            "description": "The identifier of the associated element."
          }
        },
        "additionalProperties": false
      },
      "Program": {
        "type": "object",
        "required": [
          "id",
          "category_id",
          "name",
          "conditions",
          "cost",
          "cost_scheme",
          "is_published",
          "signup_url",
          "slug"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the program."
          },
          "signup_url": {
            "type": "string",
            "description": "URL to the signup page for this program."
          },
          "name": {
            "type": "string",
            "description": "Name of the program."
          },
          "cost": {
            "type": "string",
            "nullable": true,
            "description": "The price to be paid for this program."
          },
          "cost_scheme": {
            "$ref": "#/components/schemas/CostScheme"
          },
          "is_published": {
            "type": "boolean",
            "description": "Boolean representing the publishable status of the program."
          },
          "category_id": {
            "type": "integer",
            "description": "Identifier of the category of the program."
          },
          "conditions": {
            "type": "string",
            "description": "Conditions for this program.",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "description": "Human readable identifier, unique per educator."
          }
        },
        "additionalProperties": false
      },
      "ProgramWithIncludes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Program"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ProgramProgramPayload": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "name",
          "category_id",
          "cost_scheme"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the program."
          },
          "category_id": {
            "type": "integer",
            "description": "Identifier of the category of the program."
          },
          "cost_scheme": {
            "type": "string",
            "description": "How should the program be paid by default.",
            "enum": [
              "student",
              "order",
              "tbd",
              "free"
            ]
          },
          "cost": {
            "type": "integer",
            "description": "The price to be paid for this program. Required if cost_scheme is student (default value) or order.",
            "nullable": true
          },
          "is_published": {
            "type": "boolean",
            "description": "Boolean representing the publishable status of the program."
          },
          "label_ids": {
            "type": "array",
            "description": "IDs of the labels",
            "items": {
              "type": "integer"
            }
          },
          "custom": {
            "type": "object",
            "properties": {},
            "description": "The custom properties of the program."
          },
          "custom_associations": {
            "type": "array",
            "description": "Custom associations are a way to link custom records to a program.\n\n![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)\n",
            "items": {
              "$ref": "#/components/schemas/CustomAssociationsRecordsPayload"
            }
          },
          "course_tab_contents_attributes": {
            "type": "array",
            "items": {
              "required": [
                "content",
                "course_tab_id"
              ],
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "description": "The HTML content of the course tab.",
                  "nullable": true
                },
                "course_tab_id": {
                  "type": "integer",
                  "description": "Unique identifier of the course tab."
                }
              }
            }
          }
        }
      },
      "ProgramProgramPatchPayload": {
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the program."
          },
          "cost": {
            "type": "string",
            "description": "The price to be paid for this program.",
            "nullable": true
          },
          "cost_scheme": {
            "type": "string",
            "description": "How should the program be paid by default.",
            "enum": [
              "student",
              "order",
              "tbd",
              "free"
            ]
          },
          "is_published": {
            "type": "boolean",
            "description": "Boolean representing the publishable status of the program."
          },
          "category_id": {
            "type": "integer",
            "description": "Identifier of the category of the program."
          },
          "slug": {
            "type": "string",
            "description": "Human readable identifier, unique per educator."
          },
          "label_ids": {
            "type": "array",
            "description": "IDs of the labels",
            "items": {
              "type": "integer"
            }
          },
          "custom": {
            "type": "object",
            "properties": {},
            "description": "The custom properties of the program."
          },
          "custom_associations": {
            "type": "array",
            "description": "The new set of custom records to be associated with the program.\n\n![Custom Objects](https://img.shields.io/badge/Feature-Custom_objects-1d8127)\n",
            "items": {
              "$ref": "#/components/schemas/CustomAssociationsRecordsPayload"
            }
          },
          "course_tab_contents_attributes": {
            "type": "array",
            "items": {
              "required": [
                "id"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Unique identifier of the course tab content."
                },
                "content": {
                  "type": "string",
                  "description": "The HTML content of the course tab.",
                  "nullable": true
                },
                "course_tab_id": {
                  "type": "integer",
                  "description": "Unique identifier of the course tab."
                }
              }
            }
          }
        }
      },
      "Referral": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the referral."
          },
          "name": {
            "type": "string",
            "description": "Name of the referral."
          }
        },
        "additionalProperties": false
      },
      "SignupQuestion": {
        "type": "object",
        "required": [
          "choices",
          "field_type",
          "for_customer",
          "for_student",
          "for_type",
          "id",
          "position",
          "required",
          "slug",
          "system_name",
          "title",
          "use_as_duplicate_indicator",
          "visibility"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the question."
          },
          "position": {
            "type": "integer",
            "description": "Position of the question used for ordering."
          },
          "field_type": {
            "$ref": "#/components/schemas/SignupQuestionFieldType"
          },
          "title": {
            "type": "string",
            "description": "The title and label of the question"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the question"
          },
          "required": {
            "type": "boolean",
            "description": "Define if this question is required on the Signup page."
          },
          "for_type": {
            "type": "string",
            "description": "Define to what type of models this should be linked.",
            "enum": [
              "user",
              "teacher",
              "account",
              "catalog_product",
              "order",
              "catalog_variant"
            ]
          },
          "visibility": {
            "type": "array",
            "description": "List of at what locations you want to show this field in the signup",
            "items": {
              "type": "string"
            }
          },
          "for_student": {
            "type": "boolean",
            "description": "DEPRECATED: boolean if the question is visible for students. Please use the visibility attribute."
          },
          "for_customer": {
            "type": "boolean",
            "description": "DEPRECATED: boolean if the question is visible for customers. Please use the visibility attribute."
          },
          "choices": {
            "type": "array",
            "description": "Array of string with the choice options if the type of the field is select.",
            "items": {
              "type": "string"
            }
          },
          "system_name": {
            "type": "string",
            "nullable": true,
            "description": "The internal system name used for this field."
          },
          "use_as_duplicate_indicator": {
            "type": "boolean",
            "description": "boolean if the question is use as duplicate indicator."
          }
        },
        "additionalProperties": false
      },
      "Task": {
        "type": "object",
        "required": [
          "id",
          "assigned_by_id",
          "assignee_id",
          "completed_at",
          "completed_by_id",
          "created_at",
          "creator_id",
          "description",
          "due_date",
          "name",
          "starred",
          "subject_id",
          "subject_type",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the task."
          },
          "creator_id": {
            "type": "integer",
            "description": "Unique identifier of the user who created the task."
          },
          "completed_at": {
            "type": "string",
            "nullable": true,
            "description": "Timestamp of when the task was completed."
          },
          "completed_by_id": {
            "type": "integer",
            "nullable": true,
            "description": "Unique identifier of the user who completed the task."
          },
          "assigned_by_id": {
            "type": "integer",
            "nullable": true,
            "description": "Unique identifier of the user who assigned the task."
          },
          "name": {
            "type": "string",
            "description": "The title of the task."
          },
          "description": {
            "type": "string",
            "description": "A string representing the description of the task.",
            "nullable": true
          },
          "due_date": {
            "type": "string",
            "nullable": true,
            "description": "Date when the task must be completed."
          },
          "starred": {
            "type": "boolean",
            "description": "Boolean if the task is starred."
          },
          "assignee_id": {
            "type": "integer",
            "nullable": true,
            "description": "Unique identifier of the assigned user for the task."
          },
          "subject_type": {
            "type": "string",
            "nullable": true,
            "description": "Type of the subject.",
            "enum": [
              "Course",
              "Account",
              "User",
              "Lead",
              "Invoice",
              "PlannedCourse",
              "Order",
              "Program::Program",
              "Program::Edition"
            ]
          },
          "subject_id": {
            "type": "integer",
            "nullable": true,
            "description": "Identifier of the subject."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "TeacherRole": {
        "type": "object",
        "required": [
          "id",
          "name",
          "updated_at",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the teacher role."
          },
          "name": {
            "type": "string",
            "description": "The name of the teacher role."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "Teacher": {
        "required": [
          "id",
          "first_name",
          "middle_name",
          "last_name",
          "email",
          "active",
          "avatar_url",
          "locale",
          "slug",
          "employee_number",
          "label_ids",
          "note",
          "teacher_headline",
          "teacher_description",
          "teacher_enrollments_count",
          "updated_at",
          "created_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the user."
          },
          "first_name": {
            "type": "string",
            "description": "First name of the user."
          },
          "middle_name": {
            "type": "string",
            "description": "Middle name of the user.",
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the user."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The e-mail of the user."
          },
          "label_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "An array of integers representing unique identifier values associated with labels.\n"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the teacher is currently active."
          },
          "avatar_url": {
            "type": "string",
            "description": "The relative url path to the avatar."
          },
          "employee_number": {
            "type": "string",
            "nullable": true,
            "description": "The employee number of this user."
          },
          "note": {
            "type": "string",
            "nullable": true,
            "description": "Short note about the teacher."
          },
          "teacher_headline": {
            "type": "string",
            "nullable": true,
            "description": "Short description of the user."
          },
          "teacher_description": {
            "type": "string",
            "nullable": true,
            "description": "Long description of the user. (same as description)"
          },
          "locale": {
            "$ref": "#/components/schemas/Locale"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of last update."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of creation."
          }
        },
        "additionalProperties": false
      },
      "TeacherWithIncludes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Teacher"
          },
          {
            "type": "object",
            "properties": {
              "custom": {
                "type": "object",
                "properties": {},
                "description": "The custom properties of the user."
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Thesis": {
        "required": [
          "id",
          "title",
          "subtitle",
          "date",
          "authors",
          "supervisors",
          "keywords",
          "abstract",
          "confidentiality",
          "locale",
          "file_url"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier of the thesis."
          },
          "title": {
            "type": "string",
            "description": "The title of the thesis.",
            "nullable": true
          },
          "subtitle": {
            "type": "string",
            "description": "The subtitle of the thesis.",
            "nullable": true
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The keywords of the thesis."
          },
          "abstract": {
            "type": "string",
            "description": "The abstract of the thesis.",
            "nullable": true
          },
          "authors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of authors of the thesis."
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Date of the program thesis.",
            "nullable": true
          },
          "supervisors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of supervisors of the thesis."
          },
          "confidentiality": {
            "type": "string",
            "enum": [
              "no",
              "yes",
              "on_request"
            ],
            "description": "Confidentiality level of the program thesis defaults to no.",
            "nullable": true
          },
          "locale": {
            "type": "string",
            "enum": [
              "english",
              "dutch"
            ],
            "nullable": true,
            "description": "Locale of the program thesis."
          },
          "file_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to the file of the thesis.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserWithIncludes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/User"
          },
          {
            "type": "object",
            "properties": {
              "address": {
                "$ref": "#/components/schemas/Address"
              },
              "custom": {
                "type": "object",
                "properties": {},
                "description": "The custom properties of the user."
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "WebhookEvent": {
        "type": "string",
        "description": "Webhook events on which you can subscribe",
        "enum": [
          "account.created",
          "account.deleted",
          "account.updated",
          "catalog_variant.created",
          "catalog_variant.deleted",
          "catalog_variant.updated",
          "category.created",
          "category.deleted",
          "category.updated",
          "course.created",
          "course.deleted",
          "course.updated",
          "course_location.created",
          "course_location.deleted",
          "course_location.updated",
          "course_variant.created",
          "course_variant.deleted",
          "course_variant.updated",
          "custom_field_option.created",
          "custom_field_option.deleted",
          "custom_field_option.updated",
          "custom_record.created",
          "custom_record.deleted",
          "custom_record.updated",
          "educator.created",
          "educator.deleted",
          "educator.updated",
          "enrollment.created",
          "enrollment.deleted",
          "enrollment.updated",
          "invoice.created",
          "invoice.deleted",
          "invoice.updated",
          "invoice_vat.created",
          "invoice_vat.deleted",
          "invoice_vat.updated",
          "label.created",
          "label.deleted",
          "label.updated",
          "lead.created",
          "lead.deleted",
          "lead.updated",
          "meeting.created",
          "meeting.deleted",
          "meeting.teacher_attendees_changed",
          "meeting.updated",
          "meeting_location.created",
          "meeting_location.deleted",
          "meeting_location.updated",
          "order.approved",
          "order.canceled",
          "order.created",
          "order.deleted",
          "order.denied",
          "order.updated",
          "payment.created",
          "payment.deleted",
          "payment.updated",
          "planned_course.canceled",
          "planned_course.created",
          "planned_course.deleted",
          "planned_course.teacher_attendees_changed",
          "planned_course.updated",
          "planning_event.created",
          "planning_event.deleted",
          "planning_event.teacher_attendees_changed",
          "planning_event.updated",
          "product.created",
          "product.deleted",
          "product.updated",
          "program.created",
          "program.deleted",
          "program.updated",
          "program_edition.created",
          "program_edition.deleted",
          "program_edition.updated",
          "program_enrollment.cancel",
          "program_enrollment.created",
          "program_enrollment.graduation_revoked",
          "program_enrollment.pass",
          "program_enrollment.updated",
          "teacher.created",
          "teacher.deleted",
          "teacher.updated",
          "teacher_role.created",
          "teacher_role.deleted",
          "teacher_role.updated",
          "user.created",
          "user.deleted",
          "user.merged",
          "user.updated"
        ]
      },
      "Webhook": {
        "required": [
          "id",
          "created_at",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the webhook."
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp of creation."
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp of last update."
          },
          "url": {
            "type": "string",
            "description": "The callback url for Eduframe to send a HTTP POST payload to."
          },
          "active": {
            "type": "boolean",
            "description": "State of webhook."
          },
          "events": {
            "type": "array",
            "description": "Array of events.",
            "items": {
              "$ref": "#/components/schemas/WebhookEvent"
            }
          }
        }
      },
      "WebhookNotificationWithIncludes": {
        "required": [
          "data",
          "event_id",
          "id",
          "send_attempts",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the webhook notification."
          },
          "event_id": {
            "type": "string",
            "description": "Unique identifier of the linked event."
          },
          "data": {
            "type": "object",
            "properties": {},
            "description": "The content of the webhook."
          },
          "status": {
            "type": "string",
            "description": "Status of the webhook notification.",
            "enum": [
              "pending",
              "retry",
              "succeeded",
              "failed"
            ]
          },
          "send_attempts": {
            "type": "array",
            "items": {
              "required": [
                "created_at",
                "response",
                "status_code"
              ],
              "type": "object",
              "properties": {
                "response": {
                  "type": "string",
                  "description": "The response body of the send attempt."
                },
                "status_code": {
                  "type": "integer",
                  "description": "The response status code of the send attempt."
                },
                "created_at": {
                  "type": "string",
                  "description": "Timestamp of the send attempt."
                }
              }
            }
          }
        }
      },
      "WebhookNotificationFailed": {
        "required": [
          "created_at",
          "data",
          "event_id",
          "id",
          "status",
          "webhook_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the webhook notification."
          },
          "event_id": {
            "type": "string",
            "description": "Unique identifier of the linked event."
          },
          "webhook_id": {
            "type": "string",
            "description": "Unique identifier of the linked webhook."
          },
          "data": {
            "type": "object",
            "properties": {},
            "description": "The content of the webhook."
          },
          "status": {
            "type": "string",
            "description": "Status of the webhook notification.",
            "enum": [
              "failed"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of creation."
          }
        }
      }
    },
    "parameters": {
      "Cursor": {
        "name": "cursor",
        "description": "**Note**: It's almost never necessary to use this parameter directly, the URL\n  should be retrieved from the `Link` header.\n\nThe cursor used to fetch the next result set.\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "PerPage": {
        "name": "per_page",
        "description": "The number of results to retrieve for this page.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100,
          "default": 25
        },
        "example": 10
      },
      "CustomObjectTypeInPath": {
        "name": "object_type",
        "description": "The type of the object the custom field is for.\n",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "users",
            "accounts",
            "catalog_products",
            "catalog_variants",
            "teachers"
          ]
        }
      },
      "CustomFieldSlugInPath": {
        "name": "field_slug",
        "description": "The unique identifier of the custom field.\n",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "CustomFieldOptionIdInPath": {
        "name": "option_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "CustomObjectIdInPath": {
        "name": "object_id",
        "description": "The unique identifier of the custom object.\n",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "CustomRecordIdInPath": {
        "name": "record_id",
        "description": "The unique identifier of the custom record.\n",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFound": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UnprocessableEntity": {
        "description": "Unprocessable Entity",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "TooManyRequests": {
        "description": "Too Many Requests",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NoContent": {
        "description": "No Content"
      },
      "Conflict": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "PreconditionFailed": {
        "description": "Precondition Failed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Created": {
        "description": "Created",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "location"
              ],
              "properties": {
                "result": {
                  "type": "string",
                  "enum": [
                    "Success"
                  ],
                  "description": "The result of the operation."
                },
                "location": {
                  "type": "string",
                  "format": "uri",
                  "description": "The URI of the created resource."
                }
              }
            }
          }
        }
      }
    }
  }
}