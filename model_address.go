/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Address type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Address{}

// Address The Account Address
type Address struct {
	// The addressee of the address.
	Addressee NullableString `json:"addressee"`
	// Concatenation of the street and house number.
	Address string `json:"address"`
	// A string representing the second line of the address.
	AddressLine2 NullableString `json:"address_line2"`
	// A string representing the postal code.
	PostalCode string `json:"postal_code"`
	// A string representing the city.
	City string `json:"city"`
	Country Country `json:"country"`
	StateProvince NullableUsaState `json:"state_province"`
}

type _Address Address

// NewAddress instantiates a new Address object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddress(addressee NullableString, address string, addressLine2 NullableString, postalCode string, city string, country Country, stateProvince NullableUsaState) *Address {
	this := Address{}
	this.Addressee = addressee
	this.Address = address
	this.AddressLine2 = addressLine2
	this.PostalCode = postalCode
	this.City = city
	this.Country = country
	this.StateProvince = stateProvince
	return &this
}

// NewAddressWithDefaults instantiates a new Address object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressWithDefaults() *Address {
	this := Address{}
	return &this
}

// GetAddressee returns the Addressee field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Address) GetAddressee() string {
	if o == nil || o.Addressee.Get() == nil {
		var ret string
		return ret
	}

	return *o.Addressee.Get()
}

// GetAddresseeOk returns a tuple with the Addressee field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Address) GetAddresseeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Addressee.Get(), o.Addressee.IsSet()
}

// SetAddressee sets field value
func (o *Address) SetAddressee(v string) {
	o.Addressee.Set(&v)
}

// GetAddress returns the Address field value
func (o *Address) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *Address) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *Address) SetAddress(v string) {
	o.Address = v
}

// GetAddressLine2 returns the AddressLine2 field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Address) GetAddressLine2() string {
	if o == nil || o.AddressLine2.Get() == nil {
		var ret string
		return ret
	}

	return *o.AddressLine2.Get()
}

// GetAddressLine2Ok returns a tuple with the AddressLine2 field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Address) GetAddressLine2Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddressLine2.Get(), o.AddressLine2.IsSet()
}

// SetAddressLine2 sets field value
func (o *Address) SetAddressLine2(v string) {
	o.AddressLine2.Set(&v)
}

// GetPostalCode returns the PostalCode field value
func (o *Address) GetPostalCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value
// and a boolean to check if the value has been set.
func (o *Address) GetPostalCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PostalCode, true
}

// SetPostalCode sets field value
func (o *Address) SetPostalCode(v string) {
	o.PostalCode = v
}

// GetCity returns the City field value
func (o *Address) GetCity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *Address) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *Address) SetCity(v string) {
	o.City = v
}

// GetCountry returns the Country field value
func (o *Address) GetCountry() Country {
	if o == nil {
		var ret Country
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *Address) GetCountryOk() (*Country, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *Address) SetCountry(v Country) {
	o.Country = v
}

// GetStateProvince returns the StateProvince field value
// If the value is explicit nil, the zero value for UsaState will be returned
func (o *Address) GetStateProvince() UsaState {
	if o == nil || o.StateProvince.Get() == nil {
		var ret UsaState
		return ret
	}

	return *o.StateProvince.Get()
}

// GetStateProvinceOk returns a tuple with the StateProvince field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Address) GetStateProvinceOk() (*UsaState, bool) {
	if o == nil {
		return nil, false
	}
	return o.StateProvince.Get(), o.StateProvince.IsSet()
}

// SetStateProvince sets field value
func (o *Address) SetStateProvince(v UsaState) {
	o.StateProvince.Set(&v)
}

func (o Address) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Address) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["addressee"] = o.Addressee.Get()
	toSerialize["address"] = o.Address
	toSerialize["address_line2"] = o.AddressLine2.Get()
	toSerialize["postal_code"] = o.PostalCode
	toSerialize["city"] = o.City
	toSerialize["country"] = o.Country
	toSerialize["state_province"] = o.StateProvince.Get()
	return toSerialize, nil
}

func (o *Address) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"addressee",
		"address",
		"address_line2",
		"postal_code",
		"city",
		"country",
		"state_province",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddress := _Address{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddress)

	if err != nil {
		return err
	}

	*o = Address(varAddress)

	return err
}

type NullableAddress struct {
	value *Address
	isSet bool
}

func (v NullableAddress) Get() *Address {
	return v.value
}

func (v *NullableAddress) Set(val *Address) {
	v.value = val
	v.isSet = true
}

func (v NullableAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddress(val *Address) *NullableAddress {
	return &NullableAddress{value: val, isSet: true}
}

func (v NullableAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


