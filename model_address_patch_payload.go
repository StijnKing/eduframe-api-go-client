/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
)

// checks if the AddressPatchPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressPatchPayload{}

// AddressPatchPayload struct for AddressPatchPayload
type AddressPatchPayload struct {
	// The addressee of the address.
	Addressee NullableString `json:"addressee,omitempty"`
	// Concatenation of the street and house number.
	Address *string `json:"address,omitempty"`
	// A string representing the second line of the address.
	AddressLine2 NullableString `json:"address_line2,omitempty"`
	// A string representing the postal code.
	PostalCode *string `json:"postal_code,omitempty"`
	// A string representing the city.
	City *string `json:"city,omitempty"`
	StateProvince NullableUsaState `json:"state_province,omitempty"`
	Country *Country `json:"country,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AddressPatchPayload AddressPatchPayload

// NewAddressPatchPayload instantiates a new AddressPatchPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressPatchPayload() *AddressPatchPayload {
	this := AddressPatchPayload{}
	return &this
}

// NewAddressPatchPayloadWithDefaults instantiates a new AddressPatchPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressPatchPayloadWithDefaults() *AddressPatchPayload {
	this := AddressPatchPayload{}
	return &this
}

// GetAddressee returns the Addressee field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddressPatchPayload) GetAddressee() string {
	if o == nil || IsNil(o.Addressee.Get()) {
		var ret string
		return ret
	}
	return *o.Addressee.Get()
}

// GetAddresseeOk returns a tuple with the Addressee field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddressPatchPayload) GetAddresseeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Addressee.Get(), o.Addressee.IsSet()
}

// HasAddressee returns a boolean if a field has been set.
func (o *AddressPatchPayload) HasAddressee() bool {
	if o != nil && o.Addressee.IsSet() {
		return true
	}

	return false
}

// SetAddressee gets a reference to the given NullableString and assigns it to the Addressee field.
func (o *AddressPatchPayload) SetAddressee(v string) {
	o.Addressee.Set(&v)
}
// SetAddresseeNil sets the value for Addressee to be an explicit nil
func (o *AddressPatchPayload) SetAddresseeNil() {
	o.Addressee.Set(nil)
}

// UnsetAddressee ensures that no value is present for Addressee, not even an explicit nil
func (o *AddressPatchPayload) UnsetAddressee() {
	o.Addressee.Unset()
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *AddressPatchPayload) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressPatchPayload) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *AddressPatchPayload) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *AddressPatchPayload) SetAddress(v string) {
	o.Address = &v
}

// GetAddressLine2 returns the AddressLine2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddressPatchPayload) GetAddressLine2() string {
	if o == nil || IsNil(o.AddressLine2.Get()) {
		var ret string
		return ret
	}
	return *o.AddressLine2.Get()
}

// GetAddressLine2Ok returns a tuple with the AddressLine2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddressPatchPayload) GetAddressLine2Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddressLine2.Get(), o.AddressLine2.IsSet()
}

// HasAddressLine2 returns a boolean if a field has been set.
func (o *AddressPatchPayload) HasAddressLine2() bool {
	if o != nil && o.AddressLine2.IsSet() {
		return true
	}

	return false
}

// SetAddressLine2 gets a reference to the given NullableString and assigns it to the AddressLine2 field.
func (o *AddressPatchPayload) SetAddressLine2(v string) {
	o.AddressLine2.Set(&v)
}
// SetAddressLine2Nil sets the value for AddressLine2 to be an explicit nil
func (o *AddressPatchPayload) SetAddressLine2Nil() {
	o.AddressLine2.Set(nil)
}

// UnsetAddressLine2 ensures that no value is present for AddressLine2, not even an explicit nil
func (o *AddressPatchPayload) UnsetAddressLine2() {
	o.AddressLine2.Unset()
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *AddressPatchPayload) GetPostalCode() string {
	if o == nil || IsNil(o.PostalCode) {
		var ret string
		return ret
	}
	return *o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressPatchPayload) GetPostalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PostalCode) {
		return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *AddressPatchPayload) HasPostalCode() bool {
	if o != nil && !IsNil(o.PostalCode) {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given string and assigns it to the PostalCode field.
func (o *AddressPatchPayload) SetPostalCode(v string) {
	o.PostalCode = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *AddressPatchPayload) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressPatchPayload) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *AddressPatchPayload) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *AddressPatchPayload) SetCity(v string) {
	o.City = &v
}

// GetStateProvince returns the StateProvince field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddressPatchPayload) GetStateProvince() UsaState {
	if o == nil || IsNil(o.StateProvince.Get()) {
		var ret UsaState
		return ret
	}
	return *o.StateProvince.Get()
}

// GetStateProvinceOk returns a tuple with the StateProvince field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddressPatchPayload) GetStateProvinceOk() (*UsaState, bool) {
	if o == nil {
		return nil, false
	}
	return o.StateProvince.Get(), o.StateProvince.IsSet()
}

// HasStateProvince returns a boolean if a field has been set.
func (o *AddressPatchPayload) HasStateProvince() bool {
	if o != nil && o.StateProvince.IsSet() {
		return true
	}

	return false
}

// SetStateProvince gets a reference to the given NullableUsaState and assigns it to the StateProvince field.
func (o *AddressPatchPayload) SetStateProvince(v UsaState) {
	o.StateProvince.Set(&v)
}
// SetStateProvinceNil sets the value for StateProvince to be an explicit nil
func (o *AddressPatchPayload) SetStateProvinceNil() {
	o.StateProvince.Set(nil)
}

// UnsetStateProvince ensures that no value is present for StateProvince, not even an explicit nil
func (o *AddressPatchPayload) UnsetStateProvince() {
	o.StateProvince.Unset()
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *AddressPatchPayload) GetCountry() Country {
	if o == nil || IsNil(o.Country) {
		var ret Country
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressPatchPayload) GetCountryOk() (*Country, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *AddressPatchPayload) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given Country and assigns it to the Country field.
func (o *AddressPatchPayload) SetCountry(v Country) {
	o.Country = &v
}

func (o AddressPatchPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressPatchPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Addressee.IsSet() {
		toSerialize["addressee"] = o.Addressee.Get()
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if o.AddressLine2.IsSet() {
		toSerialize["address_line2"] = o.AddressLine2.Get()
	}
	if !IsNil(o.PostalCode) {
		toSerialize["postal_code"] = o.PostalCode
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if o.StateProvince.IsSet() {
		toSerialize["state_province"] = o.StateProvince.Get()
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AddressPatchPayload) UnmarshalJSON(data []byte) (err error) {
	varAddressPatchPayload := _AddressPatchPayload{}

	err = json.Unmarshal(data, &varAddressPatchPayload)

	if err != nil {
		return err
	}

	*o = AddressPatchPayload(varAddressPatchPayload)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "addressee")
		delete(additionalProperties, "address")
		delete(additionalProperties, "address_line2")
		delete(additionalProperties, "postal_code")
		delete(additionalProperties, "city")
		delete(additionalProperties, "state_province")
		delete(additionalProperties, "country")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAddressPatchPayload struct {
	value *AddressPatchPayload
	isSet bool
}

func (v NullableAddressPatchPayload) Get() *AddressPatchPayload {
	return v.value
}

func (v *NullableAddressPatchPayload) Set(val *AddressPatchPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressPatchPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressPatchPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressPatchPayload(val *AddressPatchPayload) *NullableAddressPatchPayload {
	return &NullableAddressPatchPayload{value: val, isSet: true}
}

func (v NullableAddressPatchPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressPatchPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


