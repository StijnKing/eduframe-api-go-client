/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Attendance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Attendance{}

// Attendance struct for Attendance
type Attendance struct {
	// Unique identifier of the attendance record.
	Id int32 `json:"id"`
	// Unique identifier of the meeting.
	MeetingId int32 `json:"meeting_id"`
	// Unique identifier of the enrollment.
	EnrollmentId int32 `json:"enrollment_id"`
	State AttendanceState `json:"state"`
	// Comment about this attendance.
	Comment NullableString `json:"comment"`
	// Timestamp of last update.
	UpdatedAt time.Time `json:"updated_at"`
	// Timestamp of creation.
	CreatedAt time.Time `json:"created_at"`
}

type _Attendance Attendance

// NewAttendance instantiates a new Attendance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttendance(id int32, meetingId int32, enrollmentId int32, state AttendanceState, comment NullableString, updatedAt time.Time, createdAt time.Time) *Attendance {
	this := Attendance{}
	this.Id = id
	this.MeetingId = meetingId
	this.EnrollmentId = enrollmentId
	this.State = state
	this.Comment = comment
	this.UpdatedAt = updatedAt
	this.CreatedAt = createdAt
	return &this
}

// NewAttendanceWithDefaults instantiates a new Attendance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttendanceWithDefaults() *Attendance {
	this := Attendance{}
	return &this
}

// GetId returns the Id field value
func (o *Attendance) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Attendance) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Attendance) SetId(v int32) {
	o.Id = v
}

// GetMeetingId returns the MeetingId field value
func (o *Attendance) GetMeetingId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MeetingId
}

// GetMeetingIdOk returns a tuple with the MeetingId field value
// and a boolean to check if the value has been set.
func (o *Attendance) GetMeetingIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MeetingId, true
}

// SetMeetingId sets field value
func (o *Attendance) SetMeetingId(v int32) {
	o.MeetingId = v
}

// GetEnrollmentId returns the EnrollmentId field value
func (o *Attendance) GetEnrollmentId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EnrollmentId
}

// GetEnrollmentIdOk returns a tuple with the EnrollmentId field value
// and a boolean to check if the value has been set.
func (o *Attendance) GetEnrollmentIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnrollmentId, true
}

// SetEnrollmentId sets field value
func (o *Attendance) SetEnrollmentId(v int32) {
	o.EnrollmentId = v
}

// GetState returns the State field value
func (o *Attendance) GetState() AttendanceState {
	if o == nil {
		var ret AttendanceState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Attendance) GetStateOk() (*AttendanceState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *Attendance) SetState(v AttendanceState) {
	o.State = v
}

// GetComment returns the Comment field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Attendance) GetComment() string {
	if o == nil || o.Comment.Get() == nil {
		var ret string
		return ret
	}

	return *o.Comment.Get()
}

// GetCommentOk returns a tuple with the Comment field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Attendance) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Comment.Get(), o.Comment.IsSet()
}

// SetComment sets field value
func (o *Attendance) SetComment(v string) {
	o.Comment.Set(&v)
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Attendance) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Attendance) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Attendance) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Attendance) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Attendance) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Attendance) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o Attendance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Attendance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["meeting_id"] = o.MeetingId
	toSerialize["enrollment_id"] = o.EnrollmentId
	toSerialize["state"] = o.State
	toSerialize["comment"] = o.Comment.Get()
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *Attendance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"meeting_id",
		"enrollment_id",
		"state",
		"comment",
		"updated_at",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAttendance := _Attendance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAttendance)

	if err != nil {
		return err
	}

	*o = Attendance(varAttendance)

	return err
}

type NullableAttendance struct {
	value *Attendance
	isSet bool
}

func (v NullableAttendance) Get() *Attendance {
	return v.value
}

func (v *NullableAttendance) Set(val *Attendance) {
	v.value = val
	v.isSet = true
}

func (v NullableAttendance) IsSet() bool {
	return v.isSet
}

func (v *NullableAttendance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttendance(val *Attendance) *NullableAttendance {
	return &NullableAttendance{value: val, isSet: true}
}

func (v NullableAttendance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttendance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


