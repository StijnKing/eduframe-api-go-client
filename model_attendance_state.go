/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"fmt"
)

// AttendanceState Indicator of the attendance state.
type AttendanceState string

// List of AttendanceState
const (
	ATTENDANCESTATE_ABSENT AttendanceState = "absent"
	ATTENDANCESTATE_ABSENT_WITH_LEAVE AttendanceState = "absent_with_leave"
	ATTENDANCESTATE_ATTENDED AttendanceState = "attended"
	ATTENDANCESTATE_BLANCO AttendanceState = "blanco"
	ATTENDANCESTATE_LATE AttendanceState = "late"
)

// All allowed values of AttendanceState enum
var AllowedAttendanceStateEnumValues = []AttendanceState{
	"absent",
	"absent_with_leave",
	"attended",
	"blanco",
	"late",
}

func (v *AttendanceState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AttendanceState(value)
	for _, existing := range AllowedAttendanceStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AttendanceState", value)
}

// NewAttendanceStateFromValue returns a pointer to a valid AttendanceState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAttendanceStateFromValue(v string) (*AttendanceState, error) {
	ev := AttendanceState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AttendanceState: valid values are %v", v, AllowedAttendanceStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AttendanceState) IsValid() bool {
	for _, existing := range AllowedAttendanceStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AttendanceState value
func (v AttendanceState) Ptr() *AttendanceState {
	return &v
}

type NullableAttendanceState struct {
	value *AttendanceState
	isSet bool
}

func (v NullableAttendanceState) Get() *AttendanceState {
	return v.value
}

func (v *NullableAttendanceState) Set(val *AttendanceState) {
	v.value = val
	v.isSet = true
}

func (v NullableAttendanceState) IsSet() bool {
	return v.isSet
}

func (v *NullableAttendanceState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttendanceState(val *AttendanceState) *NullableAttendanceState {
	return &NullableAttendanceState{value: val, isSet: true}
}

func (v NullableAttendanceState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttendanceState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

