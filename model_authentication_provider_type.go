/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"fmt"
)

// AuthenticationProviderType Type of the associated AuthenticationProvider.
type AuthenticationProviderType string

// List of AuthenticationProviderType
const (
	AZURE_ACTIVE_DIRECTORY AuthenticationProviderType = "azure_active_directory"
	EDUFRAME AuthenticationProviderType = "eduframe"
	OPENID_CONNECT AuthenticationProviderType = "openid_connect"
	SURF_CONEXT AuthenticationProviderType = "surf_conext"
)

// All allowed values of AuthenticationProviderType enum
var AllowedAuthenticationProviderTypeEnumValues = []AuthenticationProviderType{
	"azure_active_directory",
	"eduframe",
	"openid_connect",
	"surf_conext",
}

func (v *AuthenticationProviderType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthenticationProviderType(value)
	for _, existing := range AllowedAuthenticationProviderTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthenticationProviderType", value)
}

// NewAuthenticationProviderTypeFromValue returns a pointer to a valid AuthenticationProviderType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthenticationProviderTypeFromValue(v string) (*AuthenticationProviderType, error) {
	ev := AuthenticationProviderType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthenticationProviderType: valid values are %v", v, AllowedAuthenticationProviderTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthenticationProviderType) IsValid() bool {
	for _, existing := range AllowedAuthenticationProviderTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthenticationProviderType value
func (v AuthenticationProviderType) Ptr() *AuthenticationProviderType {
	return &v
}

type NullableAuthenticationProviderType struct {
	value *AuthenticationProviderType
	isSet bool
}

func (v NullableAuthenticationProviderType) Get() *AuthenticationProviderType {
	return v.value
}

func (v *NullableAuthenticationProviderType) Set(val *AuthenticationProviderType) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationProviderType) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationProviderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationProviderType(val *AuthenticationProviderType) *NullableAuthenticationProviderType {
	return &NullableAuthenticationProviderType{value: val, isSet: true}
}

func (v NullableAuthenticationProviderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationProviderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

