/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"fmt"
)

// AvailabilityState By default this is just +open+. However, you can make this planned course available for a subset of accounts. If that's the case the state is +closed+. 
type AvailabilityState string

// List of AvailabilityState
const (
	AVAILABILITYSTATE_OPEN AvailabilityState = "open"
	AVAILABILITYSTATE_CLOSED AvailabilityState = "closed"
)

// All allowed values of AvailabilityState enum
var AllowedAvailabilityStateEnumValues = []AvailabilityState{
	"open",
	"closed",
}

func (v *AvailabilityState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AvailabilityState(value)
	for _, existing := range AllowedAvailabilityStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AvailabilityState", value)
}

// NewAvailabilityStateFromValue returns a pointer to a valid AvailabilityState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAvailabilityStateFromValue(v string) (*AvailabilityState, error) {
	ev := AvailabilityState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AvailabilityState: valid values are %v", v, AllowedAvailabilityStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AvailabilityState) IsValid() bool {
	for _, existing := range AllowedAvailabilityStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AvailabilityState value
func (v AvailabilityState) Ptr() *AvailabilityState {
	return &v
}

type NullableAvailabilityState struct {
	value *AvailabilityState
	isSet bool
}

func (v NullableAvailabilityState) Get() *AvailabilityState {
	return v.value
}

func (v *NullableAvailabilityState) Set(val *AvailabilityState) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailabilityState) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailabilityState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailabilityState(val *AvailabilityState) *NullableAvailabilityState {
	return &NullableAvailabilityState{value: val, isSet: true}
}

func (v NullableAvailabilityState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailabilityState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

