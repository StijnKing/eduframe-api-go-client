/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"fmt"
)

// checks if the AwardCertificateToProgramEnrollmentByIdRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwardCertificateToProgramEnrollmentByIdRequest{}

// AwardCertificateToProgramEnrollmentByIdRequest struct for AwardCertificateToProgramEnrollmentByIdRequest
type AwardCertificateToProgramEnrollmentByIdRequest struct {
	// Id of the certificate template to use for the certificate
	CertificateTemplateId int32 `json:"certificate_template_id"`
	AdditionalProperties map[string]interface{}
}

type _AwardCertificateToProgramEnrollmentByIdRequest AwardCertificateToProgramEnrollmentByIdRequest

// NewAwardCertificateToProgramEnrollmentByIdRequest instantiates a new AwardCertificateToProgramEnrollmentByIdRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwardCertificateToProgramEnrollmentByIdRequest(certificateTemplateId int32) *AwardCertificateToProgramEnrollmentByIdRequest {
	this := AwardCertificateToProgramEnrollmentByIdRequest{}
	this.CertificateTemplateId = certificateTemplateId
	return &this
}

// NewAwardCertificateToProgramEnrollmentByIdRequestWithDefaults instantiates a new AwardCertificateToProgramEnrollmentByIdRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwardCertificateToProgramEnrollmentByIdRequestWithDefaults() *AwardCertificateToProgramEnrollmentByIdRequest {
	this := AwardCertificateToProgramEnrollmentByIdRequest{}
	return &this
}

// GetCertificateTemplateId returns the CertificateTemplateId field value
func (o *AwardCertificateToProgramEnrollmentByIdRequest) GetCertificateTemplateId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CertificateTemplateId
}

// GetCertificateTemplateIdOk returns a tuple with the CertificateTemplateId field value
// and a boolean to check if the value has been set.
func (o *AwardCertificateToProgramEnrollmentByIdRequest) GetCertificateTemplateIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertificateTemplateId, true
}

// SetCertificateTemplateId sets field value
func (o *AwardCertificateToProgramEnrollmentByIdRequest) SetCertificateTemplateId(v int32) {
	o.CertificateTemplateId = v
}

func (o AwardCertificateToProgramEnrollmentByIdRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwardCertificateToProgramEnrollmentByIdRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["certificate_template_id"] = o.CertificateTemplateId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AwardCertificateToProgramEnrollmentByIdRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"certificate_template_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAwardCertificateToProgramEnrollmentByIdRequest := _AwardCertificateToProgramEnrollmentByIdRequest{}

	err = json.Unmarshal(data, &varAwardCertificateToProgramEnrollmentByIdRequest)

	if err != nil {
		return err
	}

	*o = AwardCertificateToProgramEnrollmentByIdRequest(varAwardCertificateToProgramEnrollmentByIdRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "certificate_template_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAwardCertificateToProgramEnrollmentByIdRequest struct {
	value *AwardCertificateToProgramEnrollmentByIdRequest
	isSet bool
}

func (v NullableAwardCertificateToProgramEnrollmentByIdRequest) Get() *AwardCertificateToProgramEnrollmentByIdRequest {
	return v.value
}

func (v *NullableAwardCertificateToProgramEnrollmentByIdRequest) Set(val *AwardCertificateToProgramEnrollmentByIdRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAwardCertificateToProgramEnrollmentByIdRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAwardCertificateToProgramEnrollmentByIdRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwardCertificateToProgramEnrollmentByIdRequest(val *AwardCertificateToProgramEnrollmentByIdRequest) *NullableAwardCertificateToProgramEnrollmentByIdRequest {
	return &NullableAwardCertificateToProgramEnrollmentByIdRequest{value: val, isSet: true}
}

func (v NullableAwardCertificateToProgramEnrollmentByIdRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwardCertificateToProgramEnrollmentByIdRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


