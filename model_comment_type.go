/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"fmt"
)

// CommentType the model 'CommentType'
type CommentType string

// List of CommentType
const (
	COMMENTTYPE_ACCOUNT CommentType = "Account"
	COMMENTTYPE_INVOICE CommentType = "Invoice"
	COMMENTTYPE_LEAD CommentType = "Lead"
	COMMENTTYPE_ORDER CommentType = "Order"
	COMMENTTYPE_PLANNED_COURSE CommentType = "PlannedCourse"
	COMMENTTYPE_PROGRAMEDITIONSEDITION CommentType = "Program::Editions::Edition"
	COMMENTTYPE_TASK CommentType = "Task"
	COMMENTTYPE_USER CommentType = "User"
)

// All allowed values of CommentType enum
var AllowedCommentTypeEnumValues = []CommentType{
	"Account",
	"Invoice",
	"Lead",
	"Order",
	"PlannedCourse",
	"Program::Editions::Edition",
	"Task",
	"User",
}

func (v *CommentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CommentType(value)
	for _, existing := range AllowedCommentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CommentType", value)
}

// NewCommentTypeFromValue returns a pointer to a valid CommentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommentTypeFromValue(v string) (*CommentType, error) {
	ev := CommentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CommentType: valid values are %v", v, AllowedCommentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommentType) IsValid() bool {
	for _, existing := range AllowedCommentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CommentType value
func (v CommentType) Ptr() *CommentType {
	return &v
}

type NullableCommentType struct {
	value *CommentType
	isSet bool
}

func (v NullableCommentType) Get() *CommentType {
	return v.value
}

func (v *NullableCommentType) Set(val *CommentType) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentType) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentType(val *CommentType) *NullableCommentType {
	return &NullableCommentType{value: val, isSet: true}
}

func (v NullableCommentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

