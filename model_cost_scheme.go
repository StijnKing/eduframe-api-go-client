/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"fmt"
)

// CostScheme How should the variant be paid by default.
type CostScheme string

// List of CostScheme
const (
	FREE CostScheme = "free"
	ORDER CostScheme = "order"
	STUDENT CostScheme = "student"
	TBD CostScheme = "tbd"
)

// All allowed values of CostScheme enum
var AllowedCostSchemeEnumValues = []CostScheme{
	"free",
	"order",
	"student",
	"tbd",
}

func (v *CostScheme) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CostScheme(value)
	for _, existing := range AllowedCostSchemeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CostScheme", value)
}

// NewCostSchemeFromValue returns a pointer to a valid CostScheme
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCostSchemeFromValue(v string) (*CostScheme, error) {
	ev := CostScheme(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CostScheme: valid values are %v", v, AllowedCostSchemeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CostScheme) IsValid() bool {
	for _, existing := range AllowedCostSchemeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CostScheme value
func (v CostScheme) Ptr() *CostScheme {
	return &v
}

type NullableCostScheme struct {
	value *CostScheme
	isSet bool
}

func (v NullableCostScheme) Get() *CostScheme {
	return v.value
}

func (v *NullableCostScheme) Set(val *CostScheme) {
	v.value = val
	v.isSet = true
}

func (v NullableCostScheme) IsSet() bool {
	return v.isSet
}

func (v *NullableCostScheme) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCostScheme(val *CostScheme) *NullableCostScheme {
	return &NullableCostScheme{value: val, isSet: true}
}

func (v NullableCostScheme) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCostScheme) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

