/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"fmt"
)

// Country An ISO3166 two-letter country code.
type Country string

// List of Country
const (
	COUNTRY_AD Country = "AD"
	COUNTRY_AE Country = "AE"
	COUNTRY_AF Country = "AF"
	COUNTRY_AG Country = "AG"
	COUNTRY_AI Country = "AI"
	COUNTRY_AL Country = "AL"
	COUNTRY_AM Country = "AM"
	COUNTRY_AO Country = "AO"
	COUNTRY_AQ Country = "AQ"
	COUNTRY_AR Country = "AR"
	COUNTRY_AS Country = "AS"
	COUNTRY_AT Country = "AT"
	COUNTRY_AU Country = "AU"
	COUNTRY_AW Country = "AW"
	COUNTRY_AX Country = "AX"
	COUNTRY_AZ Country = "AZ"
	COUNTRY_BA Country = "BA"
	COUNTRY_BB Country = "BB"
	COUNTRY_BD Country = "BD"
	COUNTRY_BE Country = "BE"
	COUNTRY_BF Country = "BF"
	COUNTRY_BG Country = "BG"
	COUNTRY_BH Country = "BH"
	COUNTRY_BI Country = "BI"
	COUNTRY_BJ Country = "BJ"
	COUNTRY_BL Country = "BL"
	COUNTRY_BM Country = "BM"
	COUNTRY_BN Country = "BN"
	COUNTRY_BO Country = "BO"
	COUNTRY_BQ Country = "BQ"
	COUNTRY_BR Country = "BR"
	COUNTRY_BS Country = "BS"
	COUNTRY_BT Country = "BT"
	COUNTRY_BV Country = "BV"
	COUNTRY_BW Country = "BW"
	COUNTRY_BY Country = "BY"
	COUNTRY_BZ Country = "BZ"
	COUNTRY_CA Country = "CA"
	COUNTRY_CC Country = "CC"
	COUNTRY_CD Country = "CD"
	COUNTRY_CF Country = "CF"
	COUNTRY_CG Country = "CG"
	COUNTRY_CH Country = "CH"
	COUNTRY_CI Country = "CI"
	COUNTRY_CK Country = "CK"
	COUNTRY_CL Country = "CL"
	COUNTRY_CM Country = "CM"
	COUNTRY_CN Country = "CN"
	COUNTRY_CO Country = "CO"
	COUNTRY_CR Country = "CR"
	COUNTRY_CU Country = "CU"
	COUNTRY_CV Country = "CV"
	COUNTRY_CW Country = "CW"
	COUNTRY_CX Country = "CX"
	COUNTRY_CY Country = "CY"
	COUNTRY_CZ Country = "CZ"
	COUNTRY_DE Country = "DE"
	COUNTRY_DJ Country = "DJ"
	COUNTRY_DK Country = "DK"
	COUNTRY_DM Country = "DM"
	COUNTRY_DO Country = "DO"
	COUNTRY_DZ Country = "DZ"
	COUNTRY_EC Country = "EC"
	COUNTRY_EE Country = "EE"
	COUNTRY_EG Country = "EG"
	COUNTRY_EH Country = "EH"
	COUNTRY_ER Country = "ER"
	COUNTRY_ES Country = "ES"
	COUNTRY_ET Country = "ET"
	COUNTRY_FI Country = "FI"
	COUNTRY_FJ Country = "FJ"
	COUNTRY_FK Country = "FK"
	COUNTRY_FM Country = "FM"
	COUNTRY_FO Country = "FO"
	COUNTRY_FR Country = "FR"
	COUNTRY_GA Country = "GA"
	COUNTRY_GB Country = "GB"
	COUNTRY_GD Country = "GD"
	COUNTRY_GE Country = "GE"
	COUNTRY_GF Country = "GF"
	COUNTRY_GG Country = "GG"
	COUNTRY_GH Country = "GH"
	COUNTRY_GI Country = "GI"
	COUNTRY_GL Country = "GL"
	COUNTRY_GM Country = "GM"
	COUNTRY_GN Country = "GN"
	COUNTRY_GP Country = "GP"
	COUNTRY_GQ Country = "GQ"
	COUNTRY_GR Country = "GR"
	COUNTRY_GS Country = "GS"
	COUNTRY_GT Country = "GT"
	COUNTRY_GU Country = "GU"
	COUNTRY_GW Country = "GW"
	COUNTRY_GY Country = "GY"
	COUNTRY_HK Country = "HK"
	COUNTRY_HM Country = "HM"
	COUNTRY_HN Country = "HN"
	COUNTRY_HR Country = "HR"
	COUNTRY_HT Country = "HT"
	COUNTRY_HU Country = "HU"
	COUNTRY_ID Country = "ID"
	COUNTRY_IE Country = "IE"
	COUNTRY_IL Country = "IL"
	COUNTRY_IM Country = "IM"
	COUNTRY_IN Country = "IN"
	COUNTRY_IO Country = "IO"
	COUNTRY_IQ Country = "IQ"
	COUNTRY_IR Country = "IR"
	COUNTRY_IS Country = "IS"
	COUNTRY_IT Country = "IT"
	COUNTRY_JE Country = "JE"
	COUNTRY_JM Country = "JM"
	COUNTRY_JO Country = "JO"
	COUNTRY_JP Country = "JP"
	COUNTRY_KE Country = "KE"
	COUNTRY_KG Country = "KG"
	COUNTRY_KH Country = "KH"
	COUNTRY_KI Country = "KI"
	COUNTRY_KM Country = "KM"
	COUNTRY_KN Country = "KN"
	COUNTRY_KP Country = "KP"
	COUNTRY_KR Country = "KR"
	COUNTRY_KW Country = "KW"
	COUNTRY_KY Country = "KY"
	COUNTRY_KZ Country = "KZ"
	COUNTRY_LA Country = "LA"
	COUNTRY_LB Country = "LB"
	COUNTRY_LC Country = "LC"
	COUNTRY_LI Country = "LI"
	COUNTRY_LK Country = "LK"
	COUNTRY_LR Country = "LR"
	COUNTRY_LS Country = "LS"
	COUNTRY_LT Country = "LT"
	COUNTRY_LU Country = "LU"
	COUNTRY_LV Country = "LV"
	COUNTRY_LY Country = "LY"
	COUNTRY_MA Country = "MA"
	COUNTRY_MC Country = "MC"
	COUNTRY_MD Country = "MD"
	COUNTRY_ME Country = "ME"
	COUNTRY_MF Country = "MF"
	COUNTRY_MG Country = "MG"
	COUNTRY_MH Country = "MH"
	COUNTRY_MK Country = "MK"
	COUNTRY_ML Country = "ML"
	COUNTRY_MM Country = "MM"
	COUNTRY_MN Country = "MN"
	COUNTRY_MO Country = "MO"
	COUNTRY_MP Country = "MP"
	COUNTRY_MQ Country = "MQ"
	COUNTRY_MR Country = "MR"
	COUNTRY_MS Country = "MS"
	COUNTRY_MT Country = "MT"
	COUNTRY_MU Country = "MU"
	COUNTRY_MV Country = "MV"
	COUNTRY_MW Country = "MW"
	COUNTRY_MX Country = "MX"
	COUNTRY_MY Country = "MY"
	COUNTRY_MZ Country = "MZ"
	COUNTRY_NA Country = "NA"
	COUNTRY_NC Country = "NC"
	COUNTRY_NE Country = "NE"
	COUNTRY_NF Country = "NF"
	COUNTRY_NG Country = "NG"
	COUNTRY_NI Country = "NI"
	COUNTRY_NL Country = "NL"
	COUNTRY_NO Country = "NO"
	COUNTRY_NP Country = "NP"
	COUNTRY_NR Country = "NR"
	COUNTRY_NU Country = "NU"
	COUNTRY_NZ Country = "NZ"
	COUNTRY_OM Country = "OM"
	COUNTRY_PA Country = "PA"
	COUNTRY_PE Country = "PE"
	COUNTRY_PF Country = "PF"
	COUNTRY_PG Country = "PG"
	COUNTRY_PH Country = "PH"
	COUNTRY_PK Country = "PK"
	COUNTRY_PL Country = "PL"
	COUNTRY_PM Country = "PM"
	COUNTRY_PN Country = "PN"
	COUNTRY_PR Country = "PR"
	COUNTRY_PS Country = "PS"
	COUNTRY_PT Country = "PT"
	COUNTRY_PW Country = "PW"
	COUNTRY_PY Country = "PY"
	COUNTRY_QA Country = "QA"
	COUNTRY_RE Country = "RE"
	COUNTRY_RO Country = "RO"
	COUNTRY_RS Country = "RS"
	COUNTRY_RU Country = "RU"
	COUNTRY_RW Country = "RW"
	COUNTRY_SA Country = "SA"
	COUNTRY_SB Country = "SB"
	COUNTRY_SC Country = "SC"
	COUNTRY_SD Country = "SD"
	COUNTRY_SE Country = "SE"
	COUNTRY_SG Country = "SG"
	COUNTRY_SH Country = "SH"
	COUNTRY_SI Country = "SI"
	COUNTRY_SJ Country = "SJ"
	COUNTRY_SK Country = "SK"
	COUNTRY_SL Country = "SL"
	COUNTRY_SM Country = "SM"
	COUNTRY_SN Country = "SN"
	COUNTRY_SO Country = "SO"
	COUNTRY_SR Country = "SR"
	COUNTRY_SS Country = "SS"
	COUNTRY_ST Country = "ST"
	COUNTRY_SV Country = "SV"
	COUNTRY_SX Country = "SX"
	COUNTRY_SY Country = "SY"
	COUNTRY_SZ Country = "SZ"
	COUNTRY_TC Country = "TC"
	COUNTRY_TD Country = "TD"
	COUNTRY_TF Country = "TF"
	COUNTRY_TG Country = "TG"
	COUNTRY_TH Country = "TH"
	COUNTRY_TJ Country = "TJ"
	COUNTRY_TK Country = "TK"
	COUNTRY_TL Country = "TL"
	COUNTRY_TM Country = "TM"
	COUNTRY_TN Country = "TN"
	COUNTRY_TO Country = "TO"
	COUNTRY_TR Country = "TR"
	COUNTRY_TT Country = "TT"
	COUNTRY_TV Country = "TV"
	COUNTRY_TW Country = "TW"
	COUNTRY_TZ Country = "TZ"
	COUNTRY_UA Country = "UA"
	COUNTRY_UG Country = "UG"
	COUNTRY_UM Country = "UM"
	COUNTRY_US Country = "US"
	COUNTRY_UY Country = "UY"
	COUNTRY_UZ Country = "UZ"
	COUNTRY_VA Country = "VA"
	COUNTRY_VC Country = "VC"
	COUNTRY_VE Country = "VE"
	COUNTRY_VG Country = "VG"
	COUNTRY_VI Country = "VI"
	COUNTRY_VN Country = "VN"
	COUNTRY_VU Country = "VU"
	COUNTRY_WF Country = "WF"
	COUNTRY_WS Country = "WS"
	COUNTRY_YE Country = "YE"
	COUNTRY_YT Country = "YT"
	COUNTRY_ZA Country = "ZA"
	COUNTRY_ZM Country = "ZM"
	COUNTRY_ZW Country = "ZW"
)

// All allowed values of Country enum
var AllowedCountryEnumValues = []Country{
	"AD",
	"AE",
	"AF",
	"AG",
	"AI",
	"AL",
	"AM",
	"AO",
	"AQ",
	"AR",
	"AS",
	"AT",
	"AU",
	"AW",
	"AX",
	"AZ",
	"BA",
	"BB",
	"BD",
	"BE",
	"BF",
	"BG",
	"BH",
	"BI",
	"BJ",
	"BL",
	"BM",
	"BN",
	"BO",
	"BQ",
	"BR",
	"BS",
	"BT",
	"BV",
	"BW",
	"BY",
	"BZ",
	"CA",
	"CC",
	"CD",
	"CF",
	"CG",
	"CH",
	"CI",
	"CK",
	"CL",
	"CM",
	"CN",
	"CO",
	"CR",
	"CU",
	"CV",
	"CW",
	"CX",
	"CY",
	"CZ",
	"DE",
	"DJ",
	"DK",
	"DM",
	"DO",
	"DZ",
	"EC",
	"EE",
	"EG",
	"EH",
	"ER",
	"ES",
	"ET",
	"FI",
	"FJ",
	"FK",
	"FM",
	"FO",
	"FR",
	"GA",
	"GB",
	"GD",
	"GE",
	"GF",
	"GG",
	"GH",
	"GI",
	"GL",
	"GM",
	"GN",
	"GP",
	"GQ",
	"GR",
	"GS",
	"GT",
	"GU",
	"GW",
	"GY",
	"HK",
	"HM",
	"HN",
	"HR",
	"HT",
	"HU",
	"ID",
	"IE",
	"IL",
	"IM",
	"IN",
	"IO",
	"IQ",
	"IR",
	"IS",
	"IT",
	"JE",
	"JM",
	"JO",
	"JP",
	"KE",
	"KG",
	"KH",
	"KI",
	"KM",
	"KN",
	"KP",
	"KR",
	"KW",
	"KY",
	"KZ",
	"LA",
	"LB",
	"LC",
	"LI",
	"LK",
	"LR",
	"LS",
	"LT",
	"LU",
	"LV",
	"LY",
	"MA",
	"MC",
	"MD",
	"ME",
	"MF",
	"MG",
	"MH",
	"MK",
	"ML",
	"MM",
	"MN",
	"MO",
	"MP",
	"MQ",
	"MR",
	"MS",
	"MT",
	"MU",
	"MV",
	"MW",
	"MX",
	"MY",
	"MZ",
	"NA",
	"NC",
	"NE",
	"NF",
	"NG",
	"NI",
	"NL",
	"NO",
	"NP",
	"NR",
	"NU",
	"NZ",
	"OM",
	"PA",
	"PE",
	"PF",
	"PG",
	"PH",
	"PK",
	"PL",
	"PM",
	"PN",
	"PR",
	"PS",
	"PT",
	"PW",
	"PY",
	"QA",
	"RE",
	"RO",
	"RS",
	"RU",
	"RW",
	"SA",
	"SB",
	"SC",
	"SD",
	"SE",
	"SG",
	"SH",
	"SI",
	"SJ",
	"SK",
	"SL",
	"SM",
	"SN",
	"SO",
	"SR",
	"SS",
	"ST",
	"SV",
	"SX",
	"SY",
	"SZ",
	"TC",
	"TD",
	"TF",
	"TG",
	"TH",
	"TJ",
	"TK",
	"TL",
	"TM",
	"TN",
	"TO",
	"TR",
	"TT",
	"TV",
	"TW",
	"TZ",
	"UA",
	"UG",
	"UM",
	"US",
	"UY",
	"UZ",
	"VA",
	"VC",
	"VE",
	"VG",
	"VI",
	"VN",
	"VU",
	"WF",
	"WS",
	"YE",
	"YT",
	"ZA",
	"ZM",
	"ZW",
}

func (v *Country) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Country(value)
	for _, existing := range AllowedCountryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Country", value)
}

// NewCountryFromValue returns a pointer to a valid Country
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCountryFromValue(v string) (*Country, error) {
	ev := Country(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Country: valid values are %v", v, AllowedCountryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Country) IsValid() bool {
	for _, existing := range AllowedCountryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Country value
func (v Country) Ptr() *Country {
	return &v
}

type NullableCountry struct {
	value *Country
	isSet bool
}

func (v NullableCountry) Get() *Country {
	return v.value
}

func (v *NullableCountry) Set(val *Country) {
	v.value = val
	v.isSet = true
}

func (v NullableCountry) IsSet() bool {
	return v.isSet
}

func (v *NullableCountry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountry(val *Country) *NullableCountry {
	return &NullableCountry{value: val, isSet: true}
}

func (v NullableCountry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

