/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CourseLead type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CourseLead{}

// CourseLead struct for CourseLead
type CourseLead struct {
	// Unique identifier of the course lead
	Id int32 `json:"id"`
	// Unique identifier of the lead
	LeadId int32 `json:"lead_id"`
	// ID of the course
	CourseId int32 `json:"course_id"`
	// ID of the planned course
	PlannedCourseId NullableInt32 `json:"planned_course_id"`
}

type _CourseLead CourseLead

// NewCourseLead instantiates a new CourseLead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCourseLead(id int32, leadId int32, courseId int32, plannedCourseId NullableInt32) *CourseLead {
	this := CourseLead{}
	this.Id = id
	this.LeadId = leadId
	this.CourseId = courseId
	this.PlannedCourseId = plannedCourseId
	return &this
}

// NewCourseLeadWithDefaults instantiates a new CourseLead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCourseLeadWithDefaults() *CourseLead {
	this := CourseLead{}
	return &this
}

// GetId returns the Id field value
func (o *CourseLead) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CourseLead) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CourseLead) SetId(v int32) {
	o.Id = v
}

// GetLeadId returns the LeadId field value
func (o *CourseLead) GetLeadId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LeadId
}

// GetLeadIdOk returns a tuple with the LeadId field value
// and a boolean to check if the value has been set.
func (o *CourseLead) GetLeadIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LeadId, true
}

// SetLeadId sets field value
func (o *CourseLead) SetLeadId(v int32) {
	o.LeadId = v
}

// GetCourseId returns the CourseId field value
func (o *CourseLead) GetCourseId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CourseId
}

// GetCourseIdOk returns a tuple with the CourseId field value
// and a boolean to check if the value has been set.
func (o *CourseLead) GetCourseIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CourseId, true
}

// SetCourseId sets field value
func (o *CourseLead) SetCourseId(v int32) {
	o.CourseId = v
}

// GetPlannedCourseId returns the PlannedCourseId field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *CourseLead) GetPlannedCourseId() int32 {
	if o == nil || o.PlannedCourseId.Get() == nil {
		var ret int32
		return ret
	}

	return *o.PlannedCourseId.Get()
}

// GetPlannedCourseIdOk returns a tuple with the PlannedCourseId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CourseLead) GetPlannedCourseIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlannedCourseId.Get(), o.PlannedCourseId.IsSet()
}

// SetPlannedCourseId sets field value
func (o *CourseLead) SetPlannedCourseId(v int32) {
	o.PlannedCourseId.Set(&v)
}

func (o CourseLead) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CourseLead) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["lead_id"] = o.LeadId
	toSerialize["course_id"] = o.CourseId
	toSerialize["planned_course_id"] = o.PlannedCourseId.Get()
	return toSerialize, nil
}

func (o *CourseLead) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"lead_id",
		"course_id",
		"planned_course_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCourseLead := _CourseLead{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCourseLead)

	if err != nil {
		return err
	}

	*o = CourseLead(varCourseLead)

	return err
}

type NullableCourseLead struct {
	value *CourseLead
	isSet bool
}

func (v NullableCourseLead) Get() *CourseLead {
	return v.value
}

func (v *NullableCourseLead) Set(val *CourseLead) {
	v.value = val
	v.isSet = true
}

func (v NullableCourseLead) IsSet() bool {
	return v.isSet
}

func (v *NullableCourseLead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCourseLead(val *CourseLead) *NullableCourseLead {
	return &NullableCourseLead{value: val, isSet: true}
}

func (v NullableCourseLead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCourseLead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


