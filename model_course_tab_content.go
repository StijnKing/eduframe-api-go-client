/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CourseTabContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CourseTabContent{}

// CourseTabContent struct for CourseTabContent
type CourseTabContent struct {
	// Unique identifier of the course tab content.
	Id int32 `json:"id"`
	// Unique identifier of the course tab.
	CourseTabId int32 `json:"course_tab_id"`
	// The HTML content of the course tab.
	Content NullableString `json:"content"`
}

type _CourseTabContent CourseTabContent

// NewCourseTabContent instantiates a new CourseTabContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCourseTabContent(id int32, courseTabId int32, content NullableString) *CourseTabContent {
	this := CourseTabContent{}
	this.Id = id
	this.CourseTabId = courseTabId
	this.Content = content
	return &this
}

// NewCourseTabContentWithDefaults instantiates a new CourseTabContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCourseTabContentWithDefaults() *CourseTabContent {
	this := CourseTabContent{}
	return &this
}

// GetId returns the Id field value
func (o *CourseTabContent) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CourseTabContent) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CourseTabContent) SetId(v int32) {
	o.Id = v
}

// GetCourseTabId returns the CourseTabId field value
func (o *CourseTabContent) GetCourseTabId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CourseTabId
}

// GetCourseTabIdOk returns a tuple with the CourseTabId field value
// and a boolean to check if the value has been set.
func (o *CourseTabContent) GetCourseTabIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CourseTabId, true
}

// SetCourseTabId sets field value
func (o *CourseTabContent) SetCourseTabId(v int32) {
	o.CourseTabId = v
}

// GetContent returns the Content field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CourseTabContent) GetContent() string {
	if o == nil || o.Content.Get() == nil {
		var ret string
		return ret
	}

	return *o.Content.Get()
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CourseTabContent) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Content.Get(), o.Content.IsSet()
}

// SetContent sets field value
func (o *CourseTabContent) SetContent(v string) {
	o.Content.Set(&v)
}

func (o CourseTabContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CourseTabContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["course_tab_id"] = o.CourseTabId
	toSerialize["content"] = o.Content.Get()
	return toSerialize, nil
}

func (o *CourseTabContent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"course_tab_id",
		"content",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCourseTabContent := _CourseTabContent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCourseTabContent)

	if err != nil {
		return err
	}

	*o = CourseTabContent(varCourseTabContent)

	return err
}

type NullableCourseTabContent struct {
	value *CourseTabContent
	isSet bool
}

func (v NullableCourseTabContent) Get() *CourseTabContent {
	return v.value
}

func (v *NullableCourseTabContent) Set(val *CourseTabContent) {
	v.value = val
	v.isSet = true
}

func (v NullableCourseTabContent) IsSet() bool {
	return v.isSet
}

func (v *NullableCourseTabContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCourseTabContent(val *CourseTabContent) *NullableCourseTabContent {
	return &NullableCourseTabContent{value: val, isSet: true}
}

func (v NullableCourseTabContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCourseTabContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


