/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateLabelRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateLabelRequest{}

// CreateLabelRequest struct for CreateLabelRequest
type CreateLabelRequest struct {
	// The name of the label
	Name string `json:"name"`
	// Hex code of the color of the label
	Color *string `json:"color,omitempty"`
	// The model type for which this label is made available
	ModelType string `json:"model_type"`
	AdditionalProperties map[string]interface{}
}

type _CreateLabelRequest CreateLabelRequest

// NewCreateLabelRequest instantiates a new CreateLabelRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateLabelRequest(name string, modelType string) *CreateLabelRequest {
	this := CreateLabelRequest{}
	this.Name = name
	this.ModelType = modelType
	return &this
}

// NewCreateLabelRequestWithDefaults instantiates a new CreateLabelRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateLabelRequestWithDefaults() *CreateLabelRequest {
	this := CreateLabelRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CreateLabelRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateLabelRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateLabelRequest) SetName(v string) {
	o.Name = v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *CreateLabelRequest) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLabelRequest) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *CreateLabelRequest) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *CreateLabelRequest) SetColor(v string) {
	o.Color = &v
}

// GetModelType returns the ModelType field value
func (o *CreateLabelRequest) GetModelType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModelType
}

// GetModelTypeOk returns a tuple with the ModelType field value
// and a boolean to check if the value has been set.
func (o *CreateLabelRequest) GetModelTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModelType, true
}

// SetModelType sets field value
func (o *CreateLabelRequest) SetModelType(v string) {
	o.ModelType = v
}

func (o CreateLabelRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateLabelRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	toSerialize["model_type"] = o.ModelType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateLabelRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"model_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateLabelRequest := _CreateLabelRequest{}

	err = json.Unmarshal(data, &varCreateLabelRequest)

	if err != nil {
		return err
	}

	*o = CreateLabelRequest(varCreateLabelRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "color")
		delete(additionalProperties, "model_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateLabelRequest struct {
	value *CreateLabelRequest
	isSet bool
}

func (v NullableCreateLabelRequest) Get() *CreateLabelRequest {
	return v.value
}

func (v *NullableCreateLabelRequest) Set(val *CreateLabelRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateLabelRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateLabelRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateLabelRequest(val *CreateLabelRequest) *NullableCreateLabelRequest {
	return &NullableCreateLabelRequest{value: val, isSet: true}
}

func (v NullableCreateLabelRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateLabelRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


