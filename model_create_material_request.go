/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateMaterialRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateMaterialRequest{}

// CreateMaterialRequest struct for CreateMaterialRequest
type CreateMaterialRequest struct {
	// Name of the material.
	Name string `json:"name"`
	// Type of material.
	UseType *string `json:"use_type,omitempty"`
	// Unique identifier of the material group.
	MaterialGroupId int32 `json:"material_group_id"`
	AdditionalProperties map[string]interface{}
}

type _CreateMaterialRequest CreateMaterialRequest

// NewCreateMaterialRequest instantiates a new CreateMaterialRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateMaterialRequest(name string, materialGroupId int32) *CreateMaterialRequest {
	this := CreateMaterialRequest{}
	this.Name = name
	this.MaterialGroupId = materialGroupId
	return &this
}

// NewCreateMaterialRequestWithDefaults instantiates a new CreateMaterialRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateMaterialRequestWithDefaults() *CreateMaterialRequest {
	this := CreateMaterialRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CreateMaterialRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateMaterialRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateMaterialRequest) SetName(v string) {
	o.Name = v
}

// GetUseType returns the UseType field value if set, zero value otherwise.
func (o *CreateMaterialRequest) GetUseType() string {
	if o == nil || IsNil(o.UseType) {
		var ret string
		return ret
	}
	return *o.UseType
}

// GetUseTypeOk returns a tuple with the UseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMaterialRequest) GetUseTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UseType) {
		return nil, false
	}
	return o.UseType, true
}

// HasUseType returns a boolean if a field has been set.
func (o *CreateMaterialRequest) HasUseType() bool {
	if o != nil && !IsNil(o.UseType) {
		return true
	}

	return false
}

// SetUseType gets a reference to the given string and assigns it to the UseType field.
func (o *CreateMaterialRequest) SetUseType(v string) {
	o.UseType = &v
}

// GetMaterialGroupId returns the MaterialGroupId field value
func (o *CreateMaterialRequest) GetMaterialGroupId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaterialGroupId
}

// GetMaterialGroupIdOk returns a tuple with the MaterialGroupId field value
// and a boolean to check if the value has been set.
func (o *CreateMaterialRequest) GetMaterialGroupIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaterialGroupId, true
}

// SetMaterialGroupId sets field value
func (o *CreateMaterialRequest) SetMaterialGroupId(v int32) {
	o.MaterialGroupId = v
}

func (o CreateMaterialRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateMaterialRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.UseType) {
		toSerialize["use_type"] = o.UseType
	}
	toSerialize["material_group_id"] = o.MaterialGroupId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateMaterialRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"material_group_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateMaterialRequest := _CreateMaterialRequest{}

	err = json.Unmarshal(data, &varCreateMaterialRequest)

	if err != nil {
		return err
	}

	*o = CreateMaterialRequest(varCreateMaterialRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "use_type")
		delete(additionalProperties, "material_group_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateMaterialRequest struct {
	value *CreateMaterialRequest
	isSet bool
}

func (v NullableCreateMaterialRequest) Get() *CreateMaterialRequest {
	return v.value
}

func (v *NullableCreateMaterialRequest) Set(val *CreateMaterialRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateMaterialRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateMaterialRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateMaterialRequest(val *CreateMaterialRequest) *NullableCreateMaterialRequest {
	return &NullableCreateMaterialRequest{value: val, isSet: true}
}

func (v NullableCreateMaterialRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateMaterialRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


