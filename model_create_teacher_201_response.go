/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateTeacher201Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateTeacher201Response{}

// CreateTeacher201Response struct for CreateTeacher201Response
type CreateTeacher201Response struct {
	// The result of the operation.
	Result *string `json:"result,omitempty"`
	// The URI of the created resource.
	Location string `json:"location"`
	AdditionalProperties map[string]interface{}
}

type _CreateTeacher201Response CreateTeacher201Response

// NewCreateTeacher201Response instantiates a new CreateTeacher201Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTeacher201Response(location string) *CreateTeacher201Response {
	this := CreateTeacher201Response{}
	this.Location = location
	return &this
}

// NewCreateTeacher201ResponseWithDefaults instantiates a new CreateTeacher201Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTeacher201ResponseWithDefaults() *CreateTeacher201Response {
	this := CreateTeacher201Response{}
	return &this
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *CreateTeacher201Response) GetResult() string {
	if o == nil || IsNil(o.Result) {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTeacher201Response) GetResultOk() (*string, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *CreateTeacher201Response) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *CreateTeacher201Response) SetResult(v string) {
	o.Result = &v
}

// GetLocation returns the Location field value
func (o *CreateTeacher201Response) GetLocation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *CreateTeacher201Response) GetLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *CreateTeacher201Response) SetLocation(v string) {
	o.Location = v
}

func (o CreateTeacher201Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateTeacher201Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	toSerialize["location"] = o.Location

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateTeacher201Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"location",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateTeacher201Response := _CreateTeacher201Response{}

	err = json.Unmarshal(data, &varCreateTeacher201Response)

	if err != nil {
		return err
	}

	*o = CreateTeacher201Response(varCreateTeacher201Response)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "result")
		delete(additionalProperties, "location")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateTeacher201Response struct {
	value *CreateTeacher201Response
	isSet bool
}

func (v NullableCreateTeacher201Response) Get() *CreateTeacher201Response {
	return v.value
}

func (v *NullableCreateTeacher201Response) Set(val *CreateTeacher201Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTeacher201Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTeacher201Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTeacher201Response(val *CreateTeacher201Response) *NullableCreateTeacher201Response {
	return &NullableCreateTeacher201Response{value: val, isSet: true}
}

func (v NullableCreateTeacher201Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTeacher201Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


