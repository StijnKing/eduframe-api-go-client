/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Credit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Credit{}

// Credit struct for Credit
type Credit struct {
	// Unique identifier of the credit.
	Id int32 `json:"id"`
	// Unique identifier of the orders Student (User).
	StudentId int32 `json:"student_id"`
	// The amount of awarded credits.
	Credits float32 `json:"credits"`
	// Description of the awarded credits.
	Description NullableString `json:"description"`
	// Unique identifier of the Course.
	CourseId NullableInt32 `json:"course_id"`
	// Unique identifier of the Enrollment.
	EnrollmentId NullableInt32 `json:"enrollment_id"`
	// Timestamp of creation.
	CreatedAt time.Time `json:"created_at"`
}

type _Credit Credit

// NewCredit instantiates a new Credit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCredit(id int32, studentId int32, credits float32, description NullableString, courseId NullableInt32, enrollmentId NullableInt32, createdAt time.Time) *Credit {
	this := Credit{}
	this.Id = id
	this.StudentId = studentId
	this.Credits = credits
	this.Description = description
	this.CourseId = courseId
	this.EnrollmentId = enrollmentId
	this.CreatedAt = createdAt
	return &this
}

// NewCreditWithDefaults instantiates a new Credit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreditWithDefaults() *Credit {
	this := Credit{}
	return &this
}

// GetId returns the Id field value
func (o *Credit) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Credit) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Credit) SetId(v int32) {
	o.Id = v
}

// GetStudentId returns the StudentId field value
func (o *Credit) GetStudentId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StudentId
}

// GetStudentIdOk returns a tuple with the StudentId field value
// and a boolean to check if the value has been set.
func (o *Credit) GetStudentIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StudentId, true
}

// SetStudentId sets field value
func (o *Credit) SetStudentId(v int32) {
	o.StudentId = v
}

// GetCredits returns the Credits field value
func (o *Credit) GetCredits() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Credits
}

// GetCreditsOk returns a tuple with the Credits field value
// and a boolean to check if the value has been set.
func (o *Credit) GetCreditsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Credits, true
}

// SetCredits sets field value
func (o *Credit) SetCredits(v float32) {
	o.Credits = v
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Credit) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Credit) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *Credit) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetCourseId returns the CourseId field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *Credit) GetCourseId() int32 {
	if o == nil || o.CourseId.Get() == nil {
		var ret int32
		return ret
	}

	return *o.CourseId.Get()
}

// GetCourseIdOk returns a tuple with the CourseId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Credit) GetCourseIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CourseId.Get(), o.CourseId.IsSet()
}

// SetCourseId sets field value
func (o *Credit) SetCourseId(v int32) {
	o.CourseId.Set(&v)
}

// GetEnrollmentId returns the EnrollmentId field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *Credit) GetEnrollmentId() int32 {
	if o == nil || o.EnrollmentId.Get() == nil {
		var ret int32
		return ret
	}

	return *o.EnrollmentId.Get()
}

// GetEnrollmentIdOk returns a tuple with the EnrollmentId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Credit) GetEnrollmentIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnrollmentId.Get(), o.EnrollmentId.IsSet()
}

// SetEnrollmentId sets field value
func (o *Credit) SetEnrollmentId(v int32) {
	o.EnrollmentId.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
func (o *Credit) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Credit) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Credit) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o Credit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Credit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["student_id"] = o.StudentId
	toSerialize["credits"] = o.Credits
	toSerialize["description"] = o.Description.Get()
	toSerialize["course_id"] = o.CourseId.Get()
	toSerialize["enrollment_id"] = o.EnrollmentId.Get()
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *Credit) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"student_id",
		"credits",
		"description",
		"course_id",
		"enrollment_id",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCredit := _Credit{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCredit)

	if err != nil {
		return err
	}

	*o = Credit(varCredit)

	return err
}

type NullableCredit struct {
	value *Credit
	isSet bool
}

func (v NullableCredit) Get() *Credit {
	return v.value
}

func (v *NullableCredit) Set(val *Credit) {
	v.value = val
	v.isSet = true
}

func (v NullableCredit) IsSet() bool {
	return v.isSet
}

func (v *NullableCredit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCredit(val *Credit) *NullableCredit {
	return &NullableCredit{value: val, isSet: true}
}

func (v NullableCredit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCredit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


