/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"fmt"
)

// checks if the CreditCategoryWithIncludes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreditCategoryWithIncludes{}

// CreditCategoryWithIncludes struct for CreditCategoryWithIncludes
type CreditCategoryWithIncludes struct {
	// Unique identifier of the credit category.
	Id int32 `json:"id"`
	// Name of the credit category.
	Name string `json:"name"`
	Types []CreditType `json:"types"`
	AdditionalProperties map[string]interface{}
}

type _CreditCategoryWithIncludes CreditCategoryWithIncludes

// NewCreditCategoryWithIncludes instantiates a new CreditCategoryWithIncludes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreditCategoryWithIncludes(id int32, name string, types []CreditType) *CreditCategoryWithIncludes {
	this := CreditCategoryWithIncludes{}
	this.Id = id
	this.Name = name
	this.Types = types
	return &this
}

// NewCreditCategoryWithIncludesWithDefaults instantiates a new CreditCategoryWithIncludes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreditCategoryWithIncludesWithDefaults() *CreditCategoryWithIncludes {
	this := CreditCategoryWithIncludes{}
	return &this
}

// GetId returns the Id field value
func (o *CreditCategoryWithIncludes) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CreditCategoryWithIncludes) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CreditCategoryWithIncludes) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *CreditCategoryWithIncludes) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreditCategoryWithIncludes) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreditCategoryWithIncludes) SetName(v string) {
	o.Name = v
}

// GetTypes returns the Types field value
func (o *CreditCategoryWithIncludes) GetTypes() []CreditType {
	if o == nil {
		var ret []CreditType
		return ret
	}

	return o.Types
}

// GetTypesOk returns a tuple with the Types field value
// and a boolean to check if the value has been set.
func (o *CreditCategoryWithIncludes) GetTypesOk() ([]CreditType, bool) {
	if o == nil {
		return nil, false
	}
	return o.Types, true
}

// SetTypes sets field value
func (o *CreditCategoryWithIncludes) SetTypes(v []CreditType) {
	o.Types = v
}

func (o CreditCategoryWithIncludes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreditCategoryWithIncludes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["types"] = o.Types

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreditCategoryWithIncludes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"types",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreditCategoryWithIncludes := _CreditCategoryWithIncludes{}

	err = json.Unmarshal(data, &varCreditCategoryWithIncludes)

	if err != nil {
		return err
	}

	*o = CreditCategoryWithIncludes(varCreditCategoryWithIncludes)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "types")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreditCategoryWithIncludes struct {
	value *CreditCategoryWithIncludes
	isSet bool
}

func (v NullableCreditCategoryWithIncludes) Get() *CreditCategoryWithIncludes {
	return v.value
}

func (v *NullableCreditCategoryWithIncludes) Set(val *CreditCategoryWithIncludes) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditCategoryWithIncludes) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditCategoryWithIncludes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditCategoryWithIncludes(val *CreditCategoryWithIncludes) *NullableCreditCategoryWithIncludes {
	return &NullableCreditCategoryWithIncludes{value: val, isSet: true}
}

func (v NullableCreditCategoryWithIncludes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditCategoryWithIncludes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


