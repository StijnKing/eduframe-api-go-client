/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"fmt"
)

// checks if the CustomAssociationWithRecords type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomAssociationWithRecords{}

// CustomAssociationWithRecords struct for CustomAssociationWithRecords
type CustomAssociationWithRecords struct {
	// The type of the associated system model in slug format.
	AssociableType string `json:"associable_type"`
	// Unique identifier for the custom association.
	CustomAssociationId int32 `json:"custom_association_id"`
	// Unique identifier for the custom object.
	CustomObjectId *int32 `json:"custom_object_id,omitempty"`
	// List of custom record identifiers linked.
	CustomRecordIds []int32 `json:"custom_record_ids"`
	AdditionalProperties map[string]interface{}
}

type _CustomAssociationWithRecords CustomAssociationWithRecords

// NewCustomAssociationWithRecords instantiates a new CustomAssociationWithRecords object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomAssociationWithRecords(associableType string, customAssociationId int32, customRecordIds []int32) *CustomAssociationWithRecords {
	this := CustomAssociationWithRecords{}
	this.AssociableType = associableType
	this.CustomAssociationId = customAssociationId
	this.CustomRecordIds = customRecordIds
	return &this
}

// NewCustomAssociationWithRecordsWithDefaults instantiates a new CustomAssociationWithRecords object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomAssociationWithRecordsWithDefaults() *CustomAssociationWithRecords {
	this := CustomAssociationWithRecords{}
	return &this
}

// GetAssociableType returns the AssociableType field value
func (o *CustomAssociationWithRecords) GetAssociableType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssociableType
}

// GetAssociableTypeOk returns a tuple with the AssociableType field value
// and a boolean to check if the value has been set.
func (o *CustomAssociationWithRecords) GetAssociableTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssociableType, true
}

// SetAssociableType sets field value
func (o *CustomAssociationWithRecords) SetAssociableType(v string) {
	o.AssociableType = v
}

// GetCustomAssociationId returns the CustomAssociationId field value
func (o *CustomAssociationWithRecords) GetCustomAssociationId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CustomAssociationId
}

// GetCustomAssociationIdOk returns a tuple with the CustomAssociationId field value
// and a boolean to check if the value has been set.
func (o *CustomAssociationWithRecords) GetCustomAssociationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomAssociationId, true
}

// SetCustomAssociationId sets field value
func (o *CustomAssociationWithRecords) SetCustomAssociationId(v int32) {
	o.CustomAssociationId = v
}

// GetCustomObjectId returns the CustomObjectId field value if set, zero value otherwise.
func (o *CustomAssociationWithRecords) GetCustomObjectId() int32 {
	if o == nil || IsNil(o.CustomObjectId) {
		var ret int32
		return ret
	}
	return *o.CustomObjectId
}

// GetCustomObjectIdOk returns a tuple with the CustomObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomAssociationWithRecords) GetCustomObjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CustomObjectId) {
		return nil, false
	}
	return o.CustomObjectId, true
}

// HasCustomObjectId returns a boolean if a field has been set.
func (o *CustomAssociationWithRecords) HasCustomObjectId() bool {
	if o != nil && !IsNil(o.CustomObjectId) {
		return true
	}

	return false
}

// SetCustomObjectId gets a reference to the given int32 and assigns it to the CustomObjectId field.
func (o *CustomAssociationWithRecords) SetCustomObjectId(v int32) {
	o.CustomObjectId = &v
}

// GetCustomRecordIds returns the CustomRecordIds field value
func (o *CustomAssociationWithRecords) GetCustomRecordIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.CustomRecordIds
}

// GetCustomRecordIdsOk returns a tuple with the CustomRecordIds field value
// and a boolean to check if the value has been set.
func (o *CustomAssociationWithRecords) GetCustomRecordIdsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomRecordIds, true
}

// SetCustomRecordIds sets field value
func (o *CustomAssociationWithRecords) SetCustomRecordIds(v []int32) {
	o.CustomRecordIds = v
}

func (o CustomAssociationWithRecords) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomAssociationWithRecords) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["associable_type"] = o.AssociableType
	toSerialize["custom_association_id"] = o.CustomAssociationId
	if !IsNil(o.CustomObjectId) {
		toSerialize["custom_object_id"] = o.CustomObjectId
	}
	toSerialize["custom_record_ids"] = o.CustomRecordIds

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CustomAssociationWithRecords) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"associable_type",
		"custom_association_id",
		"custom_record_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomAssociationWithRecords := _CustomAssociationWithRecords{}

	err = json.Unmarshal(data, &varCustomAssociationWithRecords)

	if err != nil {
		return err
	}

	*o = CustomAssociationWithRecords(varCustomAssociationWithRecords)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "associable_type")
		delete(additionalProperties, "custom_association_id")
		delete(additionalProperties, "custom_object_id")
		delete(additionalProperties, "custom_record_ids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCustomAssociationWithRecords struct {
	value *CustomAssociationWithRecords
	isSet bool
}

func (v NullableCustomAssociationWithRecords) Get() *CustomAssociationWithRecords {
	return v.value
}

func (v *NullableCustomAssociationWithRecords) Set(val *CustomAssociationWithRecords) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomAssociationWithRecords) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomAssociationWithRecords) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomAssociationWithRecords(val *CustomAssociationWithRecords) *NullableCustomAssociationWithRecords {
	return &NullableCustomAssociationWithRecords{value: val, isSet: true}
}

func (v NullableCustomAssociationWithRecords) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomAssociationWithRecords) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


