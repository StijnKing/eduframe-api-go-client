/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"fmt"
)

// checks if the CustomObjectField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomObjectField{}

// CustomObjectField struct for CustomObjectField
type CustomObjectField struct {
	// Unique identifier of the question.
	Id int32 `json:"id"`
	// The slug of the custom field
	Slug string `json:"slug"`
	// The title and label of the question
	Title string `json:"title"`
	FieldType SignupQuestionFieldType `json:"field_type"`
	AdditionalProperties map[string]interface{}
}

type _CustomObjectField CustomObjectField

// NewCustomObjectField instantiates a new CustomObjectField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomObjectField(id int32, slug string, title string, fieldType SignupQuestionFieldType) *CustomObjectField {
	this := CustomObjectField{}
	this.Id = id
	this.Slug = slug
	this.Title = title
	this.FieldType = fieldType
	return &this
}

// NewCustomObjectFieldWithDefaults instantiates a new CustomObjectField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomObjectFieldWithDefaults() *CustomObjectField {
	this := CustomObjectField{}
	return &this
}

// GetId returns the Id field value
func (o *CustomObjectField) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CustomObjectField) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CustomObjectField) SetId(v int32) {
	o.Id = v
}

// GetSlug returns the Slug field value
func (o *CustomObjectField) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *CustomObjectField) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *CustomObjectField) SetSlug(v string) {
	o.Slug = v
}

// GetTitle returns the Title field value
func (o *CustomObjectField) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *CustomObjectField) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *CustomObjectField) SetTitle(v string) {
	o.Title = v
}

// GetFieldType returns the FieldType field value
func (o *CustomObjectField) GetFieldType() SignupQuestionFieldType {
	if o == nil {
		var ret SignupQuestionFieldType
		return ret
	}

	return o.FieldType
}

// GetFieldTypeOk returns a tuple with the FieldType field value
// and a boolean to check if the value has been set.
func (o *CustomObjectField) GetFieldTypeOk() (*SignupQuestionFieldType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldType, true
}

// SetFieldType sets field value
func (o *CustomObjectField) SetFieldType(v SignupQuestionFieldType) {
	o.FieldType = v
}

func (o CustomObjectField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomObjectField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["slug"] = o.Slug
	toSerialize["title"] = o.Title
	toSerialize["field_type"] = o.FieldType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CustomObjectField) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"slug",
		"title",
		"field_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomObjectField := _CustomObjectField{}

	err = json.Unmarshal(data, &varCustomObjectField)

	if err != nil {
		return err
	}

	*o = CustomObjectField(varCustomObjectField)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "slug")
		delete(additionalProperties, "title")
		delete(additionalProperties, "field_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCustomObjectField struct {
	value *CustomObjectField
	isSet bool
}

func (v NullableCustomObjectField) Get() *CustomObjectField {
	return v.value
}

func (v *NullableCustomObjectField) Set(val *CustomObjectField) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomObjectField) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomObjectField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomObjectField(val *CustomObjectField) *NullableCustomObjectField {
	return &NullableCustomObjectField{value: val, isSet: true}
}

func (v NullableCustomObjectField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomObjectField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


