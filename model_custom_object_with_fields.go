/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"fmt"
)

// checks if the CustomObjectWithFields type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomObjectWithFields{}

// CustomObjectWithFields struct for CustomObjectWithFields
type CustomObjectWithFields struct {
	// The unique identifier of the custom object
	Id int32 `json:"id"`
	// The singular name of the custom object
	NameSingular string `json:"name_singular"`
	// The plural name of the custom object
	NamePlural string `json:"name_plural"`
	Fields []CustomObjectField `json:"fields"`
	AdditionalProperties map[string]interface{}
}

type _CustomObjectWithFields CustomObjectWithFields

// NewCustomObjectWithFields instantiates a new CustomObjectWithFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomObjectWithFields(id int32, nameSingular string, namePlural string, fields []CustomObjectField) *CustomObjectWithFields {
	this := CustomObjectWithFields{}
	this.Id = id
	this.NameSingular = nameSingular
	this.NamePlural = namePlural
	this.Fields = fields
	return &this
}

// NewCustomObjectWithFieldsWithDefaults instantiates a new CustomObjectWithFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomObjectWithFieldsWithDefaults() *CustomObjectWithFields {
	this := CustomObjectWithFields{}
	return &this
}

// GetId returns the Id field value
func (o *CustomObjectWithFields) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CustomObjectWithFields) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CustomObjectWithFields) SetId(v int32) {
	o.Id = v
}

// GetNameSingular returns the NameSingular field value
func (o *CustomObjectWithFields) GetNameSingular() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NameSingular
}

// GetNameSingularOk returns a tuple with the NameSingular field value
// and a boolean to check if the value has been set.
func (o *CustomObjectWithFields) GetNameSingularOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NameSingular, true
}

// SetNameSingular sets field value
func (o *CustomObjectWithFields) SetNameSingular(v string) {
	o.NameSingular = v
}

// GetNamePlural returns the NamePlural field value
func (o *CustomObjectWithFields) GetNamePlural() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NamePlural
}

// GetNamePluralOk returns a tuple with the NamePlural field value
// and a boolean to check if the value has been set.
func (o *CustomObjectWithFields) GetNamePluralOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NamePlural, true
}

// SetNamePlural sets field value
func (o *CustomObjectWithFields) SetNamePlural(v string) {
	o.NamePlural = v
}

// GetFields returns the Fields field value
func (o *CustomObjectWithFields) GetFields() []CustomObjectField {
	if o == nil {
		var ret []CustomObjectField
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *CustomObjectWithFields) GetFieldsOk() ([]CustomObjectField, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fields, true
}

// SetFields sets field value
func (o *CustomObjectWithFields) SetFields(v []CustomObjectField) {
	o.Fields = v
}

func (o CustomObjectWithFields) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomObjectWithFields) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name_singular"] = o.NameSingular
	toSerialize["name_plural"] = o.NamePlural
	toSerialize["fields"] = o.Fields

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CustomObjectWithFields) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name_singular",
		"name_plural",
		"fields",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomObjectWithFields := _CustomObjectWithFields{}

	err = json.Unmarshal(data, &varCustomObjectWithFields)

	if err != nil {
		return err
	}

	*o = CustomObjectWithFields(varCustomObjectWithFields)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name_singular")
		delete(additionalProperties, "name_plural")
		delete(additionalProperties, "fields")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCustomObjectWithFields struct {
	value *CustomObjectWithFields
	isSet bool
}

func (v NullableCustomObjectWithFields) Get() *CustomObjectWithFields {
	return v.value
}

func (v *NullableCustomObjectWithFields) Set(val *CustomObjectWithFields) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomObjectWithFields) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomObjectWithFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomObjectWithFields(val *CustomObjectWithFields) *NullableCustomObjectWithFields {
	return &NullableCustomObjectWithFields{value: val, isSet: true}
}

func (v NullableCustomObjectWithFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomObjectWithFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


