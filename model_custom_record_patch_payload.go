/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
)

// checks if the CustomRecordPatchPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomRecordPatchPayload{}

// CustomRecordPatchPayload struct for CustomRecordPatchPayload
type CustomRecordPatchPayload struct {
	// Whether the custom record is active.
	Active *bool `json:"active,omitempty"`
	// The display name of the custom record.
	DisplayName *string `json:"display_name,omitempty"`
	// The JSON properties of the custom record.
	Properties map[string]CustomFieldValue `json:"properties,omitempty"`
}

// NewCustomRecordPatchPayload instantiates a new CustomRecordPatchPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomRecordPatchPayload() *CustomRecordPatchPayload {
	this := CustomRecordPatchPayload{}
	return &this
}

// NewCustomRecordPatchPayloadWithDefaults instantiates a new CustomRecordPatchPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomRecordPatchPayloadWithDefaults() *CustomRecordPatchPayload {
	this := CustomRecordPatchPayload{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *CustomRecordPatchPayload) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomRecordPatchPayload) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *CustomRecordPatchPayload) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *CustomRecordPatchPayload) SetActive(v bool) {
	o.Active = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *CustomRecordPatchPayload) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomRecordPatchPayload) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CustomRecordPatchPayload) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *CustomRecordPatchPayload) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *CustomRecordPatchPayload) GetProperties() map[string]CustomFieldValue {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]CustomFieldValue
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomRecordPatchPayload) GetPropertiesOk() (map[string]CustomFieldValue, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]CustomFieldValue{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *CustomRecordPatchPayload) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]CustomFieldValue and assigns it to the Properties field.
func (o *CustomRecordPatchPayload) SetProperties(v map[string]CustomFieldValue) {
	o.Properties = v
}

func (o CustomRecordPatchPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomRecordPatchPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	return toSerialize, nil
}

type NullableCustomRecordPatchPayload struct {
	value *CustomRecordPatchPayload
	isSet bool
}

func (v NullableCustomRecordPatchPayload) Get() *CustomRecordPatchPayload {
	return v.value
}

func (v *NullableCustomRecordPatchPayload) Set(val *CustomRecordPatchPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomRecordPatchPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomRecordPatchPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomRecordPatchPayload(val *CustomRecordPatchPayload) *NullableCustomRecordPatchPayload {
	return &NullableCustomRecordPatchPayload{value: val, isSet: true}
}

func (v NullableCustomRecordPatchPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomRecordPatchPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


