/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CustomRecordPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomRecordPayload{}

// CustomRecordPayload struct for CustomRecordPayload
type CustomRecordPayload struct {
	// Whether the custom record is active.
	Active *bool `json:"active,omitempty"`
	// The display name of the custom record.
	DisplayName string `json:"display_name"`
	// The JSON properties of the custom record.
	Properties map[string]CustomFieldValue `json:"properties"`
}

type _CustomRecordPayload CustomRecordPayload

// NewCustomRecordPayload instantiates a new CustomRecordPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomRecordPayload(displayName string, properties map[string]CustomFieldValue) *CustomRecordPayload {
	this := CustomRecordPayload{}
	var active bool = true
	this.Active = &active
	this.DisplayName = displayName
	this.Properties = properties
	return &this
}

// NewCustomRecordPayloadWithDefaults instantiates a new CustomRecordPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomRecordPayloadWithDefaults() *CustomRecordPayload {
	this := CustomRecordPayload{}
	var active bool = true
	this.Active = &active
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *CustomRecordPayload) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomRecordPayload) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *CustomRecordPayload) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *CustomRecordPayload) SetActive(v bool) {
	o.Active = &v
}

// GetDisplayName returns the DisplayName field value
func (o *CustomRecordPayload) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *CustomRecordPayload) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *CustomRecordPayload) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetProperties returns the Properties field value
func (o *CustomRecordPayload) GetProperties() map[string]CustomFieldValue {
	if o == nil {
		var ret map[string]CustomFieldValue
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *CustomRecordPayload) GetPropertiesOk() (map[string]CustomFieldValue, bool) {
	if o == nil {
		return map[string]CustomFieldValue{}, false
	}
	return o.Properties, true
}

// SetProperties sets field value
func (o *CustomRecordPayload) SetProperties(v map[string]CustomFieldValue) {
	o.Properties = v
}

func (o CustomRecordPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomRecordPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	toSerialize["display_name"] = o.DisplayName
	toSerialize["properties"] = o.Properties
	return toSerialize, nil
}

func (o *CustomRecordPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"display_name",
		"properties",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomRecordPayload := _CustomRecordPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomRecordPayload)

	if err != nil {
		return err
	}

	*o = CustomRecordPayload(varCustomRecordPayload)

	return err
}

type NullableCustomRecordPayload struct {
	value *CustomRecordPayload
	isSet bool
}

func (v NullableCustomRecordPayload) Get() *CustomRecordPayload {
	return v.value
}

func (v *NullableCustomRecordPayload) Set(val *CustomRecordPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomRecordPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomRecordPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomRecordPayload(val *CustomRecordPayload) *NullableCustomRecordPayload {
	return &NullableCustomRecordPayload{value: val, isSet: true}
}

func (v NullableCustomRecordPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomRecordPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


