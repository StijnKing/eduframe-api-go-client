/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DiscountCode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiscountCode{}

// DiscountCode struct for DiscountCode
type DiscountCode struct {
	// Unique identifier of the discount code.
	Id int32 `json:"id"`
	// The name of the discount code.
	Name string `json:"name"`
	// The discount code.
	DiscountCode string `json:"discount_code"`
	// The type of discount, which can be a fixed amount or a percentage.
	DiscountType string `json:"discount_type"`
	// The amount of the discount.
	Amount float32 `json:"amount"`
	// The maximum number of times the discount code can be used.
	MaxUsage NullableInt32 `json:"max_usage"`
	// The number of times the discount code has been used.
	UsageCount int32 `json:"usage_count"`
	// The start date of the discount code.
	StartDate string `json:"start_date"`
	// The expiration date of the discount code.
	ExpirationDate string `json:"expiration_date"`
}

type _DiscountCode DiscountCode

// NewDiscountCode instantiates a new DiscountCode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiscountCode(id int32, name string, discountCode string, discountType string, amount float32, maxUsage NullableInt32, usageCount int32, startDate string, expirationDate string) *DiscountCode {
	this := DiscountCode{}
	this.Id = id
	this.Name = name
	this.DiscountCode = discountCode
	this.DiscountType = discountType
	this.Amount = amount
	this.MaxUsage = maxUsage
	this.UsageCount = usageCount
	this.StartDate = startDate
	this.ExpirationDate = expirationDate
	return &this
}

// NewDiscountCodeWithDefaults instantiates a new DiscountCode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiscountCodeWithDefaults() *DiscountCode {
	this := DiscountCode{}
	return &this
}

// GetId returns the Id field value
func (o *DiscountCode) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DiscountCode) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DiscountCode) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *DiscountCode) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DiscountCode) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DiscountCode) SetName(v string) {
	o.Name = v
}

// GetDiscountCode returns the DiscountCode field value
func (o *DiscountCode) GetDiscountCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DiscountCode
}

// GetDiscountCodeOk returns a tuple with the DiscountCode field value
// and a boolean to check if the value has been set.
func (o *DiscountCode) GetDiscountCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiscountCode, true
}

// SetDiscountCode sets field value
func (o *DiscountCode) SetDiscountCode(v string) {
	o.DiscountCode = v
}

// GetDiscountType returns the DiscountType field value
func (o *DiscountCode) GetDiscountType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DiscountType
}

// GetDiscountTypeOk returns a tuple with the DiscountType field value
// and a boolean to check if the value has been set.
func (o *DiscountCode) GetDiscountTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiscountType, true
}

// SetDiscountType sets field value
func (o *DiscountCode) SetDiscountType(v string) {
	o.DiscountType = v
}

// GetAmount returns the Amount field value
func (o *DiscountCode) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *DiscountCode) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *DiscountCode) SetAmount(v float32) {
	o.Amount = v
}

// GetMaxUsage returns the MaxUsage field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *DiscountCode) GetMaxUsage() int32 {
	if o == nil || o.MaxUsage.Get() == nil {
		var ret int32
		return ret
	}

	return *o.MaxUsage.Get()
}

// GetMaxUsageOk returns a tuple with the MaxUsage field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiscountCode) GetMaxUsageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxUsage.Get(), o.MaxUsage.IsSet()
}

// SetMaxUsage sets field value
func (o *DiscountCode) SetMaxUsage(v int32) {
	o.MaxUsage.Set(&v)
}

// GetUsageCount returns the UsageCount field value
func (o *DiscountCode) GetUsageCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UsageCount
}

// GetUsageCountOk returns a tuple with the UsageCount field value
// and a boolean to check if the value has been set.
func (o *DiscountCode) GetUsageCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsageCount, true
}

// SetUsageCount sets field value
func (o *DiscountCode) SetUsageCount(v int32) {
	o.UsageCount = v
}

// GetStartDate returns the StartDate field value
func (o *DiscountCode) GetStartDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *DiscountCode) GetStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *DiscountCode) SetStartDate(v string) {
	o.StartDate = v
}

// GetExpirationDate returns the ExpirationDate field value
func (o *DiscountCode) GetExpirationDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value
// and a boolean to check if the value has been set.
func (o *DiscountCode) GetExpirationDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpirationDate, true
}

// SetExpirationDate sets field value
func (o *DiscountCode) SetExpirationDate(v string) {
	o.ExpirationDate = v
}

func (o DiscountCode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiscountCode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["discount_code"] = o.DiscountCode
	toSerialize["discount_type"] = o.DiscountType
	toSerialize["amount"] = o.Amount
	toSerialize["max_usage"] = o.MaxUsage.Get()
	toSerialize["usage_count"] = o.UsageCount
	toSerialize["start_date"] = o.StartDate
	toSerialize["expiration_date"] = o.ExpirationDate
	return toSerialize, nil
}

func (o *DiscountCode) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"discount_code",
		"discount_type",
		"amount",
		"max_usage",
		"usage_count",
		"start_date",
		"expiration_date",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDiscountCode := _DiscountCode{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDiscountCode)

	if err != nil {
		return err
	}

	*o = DiscountCode(varDiscountCode)

	return err
}

type NullableDiscountCode struct {
	value *DiscountCode
	isSet bool
}

func (v NullableDiscountCode) Get() *DiscountCode {
	return v.value
}

func (v *NullableDiscountCode) Set(val *DiscountCode) {
	v.value = val
	v.isSet = true
}

func (v NullableDiscountCode) IsSet() bool {
	return v.isSet
}

func (v *NullableDiscountCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiscountCode(val *DiscountCode) *NullableDiscountCode {
	return &NullableDiscountCode{value: val, isSet: true}
}

func (v NullableDiscountCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiscountCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


