/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Edition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Edition{}

// Edition struct for Edition
type Edition struct {
	// Unique identifier of the program edition.
	Id int32 `json:"id"`
	// Name of the program edition.
	Name string `json:"name"`
	// Unique identifier of associated program.
	ProgramId int32 `json:"program_id"`
	// The price to be paid for this edition.
	Cost NullableString `json:"cost"`
	CostScheme CostScheme `json:"cost_scheme"`
	// A number representing the minimum number of participants.
	MinParticipants NullableInt32 `json:"min_participants"`
	// A number representing the maximum number of participants.
	MaxParticipants NullableInt32 `json:"max_participants"`
	// The current amount of participants.
	CurrentParticipants int32 `json:"current_participants"`
	// Boolean representing the publishable status of the edition.
	IsPublished bool `json:"is_published"`
	// Nominal start date of the edition.
	StartDate NullableString `json:"start_date"`
	// Nominal end date of the edition (inclusive).
	EndDate NullableString `json:"end_date"`
}

type _Edition Edition

// NewEdition instantiates a new Edition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEdition(id int32, name string, programId int32, cost NullableString, costScheme CostScheme, minParticipants NullableInt32, maxParticipants NullableInt32, currentParticipants int32, isPublished bool, startDate NullableString, endDate NullableString) *Edition {
	this := Edition{}
	this.Id = id
	this.Name = name
	this.ProgramId = programId
	this.Cost = cost
	this.CostScheme = costScheme
	this.MinParticipants = minParticipants
	this.MaxParticipants = maxParticipants
	this.CurrentParticipants = currentParticipants
	this.IsPublished = isPublished
	this.StartDate = startDate
	this.EndDate = endDate
	return &this
}

// NewEditionWithDefaults instantiates a new Edition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditionWithDefaults() *Edition {
	this := Edition{}
	var isPublished bool = false
	this.IsPublished = isPublished
	return &this
}

// GetId returns the Id field value
func (o *Edition) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Edition) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Edition) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Edition) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Edition) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Edition) SetName(v string) {
	o.Name = v
}

// GetProgramId returns the ProgramId field value
func (o *Edition) GetProgramId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProgramId
}

// GetProgramIdOk returns a tuple with the ProgramId field value
// and a boolean to check if the value has been set.
func (o *Edition) GetProgramIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProgramId, true
}

// SetProgramId sets field value
func (o *Edition) SetProgramId(v int32) {
	o.ProgramId = v
}

// GetCost returns the Cost field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Edition) GetCost() string {
	if o == nil || o.Cost.Get() == nil {
		var ret string
		return ret
	}

	return *o.Cost.Get()
}

// GetCostOk returns a tuple with the Cost field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Edition) GetCostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cost.Get(), o.Cost.IsSet()
}

// SetCost sets field value
func (o *Edition) SetCost(v string) {
	o.Cost.Set(&v)
}

// GetCostScheme returns the CostScheme field value
func (o *Edition) GetCostScheme() CostScheme {
	if o == nil {
		var ret CostScheme
		return ret
	}

	return o.CostScheme
}

// GetCostSchemeOk returns a tuple with the CostScheme field value
// and a boolean to check if the value has been set.
func (o *Edition) GetCostSchemeOk() (*CostScheme, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CostScheme, true
}

// SetCostScheme sets field value
func (o *Edition) SetCostScheme(v CostScheme) {
	o.CostScheme = v
}

// GetMinParticipants returns the MinParticipants field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *Edition) GetMinParticipants() int32 {
	if o == nil || o.MinParticipants.Get() == nil {
		var ret int32
		return ret
	}

	return *o.MinParticipants.Get()
}

// GetMinParticipantsOk returns a tuple with the MinParticipants field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Edition) GetMinParticipantsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinParticipants.Get(), o.MinParticipants.IsSet()
}

// SetMinParticipants sets field value
func (o *Edition) SetMinParticipants(v int32) {
	o.MinParticipants.Set(&v)
}

// GetMaxParticipants returns the MaxParticipants field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *Edition) GetMaxParticipants() int32 {
	if o == nil || o.MaxParticipants.Get() == nil {
		var ret int32
		return ret
	}

	return *o.MaxParticipants.Get()
}

// GetMaxParticipantsOk returns a tuple with the MaxParticipants field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Edition) GetMaxParticipantsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxParticipants.Get(), o.MaxParticipants.IsSet()
}

// SetMaxParticipants sets field value
func (o *Edition) SetMaxParticipants(v int32) {
	o.MaxParticipants.Set(&v)
}

// GetCurrentParticipants returns the CurrentParticipants field value
func (o *Edition) GetCurrentParticipants() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CurrentParticipants
}

// GetCurrentParticipantsOk returns a tuple with the CurrentParticipants field value
// and a boolean to check if the value has been set.
func (o *Edition) GetCurrentParticipantsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentParticipants, true
}

// SetCurrentParticipants sets field value
func (o *Edition) SetCurrentParticipants(v int32) {
	o.CurrentParticipants = v
}

// GetIsPublished returns the IsPublished field value
func (o *Edition) GetIsPublished() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPublished
}

// GetIsPublishedOk returns a tuple with the IsPublished field value
// and a boolean to check if the value has been set.
func (o *Edition) GetIsPublishedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPublished, true
}

// SetIsPublished sets field value
func (o *Edition) SetIsPublished(v bool) {
	o.IsPublished = v
}

// GetStartDate returns the StartDate field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Edition) GetStartDate() string {
	if o == nil || o.StartDate.Get() == nil {
		var ret string
		return ret
	}

	return *o.StartDate.Get()
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Edition) GetStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartDate.Get(), o.StartDate.IsSet()
}

// SetStartDate sets field value
func (o *Edition) SetStartDate(v string) {
	o.StartDate.Set(&v)
}

// GetEndDate returns the EndDate field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Edition) GetEndDate() string {
	if o == nil || o.EndDate.Get() == nil {
		var ret string
		return ret
	}

	return *o.EndDate.Get()
}

// GetEndDateOk returns a tuple with the EndDate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Edition) GetEndDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndDate.Get(), o.EndDate.IsSet()
}

// SetEndDate sets field value
func (o *Edition) SetEndDate(v string) {
	o.EndDate.Set(&v)
}

func (o Edition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Edition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["program_id"] = o.ProgramId
	toSerialize["cost"] = o.Cost.Get()
	toSerialize["cost_scheme"] = o.CostScheme
	toSerialize["min_participants"] = o.MinParticipants.Get()
	toSerialize["max_participants"] = o.MaxParticipants.Get()
	toSerialize["current_participants"] = o.CurrentParticipants
	toSerialize["is_published"] = o.IsPublished
	toSerialize["start_date"] = o.StartDate.Get()
	toSerialize["end_date"] = o.EndDate.Get()
	return toSerialize, nil
}

func (o *Edition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"program_id",
		"cost",
		"cost_scheme",
		"min_participants",
		"max_participants",
		"current_participants",
		"is_published",
		"start_date",
		"end_date",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEdition := _Edition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEdition)

	if err != nil {
		return err
	}

	*o = Edition(varEdition)

	return err
}

type NullableEdition struct {
	value *Edition
	isSet bool
}

func (v NullableEdition) Get() *Edition {
	return v.value
}

func (v *NullableEdition) Set(val *Edition) {
	v.value = val
	v.isSet = true
}

func (v NullableEdition) IsSet() bool {
	return v.isSet
}

func (v *NullableEdition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdition(val *Edition) *NullableEdition {
	return &NullableEdition{value: val, isSet: true}
}

func (v NullableEdition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


