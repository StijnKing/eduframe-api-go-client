/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Educator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Educator{}

// Educator struct for Educator
type Educator struct {
	// Unique identifier of the educator.
	Id int32 `json:"id"`
	// Unique human readable identifier of the educator.
	Slug string `json:"slug"`
	// Text that is shown by default on the planning page and signup.
	StandardPlanningText NullableString `json:"standard_planning_text"`
	// Default VAT multiplier of the educator.
	DefaultInvoiceVatMultiplier NullableString `json:"default_invoice_vat_multiplier"`
	// Phone number of the educator.
	Phone NullableString `json:"phone"`
	// Website URL of the educator.
	WebsiteUrl NullableString `json:"website_url"`
	// What is de default selected account type on the signup page.
	SignupDefaultAccountType string `json:"signup_default_account_type"`
	// The contact info shown on the signup form (for directing questions to).
	SignupContactInfo NullableString `json:"signup_contact_info"`
	Currency Currency `json:"currency"`
	Country Country `json:"country"`
	// The email (reply to) of the educator.
	Email NullableString `json:"email"`
	// Time zone identifier of the educator.
	TimeZone string `json:"time_zone"`
	// The name of the educator.
	Name string `json:"name"`
	Locale NullableLocale `json:"locale,omitempty"`
	// URL to the terms and conditions of the educator.
	TermsUrl *string `json:"terms_url,omitempty"`
}

type _Educator Educator

// NewEducator instantiates a new Educator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEducator(id int32, slug string, standardPlanningText NullableString, defaultInvoiceVatMultiplier NullableString, phone NullableString, websiteUrl NullableString, signupDefaultAccountType string, signupContactInfo NullableString, currency Currency, country Country, email NullableString, timeZone string, name string) *Educator {
	this := Educator{}
	this.Id = id
	this.Slug = slug
	this.StandardPlanningText = standardPlanningText
	this.DefaultInvoiceVatMultiplier = defaultInvoiceVatMultiplier
	this.Phone = phone
	this.WebsiteUrl = websiteUrl
	this.SignupDefaultAccountType = signupDefaultAccountType
	this.SignupContactInfo = signupContactInfo
	this.Currency = currency
	this.Country = country
	this.Email = email
	this.TimeZone = timeZone
	this.Name = name
	return &this
}

// NewEducatorWithDefaults instantiates a new Educator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEducatorWithDefaults() *Educator {
	this := Educator{}
	return &this
}

// GetId returns the Id field value
func (o *Educator) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Educator) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Educator) SetId(v int32) {
	o.Id = v
}

// GetSlug returns the Slug field value
func (o *Educator) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *Educator) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *Educator) SetSlug(v string) {
	o.Slug = v
}

// GetStandardPlanningText returns the StandardPlanningText field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Educator) GetStandardPlanningText() string {
	if o == nil || o.StandardPlanningText.Get() == nil {
		var ret string
		return ret
	}

	return *o.StandardPlanningText.Get()
}

// GetStandardPlanningTextOk returns a tuple with the StandardPlanningText field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Educator) GetStandardPlanningTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StandardPlanningText.Get(), o.StandardPlanningText.IsSet()
}

// SetStandardPlanningText sets field value
func (o *Educator) SetStandardPlanningText(v string) {
	o.StandardPlanningText.Set(&v)
}

// GetDefaultInvoiceVatMultiplier returns the DefaultInvoiceVatMultiplier field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Educator) GetDefaultInvoiceVatMultiplier() string {
	if o == nil || o.DefaultInvoiceVatMultiplier.Get() == nil {
		var ret string
		return ret
	}

	return *o.DefaultInvoiceVatMultiplier.Get()
}

// GetDefaultInvoiceVatMultiplierOk returns a tuple with the DefaultInvoiceVatMultiplier field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Educator) GetDefaultInvoiceVatMultiplierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultInvoiceVatMultiplier.Get(), o.DefaultInvoiceVatMultiplier.IsSet()
}

// SetDefaultInvoiceVatMultiplier sets field value
func (o *Educator) SetDefaultInvoiceVatMultiplier(v string) {
	o.DefaultInvoiceVatMultiplier.Set(&v)
}

// GetPhone returns the Phone field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Educator) GetPhone() string {
	if o == nil || o.Phone.Get() == nil {
		var ret string
		return ret
	}

	return *o.Phone.Get()
}

// GetPhoneOk returns a tuple with the Phone field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Educator) GetPhoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Phone.Get(), o.Phone.IsSet()
}

// SetPhone sets field value
func (o *Educator) SetPhone(v string) {
	o.Phone.Set(&v)
}

// GetWebsiteUrl returns the WebsiteUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Educator) GetWebsiteUrl() string {
	if o == nil || o.WebsiteUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.WebsiteUrl.Get()
}

// GetWebsiteUrlOk returns a tuple with the WebsiteUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Educator) GetWebsiteUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebsiteUrl.Get(), o.WebsiteUrl.IsSet()
}

// SetWebsiteUrl sets field value
func (o *Educator) SetWebsiteUrl(v string) {
	o.WebsiteUrl.Set(&v)
}

// GetSignupDefaultAccountType returns the SignupDefaultAccountType field value
func (o *Educator) GetSignupDefaultAccountType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignupDefaultAccountType
}

// GetSignupDefaultAccountTypeOk returns a tuple with the SignupDefaultAccountType field value
// and a boolean to check if the value has been set.
func (o *Educator) GetSignupDefaultAccountTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignupDefaultAccountType, true
}

// SetSignupDefaultAccountType sets field value
func (o *Educator) SetSignupDefaultAccountType(v string) {
	o.SignupDefaultAccountType = v
}

// GetSignupContactInfo returns the SignupContactInfo field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Educator) GetSignupContactInfo() string {
	if o == nil || o.SignupContactInfo.Get() == nil {
		var ret string
		return ret
	}

	return *o.SignupContactInfo.Get()
}

// GetSignupContactInfoOk returns a tuple with the SignupContactInfo field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Educator) GetSignupContactInfoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SignupContactInfo.Get(), o.SignupContactInfo.IsSet()
}

// SetSignupContactInfo sets field value
func (o *Educator) SetSignupContactInfo(v string) {
	o.SignupContactInfo.Set(&v)
}

// GetCurrency returns the Currency field value
func (o *Educator) GetCurrency() Currency {
	if o == nil {
		var ret Currency
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *Educator) GetCurrencyOk() (*Currency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *Educator) SetCurrency(v Currency) {
	o.Currency = v
}

// GetCountry returns the Country field value
func (o *Educator) GetCountry() Country {
	if o == nil {
		var ret Country
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *Educator) GetCountryOk() (*Country, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *Educator) SetCountry(v Country) {
	o.Country = v
}

// GetEmail returns the Email field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Educator) GetEmail() string {
	if o == nil || o.Email.Get() == nil {
		var ret string
		return ret
	}

	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Educator) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// SetEmail sets field value
func (o *Educator) SetEmail(v string) {
	o.Email.Set(&v)
}

// GetTimeZone returns the TimeZone field value
func (o *Educator) GetTimeZone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value
// and a boolean to check if the value has been set.
func (o *Educator) GetTimeZoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeZone, true
}

// SetTimeZone sets field value
func (o *Educator) SetTimeZone(v string) {
	o.TimeZone = v
}

// GetName returns the Name field value
func (o *Educator) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Educator) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Educator) SetName(v string) {
	o.Name = v
}

// GetLocale returns the Locale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Educator) GetLocale() Locale {
	if o == nil || IsNil(o.Locale.Get()) {
		var ret Locale
		return ret
	}
	return *o.Locale.Get()
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Educator) GetLocaleOk() (*Locale, bool) {
	if o == nil {
		return nil, false
	}
	return o.Locale.Get(), o.Locale.IsSet()
}

// HasLocale returns a boolean if a field has been set.
func (o *Educator) HasLocale() bool {
	if o != nil && o.Locale.IsSet() {
		return true
	}

	return false
}

// SetLocale gets a reference to the given NullableLocale and assigns it to the Locale field.
func (o *Educator) SetLocale(v Locale) {
	o.Locale.Set(&v)
}
// SetLocaleNil sets the value for Locale to be an explicit nil
func (o *Educator) SetLocaleNil() {
	o.Locale.Set(nil)
}

// UnsetLocale ensures that no value is present for Locale, not even an explicit nil
func (o *Educator) UnsetLocale() {
	o.Locale.Unset()
}

// GetTermsUrl returns the TermsUrl field value if set, zero value otherwise.
func (o *Educator) GetTermsUrl() string {
	if o == nil || IsNil(o.TermsUrl) {
		var ret string
		return ret
	}
	return *o.TermsUrl
}

// GetTermsUrlOk returns a tuple with the TermsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Educator) GetTermsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.TermsUrl) {
		return nil, false
	}
	return o.TermsUrl, true
}

// HasTermsUrl returns a boolean if a field has been set.
func (o *Educator) HasTermsUrl() bool {
	if o != nil && !IsNil(o.TermsUrl) {
		return true
	}

	return false
}

// SetTermsUrl gets a reference to the given string and assigns it to the TermsUrl field.
func (o *Educator) SetTermsUrl(v string) {
	o.TermsUrl = &v
}

func (o Educator) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Educator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["slug"] = o.Slug
	toSerialize["standard_planning_text"] = o.StandardPlanningText.Get()
	toSerialize["default_invoice_vat_multiplier"] = o.DefaultInvoiceVatMultiplier.Get()
	toSerialize["phone"] = o.Phone.Get()
	toSerialize["website_url"] = o.WebsiteUrl.Get()
	toSerialize["signup_default_account_type"] = o.SignupDefaultAccountType
	toSerialize["signup_contact_info"] = o.SignupContactInfo.Get()
	toSerialize["currency"] = o.Currency
	toSerialize["country"] = o.Country
	toSerialize["email"] = o.Email.Get()
	toSerialize["time_zone"] = o.TimeZone
	toSerialize["name"] = o.Name
	if o.Locale.IsSet() {
		toSerialize["locale"] = o.Locale.Get()
	}
	if !IsNil(o.TermsUrl) {
		toSerialize["terms_url"] = o.TermsUrl
	}
	return toSerialize, nil
}

func (o *Educator) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"slug",
		"standard_planning_text",
		"default_invoice_vat_multiplier",
		"phone",
		"website_url",
		"signup_default_account_type",
		"signup_contact_info",
		"currency",
		"country",
		"email",
		"time_zone",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEducator := _Educator{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEducator)

	if err != nil {
		return err
	}

	*o = Educator(varEducator)

	return err
}

type NullableEducator struct {
	value *Educator
	isSet bool
}

func (v NullableEducator) Get() *Educator {
	return v.value
}

func (v *NullableEducator) Set(val *Educator) {
	v.value = val
	v.isSet = true
}

func (v NullableEducator) IsSet() bool {
	return v.isSet
}

func (v *NullableEducator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEducator(val *Educator) *NullableEducator {
	return &NullableEducator{value: val, isSet: true}
}

func (v NullableEducator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEducator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


