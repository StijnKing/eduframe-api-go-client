/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"fmt"
)

// EnrollmentStatus The status of the enrollment.
type EnrollmentStatus string

// List of EnrollmentStatus
const (
	ACTIVE EnrollmentStatus = "active"
	CANCELED EnrollmentStatus = "canceled"
	COMPLETED EnrollmentStatus = "completed"
	CONFIRMED EnrollmentStatus = "confirmed"
)

// All allowed values of EnrollmentStatus enum
var AllowedEnrollmentStatusEnumValues = []EnrollmentStatus{
	"active",
	"canceled",
	"completed",
	"confirmed",
}

func (v *EnrollmentStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnrollmentStatus(value)
	for _, existing := range AllowedEnrollmentStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnrollmentStatus", value)
}

// NewEnrollmentStatusFromValue returns a pointer to a valid EnrollmentStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnrollmentStatusFromValue(v string) (*EnrollmentStatus, error) {
	ev := EnrollmentStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnrollmentStatus: valid values are %v", v, AllowedEnrollmentStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnrollmentStatus) IsValid() bool {
	for _, existing := range AllowedEnrollmentStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnrollmentStatus value
func (v EnrollmentStatus) Ptr() *EnrollmentStatus {
	return &v
}

type NullableEnrollmentStatus struct {
	value *EnrollmentStatus
	isSet bool
}

func (v NullableEnrollmentStatus) Get() *EnrollmentStatus {
	return v.value
}

func (v *NullableEnrollmentStatus) Set(val *EnrollmentStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEnrollmentStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEnrollmentStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnrollmentStatus(val *EnrollmentStatus) *NullableEnrollmentStatus {
	return &NullableEnrollmentStatus{value: val, isSet: true}
}

func (v NullableEnrollmentStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnrollmentStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

