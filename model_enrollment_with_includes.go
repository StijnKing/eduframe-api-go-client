/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the EnrollmentWithIncludes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnrollmentWithIncludes{}

// EnrollmentWithIncludes struct for EnrollmentWithIncludes
type EnrollmentWithIncludes struct {
	// Unique identifier of the enrollment.
	Id int32 `json:"id"`
	// Unique identifier of the student.
	StudentId int32 `json:"student_id"`
	// Unique identifier of the planned course.
	PlannedCourseId int32 `json:"planned_course_id"`
	// Unique identifier of the order.
	OrderId NullableInt32 `json:"order_id"`
	// If it is an enrollment of a fixed course, it equals the start date. For a flexible course, it returns the enrollment specific start date.
	StartDate string `json:"start_date"`
	// If it is an enrollment of a fixed course, it equals the end date. For a flexible course, it returns the enrollment specific end date.
	EndDate NullableString `json:"end_date"`
	Status EnrollmentStatus `json:"status"`
	GraduationState GraduationState `json:"graduation_state"`
	// Timestamp of last update.
	UpdatedAt time.Time `json:"updated_at"`
	// Timestamp of creation.
	CreatedAt time.Time `json:"created_at"`
	Grade NullableGrade `json:"grade,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EnrollmentWithIncludes EnrollmentWithIncludes

// NewEnrollmentWithIncludes instantiates a new EnrollmentWithIncludes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnrollmentWithIncludes(id int32, studentId int32, plannedCourseId int32, orderId NullableInt32, startDate string, endDate NullableString, status EnrollmentStatus, graduationState GraduationState, updatedAt time.Time, createdAt time.Time) *EnrollmentWithIncludes {
	this := EnrollmentWithIncludes{}
	this.Id = id
	this.StudentId = studentId
	this.PlannedCourseId = plannedCourseId
	this.OrderId = orderId
	this.StartDate = startDate
	this.EndDate = endDate
	this.Status = status
	this.GraduationState = graduationState
	this.UpdatedAt = updatedAt
	this.CreatedAt = createdAt
	return &this
}

// NewEnrollmentWithIncludesWithDefaults instantiates a new EnrollmentWithIncludes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnrollmentWithIncludesWithDefaults() *EnrollmentWithIncludes {
	this := EnrollmentWithIncludes{}
	return &this
}

// GetId returns the Id field value
func (o *EnrollmentWithIncludes) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EnrollmentWithIncludes) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EnrollmentWithIncludes) SetId(v int32) {
	o.Id = v
}

// GetStudentId returns the StudentId field value
func (o *EnrollmentWithIncludes) GetStudentId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StudentId
}

// GetStudentIdOk returns a tuple with the StudentId field value
// and a boolean to check if the value has been set.
func (o *EnrollmentWithIncludes) GetStudentIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StudentId, true
}

// SetStudentId sets field value
func (o *EnrollmentWithIncludes) SetStudentId(v int32) {
	o.StudentId = v
}

// GetPlannedCourseId returns the PlannedCourseId field value
func (o *EnrollmentWithIncludes) GetPlannedCourseId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PlannedCourseId
}

// GetPlannedCourseIdOk returns a tuple with the PlannedCourseId field value
// and a boolean to check if the value has been set.
func (o *EnrollmentWithIncludes) GetPlannedCourseIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlannedCourseId, true
}

// SetPlannedCourseId sets field value
func (o *EnrollmentWithIncludes) SetPlannedCourseId(v int32) {
	o.PlannedCourseId = v
}

// GetOrderId returns the OrderId field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *EnrollmentWithIncludes) GetOrderId() int32 {
	if o == nil || o.OrderId.Get() == nil {
		var ret int32
		return ret
	}

	return *o.OrderId.Get()
}

// GetOrderIdOk returns a tuple with the OrderId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EnrollmentWithIncludes) GetOrderIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrderId.Get(), o.OrderId.IsSet()
}

// SetOrderId sets field value
func (o *EnrollmentWithIncludes) SetOrderId(v int32) {
	o.OrderId.Set(&v)
}

// GetStartDate returns the StartDate field value
func (o *EnrollmentWithIncludes) GetStartDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *EnrollmentWithIncludes) GetStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *EnrollmentWithIncludes) SetStartDate(v string) {
	o.StartDate = v
}

// GetEndDate returns the EndDate field value
// If the value is explicit nil, the zero value for string will be returned
func (o *EnrollmentWithIncludes) GetEndDate() string {
	if o == nil || o.EndDate.Get() == nil {
		var ret string
		return ret
	}

	return *o.EndDate.Get()
}

// GetEndDateOk returns a tuple with the EndDate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EnrollmentWithIncludes) GetEndDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndDate.Get(), o.EndDate.IsSet()
}

// SetEndDate sets field value
func (o *EnrollmentWithIncludes) SetEndDate(v string) {
	o.EndDate.Set(&v)
}

// GetStatus returns the Status field value
func (o *EnrollmentWithIncludes) GetStatus() EnrollmentStatus {
	if o == nil {
		var ret EnrollmentStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *EnrollmentWithIncludes) GetStatusOk() (*EnrollmentStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *EnrollmentWithIncludes) SetStatus(v EnrollmentStatus) {
	o.Status = v
}

// GetGraduationState returns the GraduationState field value
func (o *EnrollmentWithIncludes) GetGraduationState() GraduationState {
	if o == nil {
		var ret GraduationState
		return ret
	}

	return o.GraduationState
}

// GetGraduationStateOk returns a tuple with the GraduationState field value
// and a boolean to check if the value has been set.
func (o *EnrollmentWithIncludes) GetGraduationStateOk() (*GraduationState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GraduationState, true
}

// SetGraduationState sets field value
func (o *EnrollmentWithIncludes) SetGraduationState(v GraduationState) {
	o.GraduationState = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *EnrollmentWithIncludes) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *EnrollmentWithIncludes) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *EnrollmentWithIncludes) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *EnrollmentWithIncludes) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *EnrollmentWithIncludes) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *EnrollmentWithIncludes) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetGrade returns the Grade field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EnrollmentWithIncludes) GetGrade() Grade {
	if o == nil || IsNil(o.Grade.Get()) {
		var ret Grade
		return ret
	}
	return *o.Grade.Get()
}

// GetGradeOk returns a tuple with the Grade field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EnrollmentWithIncludes) GetGradeOk() (*Grade, bool) {
	if o == nil {
		return nil, false
	}
	return o.Grade.Get(), o.Grade.IsSet()
}

// HasGrade returns a boolean if a field has been set.
func (o *EnrollmentWithIncludes) HasGrade() bool {
	if o != nil && o.Grade.IsSet() {
		return true
	}

	return false
}

// SetGrade gets a reference to the given NullableGrade and assigns it to the Grade field.
func (o *EnrollmentWithIncludes) SetGrade(v Grade) {
	o.Grade.Set(&v)
}
// SetGradeNil sets the value for Grade to be an explicit nil
func (o *EnrollmentWithIncludes) SetGradeNil() {
	o.Grade.Set(nil)
}

// UnsetGrade ensures that no value is present for Grade, not even an explicit nil
func (o *EnrollmentWithIncludes) UnsetGrade() {
	o.Grade.Unset()
}

func (o EnrollmentWithIncludes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnrollmentWithIncludes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["student_id"] = o.StudentId
	toSerialize["planned_course_id"] = o.PlannedCourseId
	toSerialize["order_id"] = o.OrderId.Get()
	toSerialize["start_date"] = o.StartDate
	toSerialize["end_date"] = o.EndDate.Get()
	toSerialize["status"] = o.Status
	toSerialize["graduation_state"] = o.GraduationState
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["created_at"] = o.CreatedAt
	if o.Grade.IsSet() {
		toSerialize["grade"] = o.Grade.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnrollmentWithIncludes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"student_id",
		"planned_course_id",
		"order_id",
		"start_date",
		"end_date",
		"status",
		"graduation_state",
		"updated_at",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnrollmentWithIncludes := _EnrollmentWithIncludes{}

	err = json.Unmarshal(data, &varEnrollmentWithIncludes)

	if err != nil {
		return err
	}

	*o = EnrollmentWithIncludes(varEnrollmentWithIncludes)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "student_id")
		delete(additionalProperties, "planned_course_id")
		delete(additionalProperties, "order_id")
		delete(additionalProperties, "start_date")
		delete(additionalProperties, "end_date")
		delete(additionalProperties, "status")
		delete(additionalProperties, "graduation_state")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "grade")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnrollmentWithIncludes struct {
	value *EnrollmentWithIncludes
	isSet bool
}

func (v NullableEnrollmentWithIncludes) Get() *EnrollmentWithIncludes {
	return v.value
}

func (v *NullableEnrollmentWithIncludes) Set(val *EnrollmentWithIncludes) {
	v.value = val
	v.isSet = true
}

func (v NullableEnrollmentWithIncludes) IsSet() bool {
	return v.isSet
}

func (v *NullableEnrollmentWithIncludes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnrollmentWithIncludes(val *EnrollmentWithIncludes) *NullableEnrollmentWithIncludes {
	return &NullableEnrollmentWithIncludes{value: val, isSet: true}
}

func (v NullableEnrollmentWithIncludes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnrollmentWithIncludes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


