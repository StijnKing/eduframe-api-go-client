/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LeadProduct type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LeadProduct{}

// LeadProduct struct for LeadProduct
type LeadProduct struct {
	// ID of the catalog product
	CatalogProductId int32 `json:"catalog_product_id"`
	// ID of the catalog variant
	CatalogVariantId NullableInt32 `json:"catalog_variant_id"`
}

type _LeadProduct LeadProduct

// NewLeadProduct instantiates a new LeadProduct object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLeadProduct(catalogProductId int32, catalogVariantId NullableInt32) *LeadProduct {
	this := LeadProduct{}
	this.CatalogProductId = catalogProductId
	this.CatalogVariantId = catalogVariantId
	return &this
}

// NewLeadProductWithDefaults instantiates a new LeadProduct object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLeadProductWithDefaults() *LeadProduct {
	this := LeadProduct{}
	return &this
}

// GetCatalogProductId returns the CatalogProductId field value
func (o *LeadProduct) GetCatalogProductId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CatalogProductId
}

// GetCatalogProductIdOk returns a tuple with the CatalogProductId field value
// and a boolean to check if the value has been set.
func (o *LeadProduct) GetCatalogProductIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CatalogProductId, true
}

// SetCatalogProductId sets field value
func (o *LeadProduct) SetCatalogProductId(v int32) {
	o.CatalogProductId = v
}

// GetCatalogVariantId returns the CatalogVariantId field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *LeadProduct) GetCatalogVariantId() int32 {
	if o == nil || o.CatalogVariantId.Get() == nil {
		var ret int32
		return ret
	}

	return *o.CatalogVariantId.Get()
}

// GetCatalogVariantIdOk returns a tuple with the CatalogVariantId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LeadProduct) GetCatalogVariantIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CatalogVariantId.Get(), o.CatalogVariantId.IsSet()
}

// SetCatalogVariantId sets field value
func (o *LeadProduct) SetCatalogVariantId(v int32) {
	o.CatalogVariantId.Set(&v)
}

func (o LeadProduct) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LeadProduct) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["catalog_product_id"] = o.CatalogProductId
	toSerialize["catalog_variant_id"] = o.CatalogVariantId.Get()
	return toSerialize, nil
}

func (o *LeadProduct) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"catalog_product_id",
		"catalog_variant_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLeadProduct := _LeadProduct{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLeadProduct)

	if err != nil {
		return err
	}

	*o = LeadProduct(varLeadProduct)

	return err
}

type NullableLeadProduct struct {
	value *LeadProduct
	isSet bool
}

func (v NullableLeadProduct) Get() *LeadProduct {
	return v.value
}

func (v *NullableLeadProduct) Set(val *LeadProduct) {
	v.value = val
	v.isSet = true
}

func (v NullableLeadProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableLeadProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLeadProduct(val *LeadProduct) *NullableLeadProduct {
	return &NullableLeadProduct{value: val, isSet: true}
}

func (v NullableLeadProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLeadProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


