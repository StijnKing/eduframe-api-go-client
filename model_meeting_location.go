/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the MeetingLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeetingLocation{}

// MeetingLocation struct for MeetingLocation
type MeetingLocation struct {
	// Unique identifier of the meeting location
	Id int32 `json:"id"`
	// Unique identifier of the course location.
	CourseLocationId int32 `json:"course_location_id"`
	Name string `json:"name"`
	// Capacity of the meeting location
	Capacity NullableInt32 `json:"capacity"`
	// Timestamp of last update.
	UpdatedAt time.Time `json:"updated_at"`
	// Timestamp of creation.
	CreatedAt time.Time `json:"created_at"`
}

type _MeetingLocation MeetingLocation

// NewMeetingLocation instantiates a new MeetingLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeetingLocation(id int32, courseLocationId int32, name string, capacity NullableInt32, updatedAt time.Time, createdAt time.Time) *MeetingLocation {
	this := MeetingLocation{}
	this.Id = id
	this.CourseLocationId = courseLocationId
	this.Name = name
	this.Capacity = capacity
	this.UpdatedAt = updatedAt
	this.CreatedAt = createdAt
	return &this
}

// NewMeetingLocationWithDefaults instantiates a new MeetingLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeetingLocationWithDefaults() *MeetingLocation {
	this := MeetingLocation{}
	return &this
}

// GetId returns the Id field value
func (o *MeetingLocation) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MeetingLocation) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MeetingLocation) SetId(v int32) {
	o.Id = v
}

// GetCourseLocationId returns the CourseLocationId field value
func (o *MeetingLocation) GetCourseLocationId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CourseLocationId
}

// GetCourseLocationIdOk returns a tuple with the CourseLocationId field value
// and a boolean to check if the value has been set.
func (o *MeetingLocation) GetCourseLocationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CourseLocationId, true
}

// SetCourseLocationId sets field value
func (o *MeetingLocation) SetCourseLocationId(v int32) {
	o.CourseLocationId = v
}

// GetName returns the Name field value
func (o *MeetingLocation) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MeetingLocation) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MeetingLocation) SetName(v string) {
	o.Name = v
}

// GetCapacity returns the Capacity field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *MeetingLocation) GetCapacity() int32 {
	if o == nil || o.Capacity.Get() == nil {
		var ret int32
		return ret
	}

	return *o.Capacity.Get()
}

// GetCapacityOk returns a tuple with the Capacity field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MeetingLocation) GetCapacityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Capacity.Get(), o.Capacity.IsSet()
}

// SetCapacity sets field value
func (o *MeetingLocation) SetCapacity(v int32) {
	o.Capacity.Set(&v)
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *MeetingLocation) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *MeetingLocation) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *MeetingLocation) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *MeetingLocation) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *MeetingLocation) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *MeetingLocation) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o MeetingLocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeetingLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["course_location_id"] = o.CourseLocationId
	toSerialize["name"] = o.Name
	toSerialize["capacity"] = o.Capacity.Get()
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *MeetingLocation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"course_location_id",
		"name",
		"capacity",
		"updated_at",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMeetingLocation := _MeetingLocation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMeetingLocation)

	if err != nil {
		return err
	}

	*o = MeetingLocation(varMeetingLocation)

	return err
}

type NullableMeetingLocation struct {
	value *MeetingLocation
	isSet bool
}

func (v NullableMeetingLocation) Get() *MeetingLocation {
	return v.value
}

func (v *NullableMeetingLocation) Set(val *MeetingLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableMeetingLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableMeetingLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeetingLocation(val *MeetingLocation) *NullableMeetingLocation {
	return &NullableMeetingLocation{value: val, isSet: true}
}

func (v NullableMeetingLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeetingLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


