/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PaymentOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentOption{}

// PaymentOption struct for PaymentOption
type PaymentOption struct {
	// Unique identifier of the payment option.
	Id int32 `json:"id"`
	// Human readable name of the payment option.
	Name string `json:"name"`
	// Minimum required price before this option is allowed.
	AvailableFrom float32 `json:"available_from"`
	// Extra cost on the invoice if this option is used.
	ExtraCost string `json:"extra_cost"`
	// If the type of payment option is with a percentual deposit.
	Percentage NullableFloat32 `json:"percentage"`
	// The multiplier to get the total cost.
	Multiplier NullableString `json:"multiplier"`
}

type _PaymentOption PaymentOption

// NewPaymentOption instantiates a new PaymentOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentOption(id int32, name string, availableFrom float32, extraCost string, percentage NullableFloat32, multiplier NullableString) *PaymentOption {
	this := PaymentOption{}
	this.Id = id
	this.Name = name
	this.AvailableFrom = availableFrom
	this.ExtraCost = extraCost
	this.Percentage = percentage
	this.Multiplier = multiplier
	return &this
}

// NewPaymentOptionWithDefaults instantiates a new PaymentOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentOptionWithDefaults() *PaymentOption {
	this := PaymentOption{}
	return &this
}

// GetId returns the Id field value
func (o *PaymentOption) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PaymentOption) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PaymentOption) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *PaymentOption) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PaymentOption) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PaymentOption) SetName(v string) {
	o.Name = v
}

// GetAvailableFrom returns the AvailableFrom field value
func (o *PaymentOption) GetAvailableFrom() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AvailableFrom
}

// GetAvailableFromOk returns a tuple with the AvailableFrom field value
// and a boolean to check if the value has been set.
func (o *PaymentOption) GetAvailableFromOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvailableFrom, true
}

// SetAvailableFrom sets field value
func (o *PaymentOption) SetAvailableFrom(v float32) {
	o.AvailableFrom = v
}

// GetExtraCost returns the ExtraCost field value
func (o *PaymentOption) GetExtraCost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExtraCost
}

// GetExtraCostOk returns a tuple with the ExtraCost field value
// and a boolean to check if the value has been set.
func (o *PaymentOption) GetExtraCostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExtraCost, true
}

// SetExtraCost sets field value
func (o *PaymentOption) SetExtraCost(v string) {
	o.ExtraCost = v
}

// GetPercentage returns the Percentage field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *PaymentOption) GetPercentage() float32 {
	if o == nil || o.Percentage.Get() == nil {
		var ret float32
		return ret
	}

	return *o.Percentage.Get()
}

// GetPercentageOk returns a tuple with the Percentage field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentOption) GetPercentageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Percentage.Get(), o.Percentage.IsSet()
}

// SetPercentage sets field value
func (o *PaymentOption) SetPercentage(v float32) {
	o.Percentage.Set(&v)
}

// GetMultiplier returns the Multiplier field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PaymentOption) GetMultiplier() string {
	if o == nil || o.Multiplier.Get() == nil {
		var ret string
		return ret
	}

	return *o.Multiplier.Get()
}

// GetMultiplierOk returns a tuple with the Multiplier field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentOption) GetMultiplierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Multiplier.Get(), o.Multiplier.IsSet()
}

// SetMultiplier sets field value
func (o *PaymentOption) SetMultiplier(v string) {
	o.Multiplier.Set(&v)
}

func (o PaymentOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["available_from"] = o.AvailableFrom
	toSerialize["extra_cost"] = o.ExtraCost
	toSerialize["percentage"] = o.Percentage.Get()
	toSerialize["multiplier"] = o.Multiplier.Get()
	return toSerialize, nil
}

func (o *PaymentOption) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"available_from",
		"extra_cost",
		"percentage",
		"multiplier",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentOption := _PaymentOption{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaymentOption)

	if err != nil {
		return err
	}

	*o = PaymentOption(varPaymentOption)

	return err
}

type NullablePaymentOption struct {
	value *PaymentOption
	isSet bool
}

func (v NullablePaymentOption) Get() *PaymentOption {
	return v.value
}

func (v *NullablePaymentOption) Set(val *PaymentOption) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentOption) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentOption(val *PaymentOption) *NullablePaymentOption {
	return &NullablePaymentOption{value: val, isSet: true}
}

func (v NullablePaymentOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


