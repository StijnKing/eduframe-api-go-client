/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PersonalProgramElement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PersonalProgramElement{}

// PersonalProgramElement struct for PersonalProgramElement
type PersonalProgramElement struct {
	// Unique identifier of the personal program element.
	Id int32 `json:"id"`
	// The identifier of the associated enrollment.
	EnrollmentId int32 `json:"enrollment_id"`
	// The identifier of the associated course.
	CourseId int32 `json:"course_id"`
	// The identifier of the associated course enrollment.
	CourseEnrollmentId NullableInt32 `json:"course_enrollment_id"`
	// The identifier of the associated element.
	ElementId NullableInt32 `json:"element_id"`
}

type _PersonalProgramElement PersonalProgramElement

// NewPersonalProgramElement instantiates a new PersonalProgramElement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPersonalProgramElement(id int32, enrollmentId int32, courseId int32, courseEnrollmentId NullableInt32, elementId NullableInt32) *PersonalProgramElement {
	this := PersonalProgramElement{}
	this.Id = id
	this.EnrollmentId = enrollmentId
	this.CourseId = courseId
	this.CourseEnrollmentId = courseEnrollmentId
	this.ElementId = elementId
	return &this
}

// NewPersonalProgramElementWithDefaults instantiates a new PersonalProgramElement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersonalProgramElementWithDefaults() *PersonalProgramElement {
	this := PersonalProgramElement{}
	return &this
}

// GetId returns the Id field value
func (o *PersonalProgramElement) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PersonalProgramElement) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PersonalProgramElement) SetId(v int32) {
	o.Id = v
}

// GetEnrollmentId returns the EnrollmentId field value
func (o *PersonalProgramElement) GetEnrollmentId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EnrollmentId
}

// GetEnrollmentIdOk returns a tuple with the EnrollmentId field value
// and a boolean to check if the value has been set.
func (o *PersonalProgramElement) GetEnrollmentIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnrollmentId, true
}

// SetEnrollmentId sets field value
func (o *PersonalProgramElement) SetEnrollmentId(v int32) {
	o.EnrollmentId = v
}

// GetCourseId returns the CourseId field value
func (o *PersonalProgramElement) GetCourseId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CourseId
}

// GetCourseIdOk returns a tuple with the CourseId field value
// and a boolean to check if the value has been set.
func (o *PersonalProgramElement) GetCourseIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CourseId, true
}

// SetCourseId sets field value
func (o *PersonalProgramElement) SetCourseId(v int32) {
	o.CourseId = v
}

// GetCourseEnrollmentId returns the CourseEnrollmentId field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *PersonalProgramElement) GetCourseEnrollmentId() int32 {
	if o == nil || o.CourseEnrollmentId.Get() == nil {
		var ret int32
		return ret
	}

	return *o.CourseEnrollmentId.Get()
}

// GetCourseEnrollmentIdOk returns a tuple with the CourseEnrollmentId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PersonalProgramElement) GetCourseEnrollmentIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CourseEnrollmentId.Get(), o.CourseEnrollmentId.IsSet()
}

// SetCourseEnrollmentId sets field value
func (o *PersonalProgramElement) SetCourseEnrollmentId(v int32) {
	o.CourseEnrollmentId.Set(&v)
}

// GetElementId returns the ElementId field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *PersonalProgramElement) GetElementId() int32 {
	if o == nil || o.ElementId.Get() == nil {
		var ret int32
		return ret
	}

	return *o.ElementId.Get()
}

// GetElementIdOk returns a tuple with the ElementId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PersonalProgramElement) GetElementIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ElementId.Get(), o.ElementId.IsSet()
}

// SetElementId sets field value
func (o *PersonalProgramElement) SetElementId(v int32) {
	o.ElementId.Set(&v)
}

func (o PersonalProgramElement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PersonalProgramElement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["enrollment_id"] = o.EnrollmentId
	toSerialize["course_id"] = o.CourseId
	toSerialize["course_enrollment_id"] = o.CourseEnrollmentId.Get()
	toSerialize["element_id"] = o.ElementId.Get()
	return toSerialize, nil
}

func (o *PersonalProgramElement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"enrollment_id",
		"course_id",
		"course_enrollment_id",
		"element_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPersonalProgramElement := _PersonalProgramElement{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPersonalProgramElement)

	if err != nil {
		return err
	}

	*o = PersonalProgramElement(varPersonalProgramElement)

	return err
}

type NullablePersonalProgramElement struct {
	value *PersonalProgramElement
	isSet bool
}

func (v NullablePersonalProgramElement) Get() *PersonalProgramElement {
	return v.value
}

func (v *NullablePersonalProgramElement) Set(val *PersonalProgramElement) {
	v.value = val
	v.isSet = true
}

func (v NullablePersonalProgramElement) IsSet() bool {
	return v.isSet
}

func (v *NullablePersonalProgramElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersonalProgramElement(val *PersonalProgramElement) *NullablePersonalProgramElement {
	return &NullablePersonalProgramElement{value: val, isSet: true}
}

func (v NullablePersonalProgramElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersonalProgramElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


