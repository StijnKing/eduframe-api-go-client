/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"fmt"
)

// PlannedCourseStatus State of the planned course
type PlannedCourseStatus string

// List of PlannedCourseStatus
const (
	PLANNEDCOURSESTATUS_PLANNED PlannedCourseStatus = "planned"
	PLANNEDCOURSESTATUS_ACTIVE PlannedCourseStatus = "active"
	PLANNEDCOURSESTATUS_COMPLETED PlannedCourseStatus = "completed"
	PLANNEDCOURSESTATUS_CANCELED PlannedCourseStatus = "canceled"
)

// All allowed values of PlannedCourseStatus enum
var AllowedPlannedCourseStatusEnumValues = []PlannedCourseStatus{
	"planned",
	"active",
	"completed",
	"canceled",
}

func (v *PlannedCourseStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PlannedCourseStatus(value)
	for _, existing := range AllowedPlannedCourseStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PlannedCourseStatus", value)
}

// NewPlannedCourseStatusFromValue returns a pointer to a valid PlannedCourseStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPlannedCourseStatusFromValue(v string) (*PlannedCourseStatus, error) {
	ev := PlannedCourseStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PlannedCourseStatus: valid values are %v", v, AllowedPlannedCourseStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PlannedCourseStatus) IsValid() bool {
	for _, existing := range AllowedPlannedCourseStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PlannedCourseStatus value
func (v PlannedCourseStatus) Ptr() *PlannedCourseStatus {
	return &v
}

type NullablePlannedCourseStatus struct {
	value *PlannedCourseStatus
	isSet bool
}

func (v NullablePlannedCourseStatus) Get() *PlannedCourseStatus {
	return v.value
}

func (v *NullablePlannedCourseStatus) Set(val *PlannedCourseStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePlannedCourseStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePlannedCourseStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlannedCourseStatus(val *PlannedCourseStatus) *NullablePlannedCourseStatus {
	return &NullablePlannedCourseStatus{value: val, isSet: true}
}

func (v NullablePlannedCourseStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlannedCourseStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

