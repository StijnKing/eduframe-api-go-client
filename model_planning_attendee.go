/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PlanningAttendee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanningAttendee{}

// PlanningAttendee struct for PlanningAttendee
type PlanningAttendee struct {
	// Unique identifier of the planning attendee
	Id int32 `json:"id"`
	// Unique identifier of the object that is attended.
	AttendableId int32 `json:"attendable_id"`
	// Type of the object that is attended.
	AttendableType string `json:"attendable_type"`
	// Unique identifier of the teacher.
	TeacherId int32 `json:"teacher_id"`
	// Unique identifier of the teacher role.
	TeacherRoleId *int32 `json:"teacher_role_id,omitempty"`
	// Comment on the teacher assignment
	Comment NullableString `json:"comment"`
}

type _PlanningAttendee PlanningAttendee

// NewPlanningAttendee instantiates a new PlanningAttendee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanningAttendee(id int32, attendableId int32, attendableType string, teacherId int32, comment NullableString) *PlanningAttendee {
	this := PlanningAttendee{}
	this.Id = id
	this.AttendableId = attendableId
	this.AttendableType = attendableType
	this.TeacherId = teacherId
	this.Comment = comment
	return &this
}

// NewPlanningAttendeeWithDefaults instantiates a new PlanningAttendee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanningAttendeeWithDefaults() *PlanningAttendee {
	this := PlanningAttendee{}
	return &this
}

// GetId returns the Id field value
func (o *PlanningAttendee) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PlanningAttendee) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PlanningAttendee) SetId(v int32) {
	o.Id = v
}

// GetAttendableId returns the AttendableId field value
func (o *PlanningAttendee) GetAttendableId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AttendableId
}

// GetAttendableIdOk returns a tuple with the AttendableId field value
// and a boolean to check if the value has been set.
func (o *PlanningAttendee) GetAttendableIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttendableId, true
}

// SetAttendableId sets field value
func (o *PlanningAttendee) SetAttendableId(v int32) {
	o.AttendableId = v
}

// GetAttendableType returns the AttendableType field value
func (o *PlanningAttendee) GetAttendableType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AttendableType
}

// GetAttendableTypeOk returns a tuple with the AttendableType field value
// and a boolean to check if the value has been set.
func (o *PlanningAttendee) GetAttendableTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttendableType, true
}

// SetAttendableType sets field value
func (o *PlanningAttendee) SetAttendableType(v string) {
	o.AttendableType = v
}

// GetTeacherId returns the TeacherId field value
func (o *PlanningAttendee) GetTeacherId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TeacherId
}

// GetTeacherIdOk returns a tuple with the TeacherId field value
// and a boolean to check if the value has been set.
func (o *PlanningAttendee) GetTeacherIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeacherId, true
}

// SetTeacherId sets field value
func (o *PlanningAttendee) SetTeacherId(v int32) {
	o.TeacherId = v
}

// GetTeacherRoleId returns the TeacherRoleId field value if set, zero value otherwise.
func (o *PlanningAttendee) GetTeacherRoleId() int32 {
	if o == nil || IsNil(o.TeacherRoleId) {
		var ret int32
		return ret
	}
	return *o.TeacherRoleId
}

// GetTeacherRoleIdOk returns a tuple with the TeacherRoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanningAttendee) GetTeacherRoleIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TeacherRoleId) {
		return nil, false
	}
	return o.TeacherRoleId, true
}

// HasTeacherRoleId returns a boolean if a field has been set.
func (o *PlanningAttendee) HasTeacherRoleId() bool {
	if o != nil && !IsNil(o.TeacherRoleId) {
		return true
	}

	return false
}

// SetTeacherRoleId gets a reference to the given int32 and assigns it to the TeacherRoleId field.
func (o *PlanningAttendee) SetTeacherRoleId(v int32) {
	o.TeacherRoleId = &v
}

// GetComment returns the Comment field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PlanningAttendee) GetComment() string {
	if o == nil || o.Comment.Get() == nil {
		var ret string
		return ret
	}

	return *o.Comment.Get()
}

// GetCommentOk returns a tuple with the Comment field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlanningAttendee) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Comment.Get(), o.Comment.IsSet()
}

// SetComment sets field value
func (o *PlanningAttendee) SetComment(v string) {
	o.Comment.Set(&v)
}

func (o PlanningAttendee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanningAttendee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["attendable_id"] = o.AttendableId
	toSerialize["attendable_type"] = o.AttendableType
	toSerialize["teacher_id"] = o.TeacherId
	if !IsNil(o.TeacherRoleId) {
		toSerialize["teacher_role_id"] = o.TeacherRoleId
	}
	toSerialize["comment"] = o.Comment.Get()
	return toSerialize, nil
}

func (o *PlanningAttendee) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"attendable_id",
		"attendable_type",
		"teacher_id",
		"comment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlanningAttendee := _PlanningAttendee{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlanningAttendee)

	if err != nil {
		return err
	}

	*o = PlanningAttendee(varPlanningAttendee)

	return err
}

type NullablePlanningAttendee struct {
	value *PlanningAttendee
	isSet bool
}

func (v NullablePlanningAttendee) Get() *PlanningAttendee {
	return v.value
}

func (v *NullablePlanningAttendee) Set(val *PlanningAttendee) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanningAttendee) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanningAttendee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanningAttendee(val *PlanningAttendee) *NullablePlanningAttendee {
	return &NullablePlanningAttendee{value: val, isSet: true}
}

func (v NullablePlanningAttendee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanningAttendee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


