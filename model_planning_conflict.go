/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PlanningConflict type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanningConflict{}

// PlanningConflict struct for PlanningConflict
type PlanningConflict struct {
	// Type of the resource
	ResourceType string `json:"resource_type"`
	// Unique identifier of the resource
	ResourceId int32 `json:"resource_id"`
	// Name of the resource
	ResourceName string `json:"resource_name"`
	// Unique identifier of the event
	EventId int32 `json:"event_id"`
	// Type of the event
	EventType string `json:"event_type"`
	// Timestamp of the start of the event
	EventStartDateTime string `json:"event_start_date_time"`
	// Timestamp of the end of the event
	EventEndDateTime string `json:"event_end_date_time"`
	// Unique identifier of the conflicting event
	ConflictingEventId int32 `json:"conflicting_event_id"`
	// Type of the conflicting event
	ConflictingEventType string `json:"conflicting_event_type"`
	// Timestamp of the start of the conflicting event
	ConflictingEventStartDateTime string `json:"conflicting_event_start_date_time"`
	// Timestamp of the end of the conflicting event
	ConflictingEventEndDateTime string `json:"conflicting_event_end_date_time"`
	// Timestamp of the start of the conflict
	StartDateTime string `json:"start_date_time"`
	// Timestamp of the end of the conflict
	EndDateTime string `json:"end_date_time"`
}

type _PlanningConflict PlanningConflict

// NewPlanningConflict instantiates a new PlanningConflict object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanningConflict(resourceType string, resourceId int32, resourceName string, eventId int32, eventType string, eventStartDateTime string, eventEndDateTime string, conflictingEventId int32, conflictingEventType string, conflictingEventStartDateTime string, conflictingEventEndDateTime string, startDateTime string, endDateTime string) *PlanningConflict {
	this := PlanningConflict{}
	this.ResourceType = resourceType
	this.ResourceId = resourceId
	this.ResourceName = resourceName
	this.EventId = eventId
	this.EventType = eventType
	this.EventStartDateTime = eventStartDateTime
	this.EventEndDateTime = eventEndDateTime
	this.ConflictingEventId = conflictingEventId
	this.ConflictingEventType = conflictingEventType
	this.ConflictingEventStartDateTime = conflictingEventStartDateTime
	this.ConflictingEventEndDateTime = conflictingEventEndDateTime
	this.StartDateTime = startDateTime
	this.EndDateTime = endDateTime
	return &this
}

// NewPlanningConflictWithDefaults instantiates a new PlanningConflict object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanningConflictWithDefaults() *PlanningConflict {
	this := PlanningConflict{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *PlanningConflict) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *PlanningConflict) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *PlanningConflict) SetResourceType(v string) {
	o.ResourceType = v
}

// GetResourceId returns the ResourceId field value
func (o *PlanningConflict) GetResourceId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *PlanningConflict) GetResourceIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *PlanningConflict) SetResourceId(v int32) {
	o.ResourceId = v
}

// GetResourceName returns the ResourceName field value
func (o *PlanningConflict) GetResourceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceName
}

// GetResourceNameOk returns a tuple with the ResourceName field value
// and a boolean to check if the value has been set.
func (o *PlanningConflict) GetResourceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceName, true
}

// SetResourceName sets field value
func (o *PlanningConflict) SetResourceName(v string) {
	o.ResourceName = v
}

// GetEventId returns the EventId field value
func (o *PlanningConflict) GetEventId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *PlanningConflict) GetEventIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *PlanningConflict) SetEventId(v int32) {
	o.EventId = v
}

// GetEventType returns the EventType field value
func (o *PlanningConflict) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *PlanningConflict) GetEventTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *PlanningConflict) SetEventType(v string) {
	o.EventType = v
}

// GetEventStartDateTime returns the EventStartDateTime field value
func (o *PlanningConflict) GetEventStartDateTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventStartDateTime
}

// GetEventStartDateTimeOk returns a tuple with the EventStartDateTime field value
// and a boolean to check if the value has been set.
func (o *PlanningConflict) GetEventStartDateTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventStartDateTime, true
}

// SetEventStartDateTime sets field value
func (o *PlanningConflict) SetEventStartDateTime(v string) {
	o.EventStartDateTime = v
}

// GetEventEndDateTime returns the EventEndDateTime field value
func (o *PlanningConflict) GetEventEndDateTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventEndDateTime
}

// GetEventEndDateTimeOk returns a tuple with the EventEndDateTime field value
// and a boolean to check if the value has been set.
func (o *PlanningConflict) GetEventEndDateTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventEndDateTime, true
}

// SetEventEndDateTime sets field value
func (o *PlanningConflict) SetEventEndDateTime(v string) {
	o.EventEndDateTime = v
}

// GetConflictingEventId returns the ConflictingEventId field value
func (o *PlanningConflict) GetConflictingEventId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ConflictingEventId
}

// GetConflictingEventIdOk returns a tuple with the ConflictingEventId field value
// and a boolean to check if the value has been set.
func (o *PlanningConflict) GetConflictingEventIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConflictingEventId, true
}

// SetConflictingEventId sets field value
func (o *PlanningConflict) SetConflictingEventId(v int32) {
	o.ConflictingEventId = v
}

// GetConflictingEventType returns the ConflictingEventType field value
func (o *PlanningConflict) GetConflictingEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConflictingEventType
}

// GetConflictingEventTypeOk returns a tuple with the ConflictingEventType field value
// and a boolean to check if the value has been set.
func (o *PlanningConflict) GetConflictingEventTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConflictingEventType, true
}

// SetConflictingEventType sets field value
func (o *PlanningConflict) SetConflictingEventType(v string) {
	o.ConflictingEventType = v
}

// GetConflictingEventStartDateTime returns the ConflictingEventStartDateTime field value
func (o *PlanningConflict) GetConflictingEventStartDateTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConflictingEventStartDateTime
}

// GetConflictingEventStartDateTimeOk returns a tuple with the ConflictingEventStartDateTime field value
// and a boolean to check if the value has been set.
func (o *PlanningConflict) GetConflictingEventStartDateTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConflictingEventStartDateTime, true
}

// SetConflictingEventStartDateTime sets field value
func (o *PlanningConflict) SetConflictingEventStartDateTime(v string) {
	o.ConflictingEventStartDateTime = v
}

// GetConflictingEventEndDateTime returns the ConflictingEventEndDateTime field value
func (o *PlanningConflict) GetConflictingEventEndDateTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConflictingEventEndDateTime
}

// GetConflictingEventEndDateTimeOk returns a tuple with the ConflictingEventEndDateTime field value
// and a boolean to check if the value has been set.
func (o *PlanningConflict) GetConflictingEventEndDateTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConflictingEventEndDateTime, true
}

// SetConflictingEventEndDateTime sets field value
func (o *PlanningConflict) SetConflictingEventEndDateTime(v string) {
	o.ConflictingEventEndDateTime = v
}

// GetStartDateTime returns the StartDateTime field value
func (o *PlanningConflict) GetStartDateTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartDateTime
}

// GetStartDateTimeOk returns a tuple with the StartDateTime field value
// and a boolean to check if the value has been set.
func (o *PlanningConflict) GetStartDateTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDateTime, true
}

// SetStartDateTime sets field value
func (o *PlanningConflict) SetStartDateTime(v string) {
	o.StartDateTime = v
}

// GetEndDateTime returns the EndDateTime field value
func (o *PlanningConflict) GetEndDateTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EndDateTime
}

// GetEndDateTimeOk returns a tuple with the EndDateTime field value
// and a boolean to check if the value has been set.
func (o *PlanningConflict) GetEndDateTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndDateTime, true
}

// SetEndDateTime sets field value
func (o *PlanningConflict) SetEndDateTime(v string) {
	o.EndDateTime = v
}

func (o PlanningConflict) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanningConflict) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resource_type"] = o.ResourceType
	toSerialize["resource_id"] = o.ResourceId
	toSerialize["resource_name"] = o.ResourceName
	toSerialize["event_id"] = o.EventId
	toSerialize["event_type"] = o.EventType
	toSerialize["event_start_date_time"] = o.EventStartDateTime
	toSerialize["event_end_date_time"] = o.EventEndDateTime
	toSerialize["conflicting_event_id"] = o.ConflictingEventId
	toSerialize["conflicting_event_type"] = o.ConflictingEventType
	toSerialize["conflicting_event_start_date_time"] = o.ConflictingEventStartDateTime
	toSerialize["conflicting_event_end_date_time"] = o.ConflictingEventEndDateTime
	toSerialize["start_date_time"] = o.StartDateTime
	toSerialize["end_date_time"] = o.EndDateTime
	return toSerialize, nil
}

func (o *PlanningConflict) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resource_type",
		"resource_id",
		"resource_name",
		"event_id",
		"event_type",
		"event_start_date_time",
		"event_end_date_time",
		"conflicting_event_id",
		"conflicting_event_type",
		"conflicting_event_start_date_time",
		"conflicting_event_end_date_time",
		"start_date_time",
		"end_date_time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlanningConflict := _PlanningConflict{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlanningConflict)

	if err != nil {
		return err
	}

	*o = PlanningConflict(varPlanningConflict)

	return err
}

type NullablePlanningConflict struct {
	value *PlanningConflict
	isSet bool
}

func (v NullablePlanningConflict) Get() *PlanningConflict {
	return v.value
}

func (v *NullablePlanningConflict) Set(val *PlanningConflict) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanningConflict) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanningConflict) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanningConflict(val *PlanningConflict) *NullablePlanningConflict {
	return &NullablePlanningConflict{value: val, isSet: true}
}

func (v NullablePlanningConflict) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanningConflict) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


