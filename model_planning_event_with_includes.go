/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"fmt"
)

// checks if the PlanningEventWithIncludes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanningEventWithIncludes{}

// PlanningEventWithIncludes struct for PlanningEventWithIncludes
type PlanningEventWithIncludes struct {
	// Unique identifier of the meeting template
	Id int32 `json:"id"`
	// Identifier of the meeting
	MeetingId int32 `json:"meeting_id"`
	// Unique identifier of the meeting location.
	MeetingLocationId NullableInt32 `json:"meeting_location_id"`
	// Name of the event
	Name NullableString `json:"name"`
	// Date and time when the event is starting
	StartDateTime string `json:"start_date_time"`
	// The date and time when the event is ending
	EndDateTime string `json:"end_date_time"`
	PlanningMeetingLocationIds []int32 `json:"planning_meeting_location_ids"`
	PlanningAttendees []PlanningAttendee `json:"planning_attendees"`
	PlanningMaterials []PlanningMaterial `json:"planning_materials,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PlanningEventWithIncludes PlanningEventWithIncludes

// NewPlanningEventWithIncludes instantiates a new PlanningEventWithIncludes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanningEventWithIncludes(id int32, meetingId int32, meetingLocationId NullableInt32, name NullableString, startDateTime string, endDateTime string, planningMeetingLocationIds []int32, planningAttendees []PlanningAttendee) *PlanningEventWithIncludes {
	this := PlanningEventWithIncludes{}
	this.Id = id
	this.MeetingId = meetingId
	this.MeetingLocationId = meetingLocationId
	this.Name = name
	this.StartDateTime = startDateTime
	this.EndDateTime = endDateTime
	this.PlanningMeetingLocationIds = planningMeetingLocationIds
	this.PlanningAttendees = planningAttendees
	return &this
}

// NewPlanningEventWithIncludesWithDefaults instantiates a new PlanningEventWithIncludes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanningEventWithIncludesWithDefaults() *PlanningEventWithIncludes {
	this := PlanningEventWithIncludes{}
	return &this
}

// GetId returns the Id field value
func (o *PlanningEventWithIncludes) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PlanningEventWithIncludes) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PlanningEventWithIncludes) SetId(v int32) {
	o.Id = v
}

// GetMeetingId returns the MeetingId field value
func (o *PlanningEventWithIncludes) GetMeetingId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MeetingId
}

// GetMeetingIdOk returns a tuple with the MeetingId field value
// and a boolean to check if the value has been set.
func (o *PlanningEventWithIncludes) GetMeetingIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MeetingId, true
}

// SetMeetingId sets field value
func (o *PlanningEventWithIncludes) SetMeetingId(v int32) {
	o.MeetingId = v
}

// GetMeetingLocationId returns the MeetingLocationId field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *PlanningEventWithIncludes) GetMeetingLocationId() int32 {
	if o == nil || o.MeetingLocationId.Get() == nil {
		var ret int32
		return ret
	}

	return *o.MeetingLocationId.Get()
}

// GetMeetingLocationIdOk returns a tuple with the MeetingLocationId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlanningEventWithIncludes) GetMeetingLocationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MeetingLocationId.Get(), o.MeetingLocationId.IsSet()
}

// SetMeetingLocationId sets field value
func (o *PlanningEventWithIncludes) SetMeetingLocationId(v int32) {
	o.MeetingLocationId.Set(&v)
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PlanningEventWithIncludes) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlanningEventWithIncludes) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *PlanningEventWithIncludes) SetName(v string) {
	o.Name.Set(&v)
}

// GetStartDateTime returns the StartDateTime field value
func (o *PlanningEventWithIncludes) GetStartDateTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartDateTime
}

// GetStartDateTimeOk returns a tuple with the StartDateTime field value
// and a boolean to check if the value has been set.
func (o *PlanningEventWithIncludes) GetStartDateTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDateTime, true
}

// SetStartDateTime sets field value
func (o *PlanningEventWithIncludes) SetStartDateTime(v string) {
	o.StartDateTime = v
}

// GetEndDateTime returns the EndDateTime field value
func (o *PlanningEventWithIncludes) GetEndDateTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EndDateTime
}

// GetEndDateTimeOk returns a tuple with the EndDateTime field value
// and a boolean to check if the value has been set.
func (o *PlanningEventWithIncludes) GetEndDateTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndDateTime, true
}

// SetEndDateTime sets field value
func (o *PlanningEventWithIncludes) SetEndDateTime(v string) {
	o.EndDateTime = v
}

// GetPlanningMeetingLocationIds returns the PlanningMeetingLocationIds field value
func (o *PlanningEventWithIncludes) GetPlanningMeetingLocationIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.PlanningMeetingLocationIds
}

// GetPlanningMeetingLocationIdsOk returns a tuple with the PlanningMeetingLocationIds field value
// and a boolean to check if the value has been set.
func (o *PlanningEventWithIncludes) GetPlanningMeetingLocationIdsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlanningMeetingLocationIds, true
}

// SetPlanningMeetingLocationIds sets field value
func (o *PlanningEventWithIncludes) SetPlanningMeetingLocationIds(v []int32) {
	o.PlanningMeetingLocationIds = v
}

// GetPlanningAttendees returns the PlanningAttendees field value
func (o *PlanningEventWithIncludes) GetPlanningAttendees() []PlanningAttendee {
	if o == nil {
		var ret []PlanningAttendee
		return ret
	}

	return o.PlanningAttendees
}

// GetPlanningAttendeesOk returns a tuple with the PlanningAttendees field value
// and a boolean to check if the value has been set.
func (o *PlanningEventWithIncludes) GetPlanningAttendeesOk() ([]PlanningAttendee, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlanningAttendees, true
}

// SetPlanningAttendees sets field value
func (o *PlanningEventWithIncludes) SetPlanningAttendees(v []PlanningAttendee) {
	o.PlanningAttendees = v
}

// GetPlanningMaterials returns the PlanningMaterials field value if set, zero value otherwise.
func (o *PlanningEventWithIncludes) GetPlanningMaterials() []PlanningMaterial {
	if o == nil || IsNil(o.PlanningMaterials) {
		var ret []PlanningMaterial
		return ret
	}
	return o.PlanningMaterials
}

// GetPlanningMaterialsOk returns a tuple with the PlanningMaterials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanningEventWithIncludes) GetPlanningMaterialsOk() ([]PlanningMaterial, bool) {
	if o == nil || IsNil(o.PlanningMaterials) {
		return nil, false
	}
	return o.PlanningMaterials, true
}

// HasPlanningMaterials returns a boolean if a field has been set.
func (o *PlanningEventWithIncludes) HasPlanningMaterials() bool {
	if o != nil && !IsNil(o.PlanningMaterials) {
		return true
	}

	return false
}

// SetPlanningMaterials gets a reference to the given []PlanningMaterial and assigns it to the PlanningMaterials field.
func (o *PlanningEventWithIncludes) SetPlanningMaterials(v []PlanningMaterial) {
	o.PlanningMaterials = v
}

func (o PlanningEventWithIncludes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanningEventWithIncludes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["meeting_id"] = o.MeetingId
	toSerialize["meeting_location_id"] = o.MeetingLocationId.Get()
	toSerialize["name"] = o.Name.Get()
	toSerialize["start_date_time"] = o.StartDateTime
	toSerialize["end_date_time"] = o.EndDateTime
	toSerialize["planning_meeting_location_ids"] = o.PlanningMeetingLocationIds
	toSerialize["planning_attendees"] = o.PlanningAttendees
	if !IsNil(o.PlanningMaterials) {
		toSerialize["planning_materials"] = o.PlanningMaterials
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PlanningEventWithIncludes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"meeting_id",
		"meeting_location_id",
		"name",
		"start_date_time",
		"end_date_time",
		"planning_meeting_location_ids",
		"planning_attendees",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlanningEventWithIncludes := _PlanningEventWithIncludes{}

	err = json.Unmarshal(data, &varPlanningEventWithIncludes)

	if err != nil {
		return err
	}

	*o = PlanningEventWithIncludes(varPlanningEventWithIncludes)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "meeting_id")
		delete(additionalProperties, "meeting_location_id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "start_date_time")
		delete(additionalProperties, "end_date_time")
		delete(additionalProperties, "planning_meeting_location_ids")
		delete(additionalProperties, "planning_attendees")
		delete(additionalProperties, "planning_materials")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePlanningEventWithIncludes struct {
	value *PlanningEventWithIncludes
	isSet bool
}

func (v NullablePlanningEventWithIncludes) Get() *PlanningEventWithIncludes {
	return v.value
}

func (v *NullablePlanningEventWithIncludes) Set(val *PlanningEventWithIncludes) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanningEventWithIncludes) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanningEventWithIncludes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanningEventWithIncludes(val *PlanningEventWithIncludes) *NullablePlanningEventWithIncludes {
	return &NullablePlanningEventWithIncludes{value: val, isSet: true}
}

func (v NullablePlanningEventWithIncludes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanningEventWithIncludes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


