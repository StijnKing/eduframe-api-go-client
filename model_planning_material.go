/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PlanningMaterial type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanningMaterial{}

// PlanningMaterial struct for PlanningMaterial
type PlanningMaterial struct {
	// Unique identifier of the material
	MaterialId int32 `json:"material_id"`
	// Amount of the material
	Amount NullableInt32 `json:"amount"`
	// Comment on the planning material
	Comment NullableString `json:"comment"`
}

type _PlanningMaterial PlanningMaterial

// NewPlanningMaterial instantiates a new PlanningMaterial object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanningMaterial(materialId int32, amount NullableInt32, comment NullableString) *PlanningMaterial {
	this := PlanningMaterial{}
	this.MaterialId = materialId
	this.Amount = amount
	this.Comment = comment
	return &this
}

// NewPlanningMaterialWithDefaults instantiates a new PlanningMaterial object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanningMaterialWithDefaults() *PlanningMaterial {
	this := PlanningMaterial{}
	return &this
}

// GetMaterialId returns the MaterialId field value
func (o *PlanningMaterial) GetMaterialId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaterialId
}

// GetMaterialIdOk returns a tuple with the MaterialId field value
// and a boolean to check if the value has been set.
func (o *PlanningMaterial) GetMaterialIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaterialId, true
}

// SetMaterialId sets field value
func (o *PlanningMaterial) SetMaterialId(v int32) {
	o.MaterialId = v
}

// GetAmount returns the Amount field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *PlanningMaterial) GetAmount() int32 {
	if o == nil || o.Amount.Get() == nil {
		var ret int32
		return ret
	}

	return *o.Amount.Get()
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlanningMaterial) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Amount.Get(), o.Amount.IsSet()
}

// SetAmount sets field value
func (o *PlanningMaterial) SetAmount(v int32) {
	o.Amount.Set(&v)
}

// GetComment returns the Comment field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PlanningMaterial) GetComment() string {
	if o == nil || o.Comment.Get() == nil {
		var ret string
		return ret
	}

	return *o.Comment.Get()
}

// GetCommentOk returns a tuple with the Comment field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlanningMaterial) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Comment.Get(), o.Comment.IsSet()
}

// SetComment sets field value
func (o *PlanningMaterial) SetComment(v string) {
	o.Comment.Set(&v)
}

func (o PlanningMaterial) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanningMaterial) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["material_id"] = o.MaterialId
	toSerialize["amount"] = o.Amount.Get()
	toSerialize["comment"] = o.Comment.Get()
	return toSerialize, nil
}

func (o *PlanningMaterial) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"material_id",
		"amount",
		"comment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlanningMaterial := _PlanningMaterial{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlanningMaterial)

	if err != nil {
		return err
	}

	*o = PlanningMaterial(varPlanningMaterial)

	return err
}

type NullablePlanningMaterial struct {
	value *PlanningMaterial
	isSet bool
}

func (v NullablePlanningMaterial) Get() *PlanningMaterial {
	return v.value
}

func (v *NullablePlanningMaterial) Set(val *PlanningMaterial) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanningMaterial) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanningMaterial) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanningMaterial(val *PlanningMaterial) *NullablePlanningMaterial {
	return &NullablePlanningMaterial{value: val, isSet: true}
}

func (v NullablePlanningMaterial) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanningMaterial) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


