/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PluginData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PluginData{}

// PluginData struct for PluginData
type PluginData struct {
	// Identifier of the data.
	Id int32 `json:"id"`
	// Provided data.
	Data NullableString `json:"data"`
}

type _PluginData PluginData

// NewPluginData instantiates a new PluginData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginData(id int32, data NullableString) *PluginData {
	this := PluginData{}
	this.Id = id
	this.Data = data
	return &this
}

// NewPluginDataWithDefaults instantiates a new PluginData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginDataWithDefaults() *PluginData {
	this := PluginData{}
	return &this
}

// GetId returns the Id field value
func (o *PluginData) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PluginData) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PluginData) SetId(v int32) {
	o.Id = v
}

// GetData returns the Data field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PluginData) GetData() string {
	if o == nil || o.Data.Get() == nil {
		var ret string
		return ret
	}

	return *o.Data.Get()
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PluginData) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data.Get(), o.Data.IsSet()
}

// SetData sets field value
func (o *PluginData) SetData(v string) {
	o.Data.Set(&v)
}

func (o PluginData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PluginData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["data"] = o.Data.Get()
	return toSerialize, nil
}

func (o *PluginData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPluginData := _PluginData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPluginData)

	if err != nil {
		return err
	}

	*o = PluginData(varPluginData)

	return err
}

type NullablePluginData struct {
	value *PluginData
	isSet bool
}

func (v NullablePluginData) Get() *PluginData {
	return v.value
}

func (v *NullablePluginData) Set(val *PluginData) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginData) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginData(val *PluginData) *NullablePluginData {
	return &NullablePluginData{value: val, isSet: true}
}

func (v NullablePluginData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


