/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"fmt"
)

// ProductableType The product type.
type ProductableType string

// List of ProductableType
const (
	COURSE ProductableType = "Course"
	PROGRAMPROGRAM ProductableType = "Program::Program"
)

// All allowed values of ProductableType enum
var AllowedProductableTypeEnumValues = []ProductableType{
	"Course",
	"Program::Program",
}

func (v *ProductableType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProductableType(value)
	for _, existing := range AllowedProductableTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProductableType", value)
}

// NewProductableTypeFromValue returns a pointer to a valid ProductableType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProductableTypeFromValue(v string) (*ProductableType, error) {
	ev := ProductableType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProductableType: valid values are %v", v, AllowedProductableTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProductableType) IsValid() bool {
	for _, existing := range AllowedProductableTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProductableType value
func (v ProductableType) Ptr() *ProductableType {
	return &v
}

type NullableProductableType struct {
	value *ProductableType
	isSet bool
}

func (v NullableProductableType) Get() *ProductableType {
	return v.value
}

func (v *NullableProductableType) Set(val *ProductableType) {
	v.value = val
	v.isSet = true
}

func (v NullableProductableType) IsSet() bool {
	return v.isSet
}

func (v *NullableProductableType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductableType(val *ProductableType) *NullableProductableType {
	return &NullableProductableType{value: val, isSet: true}
}

func (v NullableProductableType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductableType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

