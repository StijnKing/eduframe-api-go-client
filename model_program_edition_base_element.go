/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProgramEditionBaseElement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProgramEditionBaseElement{}

// ProgramEditionBaseElement struct for ProgramEditionBaseElement
type ProgramEditionBaseElement struct {
	// The name of the element.
	Name string `json:"name"`
	// The credits of the element.
	Credits NullableFloat64 `json:"credits"`
}

type _ProgramEditionBaseElement ProgramEditionBaseElement

// NewProgramEditionBaseElement instantiates a new ProgramEditionBaseElement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProgramEditionBaseElement(name string, credits NullableFloat64) *ProgramEditionBaseElement {
	this := ProgramEditionBaseElement{}
	this.Name = name
	this.Credits = credits
	return &this
}

// NewProgramEditionBaseElementWithDefaults instantiates a new ProgramEditionBaseElement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProgramEditionBaseElementWithDefaults() *ProgramEditionBaseElement {
	this := ProgramEditionBaseElement{}
	return &this
}

// GetName returns the Name field value
func (o *ProgramEditionBaseElement) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProgramEditionBaseElement) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProgramEditionBaseElement) SetName(v string) {
	o.Name = v
}

// GetCredits returns the Credits field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *ProgramEditionBaseElement) GetCredits() float64 {
	if o == nil || o.Credits.Get() == nil {
		var ret float64
		return ret
	}

	return *o.Credits.Get()
}

// GetCreditsOk returns a tuple with the Credits field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProgramEditionBaseElement) GetCreditsOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Credits.Get(), o.Credits.IsSet()
}

// SetCredits sets field value
func (o *ProgramEditionBaseElement) SetCredits(v float64) {
	o.Credits.Set(&v)
}

func (o ProgramEditionBaseElement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProgramEditionBaseElement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["credits"] = o.Credits.Get()
	return toSerialize, nil
}

func (o *ProgramEditionBaseElement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"credits",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProgramEditionBaseElement := _ProgramEditionBaseElement{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProgramEditionBaseElement)

	if err != nil {
		return err
	}

	*o = ProgramEditionBaseElement(varProgramEditionBaseElement)

	return err
}

type NullableProgramEditionBaseElement struct {
	value *ProgramEditionBaseElement
	isSet bool
}

func (v NullableProgramEditionBaseElement) Get() *ProgramEditionBaseElement {
	return v.value
}

func (v *NullableProgramEditionBaseElement) Set(val *ProgramEditionBaseElement) {
	v.value = val
	v.isSet = true
}

func (v NullableProgramEditionBaseElement) IsSet() bool {
	return v.isSet
}

func (v *NullableProgramEditionBaseElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgramEditionBaseElement(val *ProgramEditionBaseElement) *NullableProgramEditionBaseElement {
	return &NullableProgramEditionBaseElement{value: val, isSet: true}
}

func (v NullableProgramEditionBaseElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgramEditionBaseElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


