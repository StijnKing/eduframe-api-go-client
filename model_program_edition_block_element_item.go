/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// ProgramEditionBlockElementItem - struct for ProgramEditionBlockElementItem
type ProgramEditionBlockElementItem struct {
	ProgramEditionCourseElement *ProgramEditionCourseElement
	ProgramEditionEvaluationElement *ProgramEditionEvaluationElement
}

// ProgramEditionCourseElementAsProgramEditionBlockElementItem is a convenience function that returns ProgramEditionCourseElement wrapped in ProgramEditionBlockElementItem
func ProgramEditionCourseElementAsProgramEditionBlockElementItem(v *ProgramEditionCourseElement) ProgramEditionBlockElementItem {
	return ProgramEditionBlockElementItem{
		ProgramEditionCourseElement: v,
	}
}

// ProgramEditionEvaluationElementAsProgramEditionBlockElementItem is a convenience function that returns ProgramEditionEvaluationElement wrapped in ProgramEditionBlockElementItem
func ProgramEditionEvaluationElementAsProgramEditionBlockElementItem(v *ProgramEditionEvaluationElement) ProgramEditionBlockElementItem {
	return ProgramEditionBlockElementItem{
		ProgramEditionEvaluationElement: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ProgramEditionBlockElementItem) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ProgramEditionCourseElement
	err = newStrictDecoder(data).Decode(&dst.ProgramEditionCourseElement)
	if err == nil {
		jsonProgramEditionCourseElement, _ := json.Marshal(dst.ProgramEditionCourseElement)
		if string(jsonProgramEditionCourseElement) == "{}" { // empty struct
			dst.ProgramEditionCourseElement = nil
		} else {
			if err = validator.Validate(dst.ProgramEditionCourseElement); err != nil {
				dst.ProgramEditionCourseElement = nil
			} else {
				match++
			}
		}
	} else {
		dst.ProgramEditionCourseElement = nil
	}

	// try to unmarshal data into ProgramEditionEvaluationElement
	err = newStrictDecoder(data).Decode(&dst.ProgramEditionEvaluationElement)
	if err == nil {
		jsonProgramEditionEvaluationElement, _ := json.Marshal(dst.ProgramEditionEvaluationElement)
		if string(jsonProgramEditionEvaluationElement) == "{}" { // empty struct
			dst.ProgramEditionEvaluationElement = nil
		} else {
			if err = validator.Validate(dst.ProgramEditionEvaluationElement); err != nil {
				dst.ProgramEditionEvaluationElement = nil
			} else {
				match++
			}
		}
	} else {
		dst.ProgramEditionEvaluationElement = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ProgramEditionCourseElement = nil
		dst.ProgramEditionEvaluationElement = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ProgramEditionBlockElementItem)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ProgramEditionBlockElementItem)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ProgramEditionBlockElementItem) MarshalJSON() ([]byte, error) {
	if src.ProgramEditionCourseElement != nil {
		return json.Marshal(&src.ProgramEditionCourseElement)
	}

	if src.ProgramEditionEvaluationElement != nil {
		return json.Marshal(&src.ProgramEditionEvaluationElement)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ProgramEditionBlockElementItem) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ProgramEditionCourseElement != nil {
		return obj.ProgramEditionCourseElement
	}

	if obj.ProgramEditionEvaluationElement != nil {
		return obj.ProgramEditionEvaluationElement
	}

	// all schemas are nil
	return nil
}

type NullableProgramEditionBlockElementItem struct {
	value *ProgramEditionBlockElementItem
	isSet bool
}

func (v NullableProgramEditionBlockElementItem) Get() *ProgramEditionBlockElementItem {
	return v.value
}

func (v *NullableProgramEditionBlockElementItem) Set(val *ProgramEditionBlockElementItem) {
	v.value = val
	v.isSet = true
}

func (v NullableProgramEditionBlockElementItem) IsSet() bool {
	return v.isSet
}

func (v *NullableProgramEditionBlockElementItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgramEditionBlockElementItem(val *ProgramEditionBlockElementItem) *NullableProgramEditionBlockElementItem {
	return &NullableProgramEditionBlockElementItem{value: val, isSet: true}
}

func (v NullableProgramEditionBlockElementItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgramEditionBlockElementItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


