/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// ProgramEditionElement - struct for ProgramEditionElement
type ProgramEditionElement struct {
	ProgramEditionBlockElement *ProgramEditionBlockElement
	ProgramEditionCourseElement *ProgramEditionCourseElement
	ProgramEditionElectiveElement *ProgramEditionElectiveElement
	ProgramEditionEvaluationElement *ProgramEditionEvaluationElement
	ProgramEditionThesisElement *ProgramEditionThesisElement
}

// ProgramEditionBlockElementAsProgramEditionElement is a convenience function that returns ProgramEditionBlockElement wrapped in ProgramEditionElement
func ProgramEditionBlockElementAsProgramEditionElement(v *ProgramEditionBlockElement) ProgramEditionElement {
	return ProgramEditionElement{
		ProgramEditionBlockElement: v,
	}
}

// ProgramEditionCourseElementAsProgramEditionElement is a convenience function that returns ProgramEditionCourseElement wrapped in ProgramEditionElement
func ProgramEditionCourseElementAsProgramEditionElement(v *ProgramEditionCourseElement) ProgramEditionElement {
	return ProgramEditionElement{
		ProgramEditionCourseElement: v,
	}
}

// ProgramEditionElectiveElementAsProgramEditionElement is a convenience function that returns ProgramEditionElectiveElement wrapped in ProgramEditionElement
func ProgramEditionElectiveElementAsProgramEditionElement(v *ProgramEditionElectiveElement) ProgramEditionElement {
	return ProgramEditionElement{
		ProgramEditionElectiveElement: v,
	}
}

// ProgramEditionEvaluationElementAsProgramEditionElement is a convenience function that returns ProgramEditionEvaluationElement wrapped in ProgramEditionElement
func ProgramEditionEvaluationElementAsProgramEditionElement(v *ProgramEditionEvaluationElement) ProgramEditionElement {
	return ProgramEditionElement{
		ProgramEditionEvaluationElement: v,
	}
}

// ProgramEditionThesisElementAsProgramEditionElement is a convenience function that returns ProgramEditionThesisElement wrapped in ProgramEditionElement
func ProgramEditionThesisElementAsProgramEditionElement(v *ProgramEditionThesisElement) ProgramEditionElement {
	return ProgramEditionElement{
		ProgramEditionThesisElement: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ProgramEditionElement) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ProgramEditionBlockElement
	err = newStrictDecoder(data).Decode(&dst.ProgramEditionBlockElement)
	if err == nil {
		jsonProgramEditionBlockElement, _ := json.Marshal(dst.ProgramEditionBlockElement)
		if string(jsonProgramEditionBlockElement) == "{}" { // empty struct
			dst.ProgramEditionBlockElement = nil
		} else {
			if err = validator.Validate(dst.ProgramEditionBlockElement); err != nil {
				dst.ProgramEditionBlockElement = nil
			} else {
				match++
			}
		}
	} else {
		dst.ProgramEditionBlockElement = nil
	}

	// try to unmarshal data into ProgramEditionCourseElement
	err = newStrictDecoder(data).Decode(&dst.ProgramEditionCourseElement)
	if err == nil {
		jsonProgramEditionCourseElement, _ := json.Marshal(dst.ProgramEditionCourseElement)
		if string(jsonProgramEditionCourseElement) == "{}" { // empty struct
			dst.ProgramEditionCourseElement = nil
		} else {
			if err = validator.Validate(dst.ProgramEditionCourseElement); err != nil {
				dst.ProgramEditionCourseElement = nil
			} else {
				match++
			}
		}
	} else {
		dst.ProgramEditionCourseElement = nil
	}

	// try to unmarshal data into ProgramEditionElectiveElement
	err = newStrictDecoder(data).Decode(&dst.ProgramEditionElectiveElement)
	if err == nil {
		jsonProgramEditionElectiveElement, _ := json.Marshal(dst.ProgramEditionElectiveElement)
		if string(jsonProgramEditionElectiveElement) == "{}" { // empty struct
			dst.ProgramEditionElectiveElement = nil
		} else {
			if err = validator.Validate(dst.ProgramEditionElectiveElement); err != nil {
				dst.ProgramEditionElectiveElement = nil
			} else {
				match++
			}
		}
	} else {
		dst.ProgramEditionElectiveElement = nil
	}

	// try to unmarshal data into ProgramEditionEvaluationElement
	err = newStrictDecoder(data).Decode(&dst.ProgramEditionEvaluationElement)
	if err == nil {
		jsonProgramEditionEvaluationElement, _ := json.Marshal(dst.ProgramEditionEvaluationElement)
		if string(jsonProgramEditionEvaluationElement) == "{}" { // empty struct
			dst.ProgramEditionEvaluationElement = nil
		} else {
			if err = validator.Validate(dst.ProgramEditionEvaluationElement); err != nil {
				dst.ProgramEditionEvaluationElement = nil
			} else {
				match++
			}
		}
	} else {
		dst.ProgramEditionEvaluationElement = nil
	}

	// try to unmarshal data into ProgramEditionThesisElement
	err = newStrictDecoder(data).Decode(&dst.ProgramEditionThesisElement)
	if err == nil {
		jsonProgramEditionThesisElement, _ := json.Marshal(dst.ProgramEditionThesisElement)
		if string(jsonProgramEditionThesisElement) == "{}" { // empty struct
			dst.ProgramEditionThesisElement = nil
		} else {
			if err = validator.Validate(dst.ProgramEditionThesisElement); err != nil {
				dst.ProgramEditionThesisElement = nil
			} else {
				match++
			}
		}
	} else {
		dst.ProgramEditionThesisElement = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ProgramEditionBlockElement = nil
		dst.ProgramEditionCourseElement = nil
		dst.ProgramEditionElectiveElement = nil
		dst.ProgramEditionEvaluationElement = nil
		dst.ProgramEditionThesisElement = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ProgramEditionElement)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ProgramEditionElement)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ProgramEditionElement) MarshalJSON() ([]byte, error) {
	if src.ProgramEditionBlockElement != nil {
		return json.Marshal(&src.ProgramEditionBlockElement)
	}

	if src.ProgramEditionCourseElement != nil {
		return json.Marshal(&src.ProgramEditionCourseElement)
	}

	if src.ProgramEditionElectiveElement != nil {
		return json.Marshal(&src.ProgramEditionElectiveElement)
	}

	if src.ProgramEditionEvaluationElement != nil {
		return json.Marshal(&src.ProgramEditionEvaluationElement)
	}

	if src.ProgramEditionThesisElement != nil {
		return json.Marshal(&src.ProgramEditionThesisElement)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ProgramEditionElement) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ProgramEditionBlockElement != nil {
		return obj.ProgramEditionBlockElement
	}

	if obj.ProgramEditionCourseElement != nil {
		return obj.ProgramEditionCourseElement
	}

	if obj.ProgramEditionElectiveElement != nil {
		return obj.ProgramEditionElectiveElement
	}

	if obj.ProgramEditionEvaluationElement != nil {
		return obj.ProgramEditionEvaluationElement
	}

	if obj.ProgramEditionThesisElement != nil {
		return obj.ProgramEditionThesisElement
	}

	// all schemas are nil
	return nil
}

type NullableProgramEditionElement struct {
	value *ProgramEditionElement
	isSet bool
}

func (v NullableProgramEditionElement) Get() *ProgramEditionElement {
	return v.value
}

func (v *NullableProgramEditionElement) Set(val *ProgramEditionElement) {
	v.value = val
	v.isSet = true
}

func (v NullableProgramEditionElement) IsSet() bool {
	return v.isSet
}

func (v *NullableProgramEditionElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgramEditionElement(val *ProgramEditionElement) *NullableProgramEditionElement {
	return &NullableProgramEditionElement{value: val, isSet: true}
}

func (v NullableProgramEditionElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgramEditionElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


