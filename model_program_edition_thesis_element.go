/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"fmt"
)

// checks if the ProgramEditionThesisElement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProgramEditionThesisElement{}

// ProgramEditionThesisElement struct for ProgramEditionThesisElement
type ProgramEditionThesisElement struct {
	// The name of the element.
	Name string `json:"name"`
	// The credits of the element.
	Credits NullableFloat64 `json:"credits"`
	// The type of the element.
	ElementType string `json:"element_type"`
	// The identifier of the associated course.
	CourseId int32 `json:"course_id"`
	// The identifier of the associated planned course.
	PlannedCourseId NullableInt32 `json:"planned_course_id"`
	AdditionalProperties map[string]interface{}
}

type _ProgramEditionThesisElement ProgramEditionThesisElement

// NewProgramEditionThesisElement instantiates a new ProgramEditionThesisElement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProgramEditionThesisElement(name string, credits NullableFloat64, elementType string, courseId int32, plannedCourseId NullableInt32) *ProgramEditionThesisElement {
	this := ProgramEditionThesisElement{}
	this.Name = name
	this.Credits = credits
	this.ElementType = elementType
	this.CourseId = courseId
	this.PlannedCourseId = plannedCourseId
	return &this
}

// NewProgramEditionThesisElementWithDefaults instantiates a new ProgramEditionThesisElement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProgramEditionThesisElementWithDefaults() *ProgramEditionThesisElement {
	this := ProgramEditionThesisElement{}
	return &this
}

// GetName returns the Name field value
func (o *ProgramEditionThesisElement) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProgramEditionThesisElement) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProgramEditionThesisElement) SetName(v string) {
	o.Name = v
}

// GetCredits returns the Credits field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *ProgramEditionThesisElement) GetCredits() float64 {
	if o == nil || o.Credits.Get() == nil {
		var ret float64
		return ret
	}

	return *o.Credits.Get()
}

// GetCreditsOk returns a tuple with the Credits field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProgramEditionThesisElement) GetCreditsOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Credits.Get(), o.Credits.IsSet()
}

// SetCredits sets field value
func (o *ProgramEditionThesisElement) SetCredits(v float64) {
	o.Credits.Set(&v)
}

// GetElementType returns the ElementType field value
func (o *ProgramEditionThesisElement) GetElementType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ElementType
}

// GetElementTypeOk returns a tuple with the ElementType field value
// and a boolean to check if the value has been set.
func (o *ProgramEditionThesisElement) GetElementTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ElementType, true
}

// SetElementType sets field value
func (o *ProgramEditionThesisElement) SetElementType(v string) {
	o.ElementType = v
}

// GetCourseId returns the CourseId field value
func (o *ProgramEditionThesisElement) GetCourseId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CourseId
}

// GetCourseIdOk returns a tuple with the CourseId field value
// and a boolean to check if the value has been set.
func (o *ProgramEditionThesisElement) GetCourseIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CourseId, true
}

// SetCourseId sets field value
func (o *ProgramEditionThesisElement) SetCourseId(v int32) {
	o.CourseId = v
}

// GetPlannedCourseId returns the PlannedCourseId field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *ProgramEditionThesisElement) GetPlannedCourseId() int32 {
	if o == nil || o.PlannedCourseId.Get() == nil {
		var ret int32
		return ret
	}

	return *o.PlannedCourseId.Get()
}

// GetPlannedCourseIdOk returns a tuple with the PlannedCourseId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProgramEditionThesisElement) GetPlannedCourseIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlannedCourseId.Get(), o.PlannedCourseId.IsSet()
}

// SetPlannedCourseId sets field value
func (o *ProgramEditionThesisElement) SetPlannedCourseId(v int32) {
	o.PlannedCourseId.Set(&v)
}

func (o ProgramEditionThesisElement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProgramEditionThesisElement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["credits"] = o.Credits.Get()
	toSerialize["element_type"] = o.ElementType
	toSerialize["course_id"] = o.CourseId
	toSerialize["planned_course_id"] = o.PlannedCourseId.Get()

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProgramEditionThesisElement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"credits",
		"element_type",
		"course_id",
		"planned_course_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProgramEditionThesisElement := _ProgramEditionThesisElement{}

	err = json.Unmarshal(data, &varProgramEditionThesisElement)

	if err != nil {
		return err
	}

	*o = ProgramEditionThesisElement(varProgramEditionThesisElement)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "credits")
		delete(additionalProperties, "element_type")
		delete(additionalProperties, "course_id")
		delete(additionalProperties, "planned_course_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProgramEditionThesisElement struct {
	value *ProgramEditionThesisElement
	isSet bool
}

func (v NullableProgramEditionThesisElement) Get() *ProgramEditionThesisElement {
	return v.value
}

func (v *NullableProgramEditionThesisElement) Set(val *ProgramEditionThesisElement) {
	v.value = val
	v.isSet = true
}

func (v NullableProgramEditionThesisElement) IsSet() bool {
	return v.isSet
}

func (v *NullableProgramEditionThesisElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgramEditionThesisElement(val *ProgramEditionThesisElement) *NullableProgramEditionThesisElement {
	return &NullableProgramEditionThesisElement{value: val, isSet: true}
}

func (v NullableProgramEditionThesisElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgramEditionThesisElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


