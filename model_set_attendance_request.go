/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"fmt"
)

// checks if the SetAttendanceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetAttendanceRequest{}

// SetAttendanceRequest struct for SetAttendanceRequest
type SetAttendanceRequest struct {
	// Unique identifier of the meeting.
	MeetingId int32 `json:"meeting_id"`
	// Unique identifier of the enrollment.
	EnrollmentId int32 `json:"enrollment_id"`
	State *AttendanceState `json:"state,omitempty"`
	// Comment about this attendance.
	Comment NullableString `json:"comment,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SetAttendanceRequest SetAttendanceRequest

// NewSetAttendanceRequest instantiates a new SetAttendanceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetAttendanceRequest(meetingId int32, enrollmentId int32) *SetAttendanceRequest {
	this := SetAttendanceRequest{}
	this.MeetingId = meetingId
	this.EnrollmentId = enrollmentId
	return &this
}

// NewSetAttendanceRequestWithDefaults instantiates a new SetAttendanceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetAttendanceRequestWithDefaults() *SetAttendanceRequest {
	this := SetAttendanceRequest{}
	return &this
}

// GetMeetingId returns the MeetingId field value
func (o *SetAttendanceRequest) GetMeetingId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MeetingId
}

// GetMeetingIdOk returns a tuple with the MeetingId field value
// and a boolean to check if the value has been set.
func (o *SetAttendanceRequest) GetMeetingIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MeetingId, true
}

// SetMeetingId sets field value
func (o *SetAttendanceRequest) SetMeetingId(v int32) {
	o.MeetingId = v
}

// GetEnrollmentId returns the EnrollmentId field value
func (o *SetAttendanceRequest) GetEnrollmentId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EnrollmentId
}

// GetEnrollmentIdOk returns a tuple with the EnrollmentId field value
// and a boolean to check if the value has been set.
func (o *SetAttendanceRequest) GetEnrollmentIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnrollmentId, true
}

// SetEnrollmentId sets field value
func (o *SetAttendanceRequest) SetEnrollmentId(v int32) {
	o.EnrollmentId = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *SetAttendanceRequest) GetState() AttendanceState {
	if o == nil || IsNil(o.State) {
		var ret AttendanceState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetAttendanceRequest) GetStateOk() (*AttendanceState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *SetAttendanceRequest) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given AttendanceState and assigns it to the State field.
func (o *SetAttendanceRequest) SetState(v AttendanceState) {
	o.State = &v
}

// GetComment returns the Comment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SetAttendanceRequest) GetComment() string {
	if o == nil || IsNil(o.Comment.Get()) {
		var ret string
		return ret
	}
	return *o.Comment.Get()
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SetAttendanceRequest) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Comment.Get(), o.Comment.IsSet()
}

// HasComment returns a boolean if a field has been set.
func (o *SetAttendanceRequest) HasComment() bool {
	if o != nil && o.Comment.IsSet() {
		return true
	}

	return false
}

// SetComment gets a reference to the given NullableString and assigns it to the Comment field.
func (o *SetAttendanceRequest) SetComment(v string) {
	o.Comment.Set(&v)
}
// SetCommentNil sets the value for Comment to be an explicit nil
func (o *SetAttendanceRequest) SetCommentNil() {
	o.Comment.Set(nil)
}

// UnsetComment ensures that no value is present for Comment, not even an explicit nil
func (o *SetAttendanceRequest) UnsetComment() {
	o.Comment.Unset()
}

func (o SetAttendanceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetAttendanceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["meeting_id"] = o.MeetingId
	toSerialize["enrollment_id"] = o.EnrollmentId
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if o.Comment.IsSet() {
		toSerialize["comment"] = o.Comment.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SetAttendanceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"meeting_id",
		"enrollment_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSetAttendanceRequest := _SetAttendanceRequest{}

	err = json.Unmarshal(data, &varSetAttendanceRequest)

	if err != nil {
		return err
	}

	*o = SetAttendanceRequest(varSetAttendanceRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "meeting_id")
		delete(additionalProperties, "enrollment_id")
		delete(additionalProperties, "state")
		delete(additionalProperties, "comment")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSetAttendanceRequest struct {
	value *SetAttendanceRequest
	isSet bool
}

func (v NullableSetAttendanceRequest) Get() *SetAttendanceRequest {
	return v.value
}

func (v *NullableSetAttendanceRequest) Set(val *SetAttendanceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSetAttendanceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSetAttendanceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetAttendanceRequest(val *SetAttendanceRequest) *NullableSetAttendanceRequest {
	return &NullableSetAttendanceRequest{value: val, isSet: true}
}

func (v NullableSetAttendanceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetAttendanceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


