/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SignupQuestion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignupQuestion{}

// SignupQuestion struct for SignupQuestion
type SignupQuestion struct {
	// Unique identifier of the question.
	Id int32 `json:"id"`
	// Position of the question used for ordering.
	Position int32 `json:"position"`
	FieldType SignupQuestionFieldType `json:"field_type"`
	// The title and label of the question
	Title string `json:"title"`
	// The slug of the question
	Slug string `json:"slug"`
	// Define if this question is required on the Signup page.
	Required bool `json:"required"`
	// Define to what type of models this should be linked.
	ForType string `json:"for_type"`
	// List of at what locations you want to show this field in the signup
	Visibility []string `json:"visibility"`
	// DEPRECATED: boolean if the question is visible for students. Please use the visibility attribute.
	ForStudent bool `json:"for_student"`
	// DEPRECATED: boolean if the question is visible for customers. Please use the visibility attribute.
	ForCustomer bool `json:"for_customer"`
	// Array of string with the choice options if the type of the field is select.
	Choices []string `json:"choices"`
	// The internal system name used for this field.
	SystemName NullableString `json:"system_name"`
	// boolean if the question is use as duplicate indicator.
	UseAsDuplicateIndicator bool `json:"use_as_duplicate_indicator"`
}

type _SignupQuestion SignupQuestion

// NewSignupQuestion instantiates a new SignupQuestion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignupQuestion(id int32, position int32, fieldType SignupQuestionFieldType, title string, slug string, required bool, forType string, visibility []string, forStudent bool, forCustomer bool, choices []string, systemName NullableString, useAsDuplicateIndicator bool) *SignupQuestion {
	this := SignupQuestion{}
	this.Id = id
	this.Position = position
	this.FieldType = fieldType
	this.Title = title
	this.Slug = slug
	this.Required = required
	this.ForType = forType
	this.Visibility = visibility
	this.ForStudent = forStudent
	this.ForCustomer = forCustomer
	this.Choices = choices
	this.SystemName = systemName
	this.UseAsDuplicateIndicator = useAsDuplicateIndicator
	return &this
}

// NewSignupQuestionWithDefaults instantiates a new SignupQuestion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignupQuestionWithDefaults() *SignupQuestion {
	this := SignupQuestion{}
	return &this
}

// GetId returns the Id field value
func (o *SignupQuestion) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SignupQuestion) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SignupQuestion) SetId(v int32) {
	o.Id = v
}

// GetPosition returns the Position field value
func (o *SignupQuestion) GetPosition() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Position
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
func (o *SignupQuestion) GetPositionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Position, true
}

// SetPosition sets field value
func (o *SignupQuestion) SetPosition(v int32) {
	o.Position = v
}

// GetFieldType returns the FieldType field value
func (o *SignupQuestion) GetFieldType() SignupQuestionFieldType {
	if o == nil {
		var ret SignupQuestionFieldType
		return ret
	}

	return o.FieldType
}

// GetFieldTypeOk returns a tuple with the FieldType field value
// and a boolean to check if the value has been set.
func (o *SignupQuestion) GetFieldTypeOk() (*SignupQuestionFieldType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldType, true
}

// SetFieldType sets field value
func (o *SignupQuestion) SetFieldType(v SignupQuestionFieldType) {
	o.FieldType = v
}

// GetTitle returns the Title field value
func (o *SignupQuestion) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *SignupQuestion) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *SignupQuestion) SetTitle(v string) {
	o.Title = v
}

// GetSlug returns the Slug field value
func (o *SignupQuestion) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *SignupQuestion) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *SignupQuestion) SetSlug(v string) {
	o.Slug = v
}

// GetRequired returns the Required field value
func (o *SignupQuestion) GetRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Required
}

// GetRequiredOk returns a tuple with the Required field value
// and a boolean to check if the value has been set.
func (o *SignupQuestion) GetRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Required, true
}

// SetRequired sets field value
func (o *SignupQuestion) SetRequired(v bool) {
	o.Required = v
}

// GetForType returns the ForType field value
func (o *SignupQuestion) GetForType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ForType
}

// GetForTypeOk returns a tuple with the ForType field value
// and a boolean to check if the value has been set.
func (o *SignupQuestion) GetForTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForType, true
}

// SetForType sets field value
func (o *SignupQuestion) SetForType(v string) {
	o.ForType = v
}

// GetVisibility returns the Visibility field value
func (o *SignupQuestion) GetVisibility() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value
// and a boolean to check if the value has been set.
func (o *SignupQuestion) GetVisibilityOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Visibility, true
}

// SetVisibility sets field value
func (o *SignupQuestion) SetVisibility(v []string) {
	o.Visibility = v
}

// GetForStudent returns the ForStudent field value
func (o *SignupQuestion) GetForStudent() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ForStudent
}

// GetForStudentOk returns a tuple with the ForStudent field value
// and a boolean to check if the value has been set.
func (o *SignupQuestion) GetForStudentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForStudent, true
}

// SetForStudent sets field value
func (o *SignupQuestion) SetForStudent(v bool) {
	o.ForStudent = v
}

// GetForCustomer returns the ForCustomer field value
func (o *SignupQuestion) GetForCustomer() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ForCustomer
}

// GetForCustomerOk returns a tuple with the ForCustomer field value
// and a boolean to check if the value has been set.
func (o *SignupQuestion) GetForCustomerOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForCustomer, true
}

// SetForCustomer sets field value
func (o *SignupQuestion) SetForCustomer(v bool) {
	o.ForCustomer = v
}

// GetChoices returns the Choices field value
func (o *SignupQuestion) GetChoices() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Choices
}

// GetChoicesOk returns a tuple with the Choices field value
// and a boolean to check if the value has been set.
func (o *SignupQuestion) GetChoicesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Choices, true
}

// SetChoices sets field value
func (o *SignupQuestion) SetChoices(v []string) {
	o.Choices = v
}

// GetSystemName returns the SystemName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SignupQuestion) GetSystemName() string {
	if o == nil || o.SystemName.Get() == nil {
		var ret string
		return ret
	}

	return *o.SystemName.Get()
}

// GetSystemNameOk returns a tuple with the SystemName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SignupQuestion) GetSystemNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SystemName.Get(), o.SystemName.IsSet()
}

// SetSystemName sets field value
func (o *SignupQuestion) SetSystemName(v string) {
	o.SystemName.Set(&v)
}

// GetUseAsDuplicateIndicator returns the UseAsDuplicateIndicator field value
func (o *SignupQuestion) GetUseAsDuplicateIndicator() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UseAsDuplicateIndicator
}

// GetUseAsDuplicateIndicatorOk returns a tuple with the UseAsDuplicateIndicator field value
// and a boolean to check if the value has been set.
func (o *SignupQuestion) GetUseAsDuplicateIndicatorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseAsDuplicateIndicator, true
}

// SetUseAsDuplicateIndicator sets field value
func (o *SignupQuestion) SetUseAsDuplicateIndicator(v bool) {
	o.UseAsDuplicateIndicator = v
}

func (o SignupQuestion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignupQuestion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["position"] = o.Position
	toSerialize["field_type"] = o.FieldType
	toSerialize["title"] = o.Title
	toSerialize["slug"] = o.Slug
	toSerialize["required"] = o.Required
	toSerialize["for_type"] = o.ForType
	toSerialize["visibility"] = o.Visibility
	toSerialize["for_student"] = o.ForStudent
	toSerialize["for_customer"] = o.ForCustomer
	toSerialize["choices"] = o.Choices
	toSerialize["system_name"] = o.SystemName.Get()
	toSerialize["use_as_duplicate_indicator"] = o.UseAsDuplicateIndicator
	return toSerialize, nil
}

func (o *SignupQuestion) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"position",
		"field_type",
		"title",
		"slug",
		"required",
		"for_type",
		"visibility",
		"for_student",
		"for_customer",
		"choices",
		"system_name",
		"use_as_duplicate_indicator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSignupQuestion := _SignupQuestion{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSignupQuestion)

	if err != nil {
		return err
	}

	*o = SignupQuestion(varSignupQuestion)

	return err
}

type NullableSignupQuestion struct {
	value *SignupQuestion
	isSet bool
}

func (v NullableSignupQuestion) Get() *SignupQuestion {
	return v.value
}

func (v *NullableSignupQuestion) Set(val *SignupQuestion) {
	v.value = val
	v.isSet = true
}

func (v NullableSignupQuestion) IsSet() bool {
	return v.isSet
}

func (v *NullableSignupQuestion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignupQuestion(val *SignupQuestion) *NullableSignupQuestion {
	return &NullableSignupQuestion{value: val, isSet: true}
}

func (v NullableSignupQuestion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignupQuestion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


