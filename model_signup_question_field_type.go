/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"fmt"
)

// SignupQuestionFieldType The type of field.
type SignupQuestionFieldType string

// List of SignupQuestionFieldType
const (
	BOOLEAN SignupQuestionFieldType = "boolean"
	DATEPICKER SignupQuestionFieldType = "datepicker"
	DECIMAL SignupQuestionFieldType = "decimal"
	PHONE SignupQuestionFieldType = "phone"
	SELECT SignupQuestionFieldType = "select"
	MULTISELECT SignupQuestionFieldType = "multiselect"
	SSN SignupQuestionFieldType = "ssn"
	STRING SignupQuestionFieldType = "string"
	TEXT SignupQuestionFieldType = "text"
	VAT_NUMBER SignupQuestionFieldType = "vat_number"
)

// All allowed values of SignupQuestionFieldType enum
var AllowedSignupQuestionFieldTypeEnumValues = []SignupQuestionFieldType{
	"boolean",
	"datepicker",
	"decimal",
	"phone",
	"select",
	"multiselect",
	"ssn",
	"string",
	"text",
	"vat_number",
}

func (v *SignupQuestionFieldType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SignupQuestionFieldType(value)
	for _, existing := range AllowedSignupQuestionFieldTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SignupQuestionFieldType", value)
}

// NewSignupQuestionFieldTypeFromValue returns a pointer to a valid SignupQuestionFieldType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSignupQuestionFieldTypeFromValue(v string) (*SignupQuestionFieldType, error) {
	ev := SignupQuestionFieldType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SignupQuestionFieldType: valid values are %v", v, AllowedSignupQuestionFieldTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SignupQuestionFieldType) IsValid() bool {
	for _, existing := range AllowedSignupQuestionFieldTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SignupQuestionFieldType value
func (v SignupQuestionFieldType) Ptr() *SignupQuestionFieldType {
	return &v
}

type NullableSignupQuestionFieldType struct {
	value *SignupQuestionFieldType
	isSet bool
}

func (v NullableSignupQuestionFieldType) Get() *SignupQuestionFieldType {
	return v.value
}

func (v *NullableSignupQuestionFieldType) Set(val *SignupQuestionFieldType) {
	v.value = val
	v.isSet = true
}

func (v NullableSignupQuestionFieldType) IsSet() bool {
	return v.isSet
}

func (v *NullableSignupQuestionFieldType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignupQuestionFieldType(val *SignupQuestionFieldType) *NullableSignupQuestionFieldType {
	return &NullableSignupQuestionFieldType{value: val, isSet: true}
}

func (v NullableSignupQuestionFieldType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignupQuestionFieldType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

