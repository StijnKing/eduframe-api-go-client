/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Teacher type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Teacher{}

// Teacher struct for Teacher
type Teacher struct {
	// Unique identifier of the user.
	Id int32 `json:"id"`
	// First name of the user.
	FirstName string `json:"first_name"`
	// Middle name of the user.
	MiddleName NullableString `json:"middle_name"`
	// Last name of the user.
	LastName string `json:"last_name"`
	// The e-mail of the user.
	Email string `json:"email"`
	// An array of integers representing unique identifier values associated with labels. 
	LabelIds []int32 `json:"label_ids"`
	// Whether the teacher is currently active.
	Active bool `json:"active"`
	// The relative url path to the avatar.
	AvatarUrl string `json:"avatar_url"`
	// The employee number of this user.
	EmployeeNumber NullableString `json:"employee_number"`
	// Short note about the teacher.
	Note NullableString `json:"note"`
	// Short description of the user.
	TeacherHeadline NullableString `json:"teacher_headline"`
	// Long description of the user. (same as description)
	TeacherDescription NullableString `json:"teacher_description"`
	Locale NullableLocale `json:"locale"`
	// Timestamp of last update.
	UpdatedAt time.Time `json:"updated_at"`
	// Timestamp of creation.
	CreatedAt time.Time `json:"created_at"`
}

type _Teacher Teacher

// NewTeacher instantiates a new Teacher object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeacher(id int32, firstName string, middleName NullableString, lastName string, email string, labelIds []int32, active bool, avatarUrl string, employeeNumber NullableString, note NullableString, teacherHeadline NullableString, teacherDescription NullableString, locale NullableLocale, updatedAt time.Time, createdAt time.Time) *Teacher {
	this := Teacher{}
	this.Id = id
	this.FirstName = firstName
	this.MiddleName = middleName
	this.LastName = lastName
	this.Email = email
	this.LabelIds = labelIds
	this.Active = active
	this.AvatarUrl = avatarUrl
	this.EmployeeNumber = employeeNumber
	this.Note = note
	this.TeacherHeadline = teacherHeadline
	this.TeacherDescription = teacherDescription
	this.Locale = locale
	this.UpdatedAt = updatedAt
	this.CreatedAt = createdAt
	return &this
}

// NewTeacherWithDefaults instantiates a new Teacher object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeacherWithDefaults() *Teacher {
	this := Teacher{}
	return &this
}

// GetId returns the Id field value
func (o *Teacher) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Teacher) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Teacher) SetId(v int32) {
	o.Id = v
}

// GetFirstName returns the FirstName field value
func (o *Teacher) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *Teacher) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *Teacher) SetFirstName(v string) {
	o.FirstName = v
}

// GetMiddleName returns the MiddleName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Teacher) GetMiddleName() string {
	if o == nil || o.MiddleName.Get() == nil {
		var ret string
		return ret
	}

	return *o.MiddleName.Get()
}

// GetMiddleNameOk returns a tuple with the MiddleName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Teacher) GetMiddleNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MiddleName.Get(), o.MiddleName.IsSet()
}

// SetMiddleName sets field value
func (o *Teacher) SetMiddleName(v string) {
	o.MiddleName.Set(&v)
}

// GetLastName returns the LastName field value
func (o *Teacher) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *Teacher) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *Teacher) SetLastName(v string) {
	o.LastName = v
}

// GetEmail returns the Email field value
func (o *Teacher) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *Teacher) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *Teacher) SetEmail(v string) {
	o.Email = v
}

// GetLabelIds returns the LabelIds field value
func (o *Teacher) GetLabelIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.LabelIds
}

// GetLabelIdsOk returns a tuple with the LabelIds field value
// and a boolean to check if the value has been set.
func (o *Teacher) GetLabelIdsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LabelIds, true
}

// SetLabelIds sets field value
func (o *Teacher) SetLabelIds(v []int32) {
	o.LabelIds = v
}

// GetActive returns the Active field value
func (o *Teacher) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *Teacher) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *Teacher) SetActive(v bool) {
	o.Active = v
}

// GetAvatarUrl returns the AvatarUrl field value
func (o *Teacher) GetAvatarUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value
// and a boolean to check if the value has been set.
func (o *Teacher) GetAvatarUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvatarUrl, true
}

// SetAvatarUrl sets field value
func (o *Teacher) SetAvatarUrl(v string) {
	o.AvatarUrl = v
}

// GetEmployeeNumber returns the EmployeeNumber field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Teacher) GetEmployeeNumber() string {
	if o == nil || o.EmployeeNumber.Get() == nil {
		var ret string
		return ret
	}

	return *o.EmployeeNumber.Get()
}

// GetEmployeeNumberOk returns a tuple with the EmployeeNumber field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Teacher) GetEmployeeNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmployeeNumber.Get(), o.EmployeeNumber.IsSet()
}

// SetEmployeeNumber sets field value
func (o *Teacher) SetEmployeeNumber(v string) {
	o.EmployeeNumber.Set(&v)
}

// GetNote returns the Note field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Teacher) GetNote() string {
	if o == nil || o.Note.Get() == nil {
		var ret string
		return ret
	}

	return *o.Note.Get()
}

// GetNoteOk returns a tuple with the Note field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Teacher) GetNoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Note.Get(), o.Note.IsSet()
}

// SetNote sets field value
func (o *Teacher) SetNote(v string) {
	o.Note.Set(&v)
}

// GetTeacherHeadline returns the TeacherHeadline field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Teacher) GetTeacherHeadline() string {
	if o == nil || o.TeacherHeadline.Get() == nil {
		var ret string
		return ret
	}

	return *o.TeacherHeadline.Get()
}

// GetTeacherHeadlineOk returns a tuple with the TeacherHeadline field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Teacher) GetTeacherHeadlineOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TeacherHeadline.Get(), o.TeacherHeadline.IsSet()
}

// SetTeacherHeadline sets field value
func (o *Teacher) SetTeacherHeadline(v string) {
	o.TeacherHeadline.Set(&v)
}

// GetTeacherDescription returns the TeacherDescription field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Teacher) GetTeacherDescription() string {
	if o == nil || o.TeacherDescription.Get() == nil {
		var ret string
		return ret
	}

	return *o.TeacherDescription.Get()
}

// GetTeacherDescriptionOk returns a tuple with the TeacherDescription field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Teacher) GetTeacherDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TeacherDescription.Get(), o.TeacherDescription.IsSet()
}

// SetTeacherDescription sets field value
func (o *Teacher) SetTeacherDescription(v string) {
	o.TeacherDescription.Set(&v)
}

// GetLocale returns the Locale field value
// If the value is explicit nil, the zero value for Locale will be returned
func (o *Teacher) GetLocale() Locale {
	if o == nil || o.Locale.Get() == nil {
		var ret Locale
		return ret
	}

	return *o.Locale.Get()
}

// GetLocaleOk returns a tuple with the Locale field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Teacher) GetLocaleOk() (*Locale, bool) {
	if o == nil {
		return nil, false
	}
	return o.Locale.Get(), o.Locale.IsSet()
}

// SetLocale sets field value
func (o *Teacher) SetLocale(v Locale) {
	o.Locale.Set(&v)
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Teacher) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Teacher) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Teacher) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Teacher) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Teacher) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Teacher) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o Teacher) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Teacher) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["first_name"] = o.FirstName
	toSerialize["middle_name"] = o.MiddleName.Get()
	toSerialize["last_name"] = o.LastName
	toSerialize["email"] = o.Email
	toSerialize["label_ids"] = o.LabelIds
	toSerialize["active"] = o.Active
	toSerialize["avatar_url"] = o.AvatarUrl
	toSerialize["employee_number"] = o.EmployeeNumber.Get()
	toSerialize["note"] = o.Note.Get()
	toSerialize["teacher_headline"] = o.TeacherHeadline.Get()
	toSerialize["teacher_description"] = o.TeacherDescription.Get()
	toSerialize["locale"] = o.Locale.Get()
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *Teacher) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"first_name",
		"middle_name",
		"last_name",
		"email",
		"label_ids",
		"active",
		"avatar_url",
		"employee_number",
		"note",
		"teacher_headline",
		"teacher_description",
		"locale",
		"updated_at",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTeacher := _Teacher{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTeacher)

	if err != nil {
		return err
	}

	*o = Teacher(varTeacher)

	return err
}

type NullableTeacher struct {
	value *Teacher
	isSet bool
}

func (v NullableTeacher) Get() *Teacher {
	return v.value
}

func (v *NullableTeacher) Set(val *Teacher) {
	v.value = val
	v.isSet = true
}

func (v NullableTeacher) IsSet() bool {
	return v.isSet
}

func (v *NullableTeacher) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeacher(val *Teacher) *NullableTeacher {
	return &NullableTeacher{value: val, isSet: true}
}

func (v NullableTeacher) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeacher) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


