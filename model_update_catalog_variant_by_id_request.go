/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateCatalogVariantByIdRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateCatalogVariantByIdRequest{}

// UpdateCatalogVariantByIdRequest struct for UpdateCatalogVariantByIdRequest
type UpdateCatalogVariantByIdRequest struct {
	// Boolean showing if the variant is published or not.
	IsPublished bool `json:"is_published"`
	AdditionalProperties map[string]interface{}
}

type _UpdateCatalogVariantByIdRequest UpdateCatalogVariantByIdRequest

// NewUpdateCatalogVariantByIdRequest instantiates a new UpdateCatalogVariantByIdRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateCatalogVariantByIdRequest(isPublished bool) *UpdateCatalogVariantByIdRequest {
	this := UpdateCatalogVariantByIdRequest{}
	this.IsPublished = isPublished
	return &this
}

// NewUpdateCatalogVariantByIdRequestWithDefaults instantiates a new UpdateCatalogVariantByIdRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateCatalogVariantByIdRequestWithDefaults() *UpdateCatalogVariantByIdRequest {
	this := UpdateCatalogVariantByIdRequest{}
	return &this
}

// GetIsPublished returns the IsPublished field value
func (o *UpdateCatalogVariantByIdRequest) GetIsPublished() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPublished
}

// GetIsPublishedOk returns a tuple with the IsPublished field value
// and a boolean to check if the value has been set.
func (o *UpdateCatalogVariantByIdRequest) GetIsPublishedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPublished, true
}

// SetIsPublished sets field value
func (o *UpdateCatalogVariantByIdRequest) SetIsPublished(v bool) {
	o.IsPublished = v
}

func (o UpdateCatalogVariantByIdRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateCatalogVariantByIdRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["is_published"] = o.IsPublished

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateCatalogVariantByIdRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"is_published",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateCatalogVariantByIdRequest := _UpdateCatalogVariantByIdRequest{}

	err = json.Unmarshal(data, &varUpdateCatalogVariantByIdRequest)

	if err != nil {
		return err
	}

	*o = UpdateCatalogVariantByIdRequest(varUpdateCatalogVariantByIdRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "is_published")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateCatalogVariantByIdRequest struct {
	value *UpdateCatalogVariantByIdRequest
	isSet bool
}

func (v NullableUpdateCatalogVariantByIdRequest) Get() *UpdateCatalogVariantByIdRequest {
	return v.value
}

func (v *NullableUpdateCatalogVariantByIdRequest) Set(val *UpdateCatalogVariantByIdRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateCatalogVariantByIdRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateCatalogVariantByIdRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateCatalogVariantByIdRequest(val *UpdateCatalogVariantByIdRequest) *NullableUpdateCatalogVariantByIdRequest {
	return &NullableUpdateCatalogVariantByIdRequest{value: val, isSet: true}
}

func (v NullableUpdateCatalogVariantByIdRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateCatalogVariantByIdRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


