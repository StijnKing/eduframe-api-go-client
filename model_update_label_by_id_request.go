/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
)

// checks if the UpdateLabelByIdRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateLabelByIdRequest{}

// UpdateLabelByIdRequest struct for UpdateLabelByIdRequest
type UpdateLabelByIdRequest struct {
	// The name of the label
	Name *string `json:"name,omitempty"`
	// Hex code of the color of the label
	Color *string `json:"color,omitempty"`
	// The model type for which this label is made available
	ModelType *string `json:"model_type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateLabelByIdRequest UpdateLabelByIdRequest

// NewUpdateLabelByIdRequest instantiates a new UpdateLabelByIdRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateLabelByIdRequest() *UpdateLabelByIdRequest {
	this := UpdateLabelByIdRequest{}
	return &this
}

// NewUpdateLabelByIdRequestWithDefaults instantiates a new UpdateLabelByIdRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateLabelByIdRequestWithDefaults() *UpdateLabelByIdRequest {
	this := UpdateLabelByIdRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateLabelByIdRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLabelByIdRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateLabelByIdRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateLabelByIdRequest) SetName(v string) {
	o.Name = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *UpdateLabelByIdRequest) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLabelByIdRequest) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *UpdateLabelByIdRequest) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *UpdateLabelByIdRequest) SetColor(v string) {
	o.Color = &v
}

// GetModelType returns the ModelType field value if set, zero value otherwise.
func (o *UpdateLabelByIdRequest) GetModelType() string {
	if o == nil || IsNil(o.ModelType) {
		var ret string
		return ret
	}
	return *o.ModelType
}

// GetModelTypeOk returns a tuple with the ModelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLabelByIdRequest) GetModelTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ModelType) {
		return nil, false
	}
	return o.ModelType, true
}

// HasModelType returns a boolean if a field has been set.
func (o *UpdateLabelByIdRequest) HasModelType() bool {
	if o != nil && !IsNil(o.ModelType) {
		return true
	}

	return false
}

// SetModelType gets a reference to the given string and assigns it to the ModelType field.
func (o *UpdateLabelByIdRequest) SetModelType(v string) {
	o.ModelType = &v
}

func (o UpdateLabelByIdRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateLabelByIdRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.ModelType) {
		toSerialize["model_type"] = o.ModelType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateLabelByIdRequest) UnmarshalJSON(data []byte) (err error) {
	varUpdateLabelByIdRequest := _UpdateLabelByIdRequest{}

	err = json.Unmarshal(data, &varUpdateLabelByIdRequest)

	if err != nil {
		return err
	}

	*o = UpdateLabelByIdRequest(varUpdateLabelByIdRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "color")
		delete(additionalProperties, "model_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateLabelByIdRequest struct {
	value *UpdateLabelByIdRequest
	isSet bool
}

func (v NullableUpdateLabelByIdRequest) Get() *UpdateLabelByIdRequest {
	return v.value
}

func (v *NullableUpdateLabelByIdRequest) Set(val *UpdateLabelByIdRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateLabelByIdRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateLabelByIdRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateLabelByIdRequest(val *UpdateLabelByIdRequest) *NullableUpdateLabelByIdRequest {
	return &NullableUpdateLabelByIdRequest{value: val, isSet: true}
}

func (v NullableUpdateLabelByIdRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateLabelByIdRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


