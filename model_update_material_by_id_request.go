/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
)

// checks if the UpdateMaterialByIdRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateMaterialByIdRequest{}

// UpdateMaterialByIdRequest struct for UpdateMaterialByIdRequest
type UpdateMaterialByIdRequest struct {
	// Name of the material.
	Name *string `json:"name,omitempty"`
	// Unique identifier of the material group.
	MaterialGroupId *int32 `json:"material_group_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateMaterialByIdRequest UpdateMaterialByIdRequest

// NewUpdateMaterialByIdRequest instantiates a new UpdateMaterialByIdRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateMaterialByIdRequest() *UpdateMaterialByIdRequest {
	this := UpdateMaterialByIdRequest{}
	return &this
}

// NewUpdateMaterialByIdRequestWithDefaults instantiates a new UpdateMaterialByIdRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateMaterialByIdRequestWithDefaults() *UpdateMaterialByIdRequest {
	this := UpdateMaterialByIdRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateMaterialByIdRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMaterialByIdRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateMaterialByIdRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateMaterialByIdRequest) SetName(v string) {
	o.Name = &v
}

// GetMaterialGroupId returns the MaterialGroupId field value if set, zero value otherwise.
func (o *UpdateMaterialByIdRequest) GetMaterialGroupId() int32 {
	if o == nil || IsNil(o.MaterialGroupId) {
		var ret int32
		return ret
	}
	return *o.MaterialGroupId
}

// GetMaterialGroupIdOk returns a tuple with the MaterialGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMaterialByIdRequest) GetMaterialGroupIdOk() (*int32, bool) {
	if o == nil || IsNil(o.MaterialGroupId) {
		return nil, false
	}
	return o.MaterialGroupId, true
}

// HasMaterialGroupId returns a boolean if a field has been set.
func (o *UpdateMaterialByIdRequest) HasMaterialGroupId() bool {
	if o != nil && !IsNil(o.MaterialGroupId) {
		return true
	}

	return false
}

// SetMaterialGroupId gets a reference to the given int32 and assigns it to the MaterialGroupId field.
func (o *UpdateMaterialByIdRequest) SetMaterialGroupId(v int32) {
	o.MaterialGroupId = &v
}

func (o UpdateMaterialByIdRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateMaterialByIdRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.MaterialGroupId) {
		toSerialize["material_group_id"] = o.MaterialGroupId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateMaterialByIdRequest) UnmarshalJSON(data []byte) (err error) {
	varUpdateMaterialByIdRequest := _UpdateMaterialByIdRequest{}

	err = json.Unmarshal(data, &varUpdateMaterialByIdRequest)

	if err != nil {
		return err
	}

	*o = UpdateMaterialByIdRequest(varUpdateMaterialByIdRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "material_group_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateMaterialByIdRequest struct {
	value *UpdateMaterialByIdRequest
	isSet bool
}

func (v NullableUpdateMaterialByIdRequest) Get() *UpdateMaterialByIdRequest {
	return v.value
}

func (v *NullableUpdateMaterialByIdRequest) Set(val *UpdateMaterialByIdRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateMaterialByIdRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateMaterialByIdRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateMaterialByIdRequest(val *UpdateMaterialByIdRequest) *NullableUpdateMaterialByIdRequest {
	return &NullableUpdateMaterialByIdRequest{value: val, isSet: true}
}

func (v NullableUpdateMaterialByIdRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateMaterialByIdRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


