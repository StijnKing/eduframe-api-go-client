/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
)

// checks if the UpdateWebhookByIdRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateWebhookByIdRequest{}

// UpdateWebhookByIdRequest struct for UpdateWebhookByIdRequest
type UpdateWebhookByIdRequest struct {
	// The callback url for Eduframe to send a HTTP POST payload to.
	Url *string `json:"url,omitempty"`
	// State of webhook.
	Active *bool `json:"active,omitempty"`
	// Array of events.
	Events []WebhookEvent `json:"events,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateWebhookByIdRequest UpdateWebhookByIdRequest

// NewUpdateWebhookByIdRequest instantiates a new UpdateWebhookByIdRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateWebhookByIdRequest() *UpdateWebhookByIdRequest {
	this := UpdateWebhookByIdRequest{}
	return &this
}

// NewUpdateWebhookByIdRequestWithDefaults instantiates a new UpdateWebhookByIdRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateWebhookByIdRequestWithDefaults() *UpdateWebhookByIdRequest {
	this := UpdateWebhookByIdRequest{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *UpdateWebhookByIdRequest) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWebhookByIdRequest) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *UpdateWebhookByIdRequest) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *UpdateWebhookByIdRequest) SetUrl(v string) {
	o.Url = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *UpdateWebhookByIdRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWebhookByIdRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *UpdateWebhookByIdRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *UpdateWebhookByIdRequest) SetActive(v bool) {
	o.Active = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *UpdateWebhookByIdRequest) GetEvents() []WebhookEvent {
	if o == nil || IsNil(o.Events) {
		var ret []WebhookEvent
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWebhookByIdRequest) GetEventsOk() ([]WebhookEvent, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *UpdateWebhookByIdRequest) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []WebhookEvent and assigns it to the Events field.
func (o *UpdateWebhookByIdRequest) SetEvents(v []WebhookEvent) {
	o.Events = v
}

func (o UpdateWebhookByIdRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateWebhookByIdRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateWebhookByIdRequest) UnmarshalJSON(data []byte) (err error) {
	varUpdateWebhookByIdRequest := _UpdateWebhookByIdRequest{}

	err = json.Unmarshal(data, &varUpdateWebhookByIdRequest)

	if err != nil {
		return err
	}

	*o = UpdateWebhookByIdRequest(varUpdateWebhookByIdRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "url")
		delete(additionalProperties, "active")
		delete(additionalProperties, "events")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateWebhookByIdRequest struct {
	value *UpdateWebhookByIdRequest
	isSet bool
}

func (v NullableUpdateWebhookByIdRequest) Get() *UpdateWebhookByIdRequest {
	return v.value
}

func (v *NullableUpdateWebhookByIdRequest) Set(val *UpdateWebhookByIdRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateWebhookByIdRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateWebhookByIdRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateWebhookByIdRequest(val *UpdateWebhookByIdRequest) *NullableUpdateWebhookByIdRequest {
	return &NullableUpdateWebhookByIdRequest{value: val, isSet: true}
}

func (v NullableUpdateWebhookByIdRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateWebhookByIdRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


