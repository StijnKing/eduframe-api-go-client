/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"fmt"
)

// UsaState An letter USA state code.
type UsaState string

// List of UsaState
const (
	USASTATE_AL UsaState = "AL"
	USASTATE_AK UsaState = "AK"
	USASTATE_AZ UsaState = "AZ"
	USASTATE_AR UsaState = "AR"
	USASTATE_CA UsaState = "CA"
	USASTATE_CO UsaState = "CO"
	USASTATE_CT UsaState = "CT"
	USASTATE_DC UsaState = "DC"
	USASTATE_DE UsaState = "DE"
	USASTATE_FL UsaState = "FL"
	USASTATE_GA UsaState = "GA"
	USASTATE_HI UsaState = "HI"
	USASTATE_ID UsaState = "ID"
	USASTATE_IL UsaState = "IL"
	USASTATE_IN UsaState = "IN"
	USASTATE_IA UsaState = "IA"
	USASTATE_KS UsaState = "KS"
	USASTATE_KY UsaState = "KY"
	USASTATE_LA UsaState = "LA"
	USASTATE_ME UsaState = "ME"
	USASTATE_MD UsaState = "MD"
	USASTATE_MA UsaState = "MA"
	USASTATE_MI UsaState = "MI"
	USASTATE_MN UsaState = "MN"
	USASTATE_MS UsaState = "MS"
	USASTATE_MO UsaState = "MO"
	USASTATE_MT UsaState = "MT"
	USASTATE_NE UsaState = "NE"
	USASTATE_NV UsaState = "NV"
	USASTATE_NH UsaState = "NH"
	USASTATE_NJ UsaState = "NJ"
	USASTATE_NM UsaState = "NM"
	USASTATE_NY UsaState = "NY"
	USASTATE_NC UsaState = "NC"
	USASTATE_ND UsaState = "ND"
	USASTATE_OH UsaState = "OH"
	USASTATE_OK UsaState = "OK"
	USASTATE_OR UsaState = "OR"
	USASTATE_PA UsaState = "PA"
	USASTATE_RI UsaState = "RI"
	USASTATE_SC UsaState = "SC"
	USASTATE_SD UsaState = "SD"
	USASTATE_TN UsaState = "TN"
	USASTATE_TX UsaState = "TX"
	USASTATE_UT UsaState = "UT"
	USASTATE_VT UsaState = "VT"
	USASTATE_VA UsaState = "VA"
	USASTATE_WA UsaState = "WA"
	USASTATE_WV UsaState = "WV"
	USASTATE_WI UsaState = "WI"
	USASTATE_WY UsaState = "WY"
)

// All allowed values of UsaState enum
var AllowedUsaStateEnumValues = []UsaState{
	"AL",
	"AK",
	"AZ",
	"AR",
	"CA",
	"CO",
	"CT",
	"DC",
	"DE",
	"FL",
	"GA",
	"HI",
	"ID",
	"IL",
	"IN",
	"IA",
	"KS",
	"KY",
	"LA",
	"ME",
	"MD",
	"MA",
	"MI",
	"MN",
	"MS",
	"MO",
	"MT",
	"NE",
	"NV",
	"NH",
	"NJ",
	"NM",
	"NY",
	"NC",
	"ND",
	"OH",
	"OK",
	"OR",
	"PA",
	"RI",
	"SC",
	"SD",
	"TN",
	"TX",
	"UT",
	"VT",
	"VA",
	"WA",
	"WV",
	"WI",
	"WY",
}

func (v *UsaState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UsaState(value)
	for _, existing := range AllowedUsaStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UsaState", value)
}

// NewUsaStateFromValue returns a pointer to a valid UsaState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUsaStateFromValue(v string) (*UsaState, error) {
	ev := UsaState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UsaState: valid values are %v", v, AllowedUsaStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UsaState) IsValid() bool {
	for _, existing := range AllowedUsaStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UsaState value
func (v UsaState) Ptr() *UsaState {
	return &v
}

type NullableUsaState struct {
	value *UsaState
	isSet bool
}

func (v NullableUsaState) Get() *UsaState {
	return v.value
}

func (v *NullableUsaState) Set(val *UsaState) {
	v.value = val
	v.isSet = true
}

func (v NullableUsaState) IsSet() bool {
	return v.isSet
}

func (v *NullableUsaState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsaState(val *UsaState) *NullableUsaState {
	return &NullableUsaState{value: val, isSet: true}
}

func (v NullableUsaState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsaState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

