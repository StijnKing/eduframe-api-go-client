/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Variant type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Variant{}

// Variant struct for Variant
type Variant struct {
	// Unique identifier of the catalog variant.
	Id int32 `json:"id"`
	// Unique identifier of the catalog product.
	ProductId int32 `json:"product_id"`
	// Name of the catalog variant.
	Name string `json:"name"`
	// An optional unique identifier of the catalog variant.
	Sku NullableString `json:"sku,omitempty"`
	CostScheme CostScheme `json:"cost_scheme"`
	// Cost of the variant.
	Cost NullableString `json:"cost"`
	Currency Currency `json:"currency"`
	VariantableType VariantableType `json:"variantable_type"`
	// Unique identifier of the variantable.
	VariantableId int32 `json:"variantable_id"`
	// Availability of the catalog variant.
	Availability string `json:"availability"`
	// Number of available places.
	AvailablePlaces int32 `json:"available_places"`
	// Boolean showing if the variant is published or not.
	IsPublished bool `json:"is_published"`
	// Boolean showing if the variant is shown on the website or not.
	ShowOnWebsite bool `json:"show_on_website"`
	// Timestamp of last update.
	UpdatedAt time.Time `json:"updated_at"`
	// Timestamp of creation.
	CreatedAt time.Time `json:"created_at"`
}

type _Variant Variant

// NewVariant instantiates a new Variant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariant(id int32, productId int32, name string, costScheme CostScheme, cost NullableString, currency Currency, variantableType VariantableType, variantableId int32, availability string, availablePlaces int32, isPublished bool, showOnWebsite bool, updatedAt time.Time, createdAt time.Time) *Variant {
	this := Variant{}
	this.Id = id
	this.ProductId = productId
	this.Name = name
	this.CostScheme = costScheme
	this.Cost = cost
	this.Currency = currency
	this.VariantableType = variantableType
	this.VariantableId = variantableId
	this.Availability = availability
	this.AvailablePlaces = availablePlaces
	this.IsPublished = isPublished
	this.ShowOnWebsite = showOnWebsite
	this.UpdatedAt = updatedAt
	this.CreatedAt = createdAt
	return &this
}

// NewVariantWithDefaults instantiates a new Variant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariantWithDefaults() *Variant {
	this := Variant{}
	return &this
}

// GetId returns the Id field value
func (o *Variant) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Variant) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Variant) SetId(v int32) {
	o.Id = v
}

// GetProductId returns the ProductId field value
func (o *Variant) GetProductId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value
// and a boolean to check if the value has been set.
func (o *Variant) GetProductIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductId, true
}

// SetProductId sets field value
func (o *Variant) SetProductId(v int32) {
	o.ProductId = v
}

// GetName returns the Name field value
func (o *Variant) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Variant) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Variant) SetName(v string) {
	o.Name = v
}

// GetSku returns the Sku field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Variant) GetSku() string {
	if o == nil || IsNil(o.Sku.Get()) {
		var ret string
		return ret
	}
	return *o.Sku.Get()
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Variant) GetSkuOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sku.Get(), o.Sku.IsSet()
}

// HasSku returns a boolean if a field has been set.
func (o *Variant) HasSku() bool {
	if o != nil && o.Sku.IsSet() {
		return true
	}

	return false
}

// SetSku gets a reference to the given NullableString and assigns it to the Sku field.
func (o *Variant) SetSku(v string) {
	o.Sku.Set(&v)
}
// SetSkuNil sets the value for Sku to be an explicit nil
func (o *Variant) SetSkuNil() {
	o.Sku.Set(nil)
}

// UnsetSku ensures that no value is present for Sku, not even an explicit nil
func (o *Variant) UnsetSku() {
	o.Sku.Unset()
}

// GetCostScheme returns the CostScheme field value
func (o *Variant) GetCostScheme() CostScheme {
	if o == nil {
		var ret CostScheme
		return ret
	}

	return o.CostScheme
}

// GetCostSchemeOk returns a tuple with the CostScheme field value
// and a boolean to check if the value has been set.
func (o *Variant) GetCostSchemeOk() (*CostScheme, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CostScheme, true
}

// SetCostScheme sets field value
func (o *Variant) SetCostScheme(v CostScheme) {
	o.CostScheme = v
}

// GetCost returns the Cost field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Variant) GetCost() string {
	if o == nil || o.Cost.Get() == nil {
		var ret string
		return ret
	}

	return *o.Cost.Get()
}

// GetCostOk returns a tuple with the Cost field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Variant) GetCostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cost.Get(), o.Cost.IsSet()
}

// SetCost sets field value
func (o *Variant) SetCost(v string) {
	o.Cost.Set(&v)
}

// GetCurrency returns the Currency field value
func (o *Variant) GetCurrency() Currency {
	if o == nil {
		var ret Currency
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *Variant) GetCurrencyOk() (*Currency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *Variant) SetCurrency(v Currency) {
	o.Currency = v
}

// GetVariantableType returns the VariantableType field value
func (o *Variant) GetVariantableType() VariantableType {
	if o == nil {
		var ret VariantableType
		return ret
	}

	return o.VariantableType
}

// GetVariantableTypeOk returns a tuple with the VariantableType field value
// and a boolean to check if the value has been set.
func (o *Variant) GetVariantableTypeOk() (*VariantableType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VariantableType, true
}

// SetVariantableType sets field value
func (o *Variant) SetVariantableType(v VariantableType) {
	o.VariantableType = v
}

// GetVariantableId returns the VariantableId field value
func (o *Variant) GetVariantableId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VariantableId
}

// GetVariantableIdOk returns a tuple with the VariantableId field value
// and a boolean to check if the value has been set.
func (o *Variant) GetVariantableIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VariantableId, true
}

// SetVariantableId sets field value
func (o *Variant) SetVariantableId(v int32) {
	o.VariantableId = v
}

// GetAvailability returns the Availability field value
func (o *Variant) GetAvailability() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Availability
}

// GetAvailabilityOk returns a tuple with the Availability field value
// and a boolean to check if the value has been set.
func (o *Variant) GetAvailabilityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Availability, true
}

// SetAvailability sets field value
func (o *Variant) SetAvailability(v string) {
	o.Availability = v
}

// GetAvailablePlaces returns the AvailablePlaces field value
func (o *Variant) GetAvailablePlaces() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AvailablePlaces
}

// GetAvailablePlacesOk returns a tuple with the AvailablePlaces field value
// and a boolean to check if the value has been set.
func (o *Variant) GetAvailablePlacesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvailablePlaces, true
}

// SetAvailablePlaces sets field value
func (o *Variant) SetAvailablePlaces(v int32) {
	o.AvailablePlaces = v
}

// GetIsPublished returns the IsPublished field value
func (o *Variant) GetIsPublished() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPublished
}

// GetIsPublishedOk returns a tuple with the IsPublished field value
// and a boolean to check if the value has been set.
func (o *Variant) GetIsPublishedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPublished, true
}

// SetIsPublished sets field value
func (o *Variant) SetIsPublished(v bool) {
	o.IsPublished = v
}

// GetShowOnWebsite returns the ShowOnWebsite field value
func (o *Variant) GetShowOnWebsite() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ShowOnWebsite
}

// GetShowOnWebsiteOk returns a tuple with the ShowOnWebsite field value
// and a boolean to check if the value has been set.
func (o *Variant) GetShowOnWebsiteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShowOnWebsite, true
}

// SetShowOnWebsite sets field value
func (o *Variant) SetShowOnWebsite(v bool) {
	o.ShowOnWebsite = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Variant) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Variant) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Variant) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Variant) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Variant) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Variant) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o Variant) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Variant) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["product_id"] = o.ProductId
	toSerialize["name"] = o.Name
	if o.Sku.IsSet() {
		toSerialize["sku"] = o.Sku.Get()
	}
	toSerialize["cost_scheme"] = o.CostScheme
	toSerialize["cost"] = o.Cost.Get()
	toSerialize["currency"] = o.Currency
	toSerialize["variantable_type"] = o.VariantableType
	toSerialize["variantable_id"] = o.VariantableId
	toSerialize["availability"] = o.Availability
	toSerialize["available_places"] = o.AvailablePlaces
	toSerialize["is_published"] = o.IsPublished
	toSerialize["show_on_website"] = o.ShowOnWebsite
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *Variant) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"product_id",
		"name",
		"cost_scheme",
		"cost",
		"currency",
		"variantable_type",
		"variantable_id",
		"availability",
		"available_places",
		"is_published",
		"show_on_website",
		"updated_at",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVariant := _Variant{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVariant)

	if err != nil {
		return err
	}

	*o = Variant(varVariant)

	return err
}

type NullableVariant struct {
	value *Variant
	isSet bool
}

func (v NullableVariant) Get() *Variant {
	return v.value
}

func (v *NullableVariant) Set(val *Variant) {
	v.value = val
	v.isSet = true
}

func (v NullableVariant) IsSet() bool {
	return v.isSet
}

func (v *NullableVariant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariant(val *Variant) *NullableVariant {
	return &NullableVariant{value: val, isSet: true}
}

func (v NullableVariant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


