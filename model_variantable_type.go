/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"fmt"
)

// VariantableType The type of the catalog variant.
type VariantableType string

// List of VariantableType
const (
	PLANNED_COURSE VariantableType = "PlannedCourse"
	PROGRAMEDITION VariantableType = "Program::Edition"
)

// All allowed values of VariantableType enum
var AllowedVariantableTypeEnumValues = []VariantableType{
	"PlannedCourse",
	"Program::Edition",
}

func (v *VariantableType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VariantableType(value)
	for _, existing := range AllowedVariantableTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VariantableType", value)
}

// NewVariantableTypeFromValue returns a pointer to a valid VariantableType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVariantableTypeFromValue(v string) (*VariantableType, error) {
	ev := VariantableType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VariantableType: valid values are %v", v, AllowedVariantableTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VariantableType) IsValid() bool {
	for _, existing := range AllowedVariantableTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VariantableType value
func (v VariantableType) Ptr() *VariantableType {
	return &v
}

type NullableVariantableType struct {
	value *VariantableType
	isSet bool
}

func (v NullableVariantableType) Get() *VariantableType {
	return v.value
}

func (v *NullableVariantableType) Set(val *VariantableType) {
	v.value = val
	v.isSet = true
}

func (v NullableVariantableType) IsSet() bool {
	return v.isSet
}

func (v *NullableVariantableType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariantableType(val *VariantableType) *NullableVariantableType {
	return &NullableVariantableType{value: val, isSet: true}
}

func (v NullableVariantableType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariantableType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

