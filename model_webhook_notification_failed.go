/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the WebhookNotificationFailed type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookNotificationFailed{}

// WebhookNotificationFailed struct for WebhookNotificationFailed
type WebhookNotificationFailed struct {
	// Unique identifier of the webhook notification.
	Id string `json:"id"`
	// Unique identifier of the linked event.
	EventId string `json:"event_id"`
	// Unique identifier of the linked webhook.
	WebhookId string `json:"webhook_id"`
	// The content of the webhook.
	Data map[string]interface{} `json:"data"`
	// Status of the webhook notification.
	Status string `json:"status"`
	// Timestamp of creation.
	CreatedAt time.Time `json:"created_at"`
	AdditionalProperties map[string]interface{}
}

type _WebhookNotificationFailed WebhookNotificationFailed

// NewWebhookNotificationFailed instantiates a new WebhookNotificationFailed object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookNotificationFailed(id string, eventId string, webhookId string, data map[string]interface{}, status string, createdAt time.Time) *WebhookNotificationFailed {
	this := WebhookNotificationFailed{}
	this.Id = id
	this.EventId = eventId
	this.WebhookId = webhookId
	this.Data = data
	this.Status = status
	this.CreatedAt = createdAt
	return &this
}

// NewWebhookNotificationFailedWithDefaults instantiates a new WebhookNotificationFailed object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookNotificationFailedWithDefaults() *WebhookNotificationFailed {
	this := WebhookNotificationFailed{}
	return &this
}

// GetId returns the Id field value
func (o *WebhookNotificationFailed) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WebhookNotificationFailed) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WebhookNotificationFailed) SetId(v string) {
	o.Id = v
}

// GetEventId returns the EventId field value
func (o *WebhookNotificationFailed) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *WebhookNotificationFailed) GetEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *WebhookNotificationFailed) SetEventId(v string) {
	o.EventId = v
}

// GetWebhookId returns the WebhookId field value
func (o *WebhookNotificationFailed) GetWebhookId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WebhookId
}

// GetWebhookIdOk returns a tuple with the WebhookId field value
// and a boolean to check if the value has been set.
func (o *WebhookNotificationFailed) GetWebhookIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WebhookId, true
}

// SetWebhookId sets field value
func (o *WebhookNotificationFailed) SetWebhookId(v string) {
	o.WebhookId = v
}

// GetData returns the Data field value
func (o *WebhookNotificationFailed) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *WebhookNotificationFailed) GetDataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *WebhookNotificationFailed) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetStatus returns the Status field value
func (o *WebhookNotificationFailed) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *WebhookNotificationFailed) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *WebhookNotificationFailed) SetStatus(v string) {
	o.Status = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *WebhookNotificationFailed) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *WebhookNotificationFailed) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *WebhookNotificationFailed) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o WebhookNotificationFailed) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookNotificationFailed) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["event_id"] = o.EventId
	toSerialize["webhook_id"] = o.WebhookId
	toSerialize["data"] = o.Data
	toSerialize["status"] = o.Status
	toSerialize["created_at"] = o.CreatedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WebhookNotificationFailed) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"event_id",
		"webhook_id",
		"data",
		"status",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWebhookNotificationFailed := _WebhookNotificationFailed{}

	err = json.Unmarshal(data, &varWebhookNotificationFailed)

	if err != nil {
		return err
	}

	*o = WebhookNotificationFailed(varWebhookNotificationFailed)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "event_id")
		delete(additionalProperties, "webhook_id")
		delete(additionalProperties, "data")
		delete(additionalProperties, "status")
		delete(additionalProperties, "created_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWebhookNotificationFailed struct {
	value *WebhookNotificationFailed
	isSet bool
}

func (v NullableWebhookNotificationFailed) Get() *WebhookNotificationFailed {
	return v.value
}

func (v *NullableWebhookNotificationFailed) Set(val *WebhookNotificationFailed) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookNotificationFailed) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookNotificationFailed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookNotificationFailed(val *WebhookNotificationFailed) *NullableWebhookNotificationFailed {
	return &NullableWebhookNotificationFailed{value: val, isSet: true}
}

func (v NullableWebhookNotificationFailed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookNotificationFailed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


