/*
Eduframe - API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eduframe

import (
	"encoding/json"
	"fmt"
)

// checks if the WebhookNotificationWithIncludes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookNotificationWithIncludes{}

// WebhookNotificationWithIncludes struct for WebhookNotificationWithIncludes
type WebhookNotificationWithIncludes struct {
	// Unique identifier of the webhook notification.
	Id string `json:"id"`
	// Unique identifier of the linked event.
	EventId string `json:"event_id"`
	// The content of the webhook.
	Data map[string]interface{} `json:"data"`
	// Status of the webhook notification.
	Status string `json:"status"`
	SendAttempts []WebhookNotificationWithIncludesSendAttemptsInner `json:"send_attempts"`
	AdditionalProperties map[string]interface{}
}

type _WebhookNotificationWithIncludes WebhookNotificationWithIncludes

// NewWebhookNotificationWithIncludes instantiates a new WebhookNotificationWithIncludes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookNotificationWithIncludes(id string, eventId string, data map[string]interface{}, status string, sendAttempts []WebhookNotificationWithIncludesSendAttemptsInner) *WebhookNotificationWithIncludes {
	this := WebhookNotificationWithIncludes{}
	this.Id = id
	this.EventId = eventId
	this.Data = data
	this.Status = status
	this.SendAttempts = sendAttempts
	return &this
}

// NewWebhookNotificationWithIncludesWithDefaults instantiates a new WebhookNotificationWithIncludes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookNotificationWithIncludesWithDefaults() *WebhookNotificationWithIncludes {
	this := WebhookNotificationWithIncludes{}
	return &this
}

// GetId returns the Id field value
func (o *WebhookNotificationWithIncludes) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WebhookNotificationWithIncludes) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WebhookNotificationWithIncludes) SetId(v string) {
	o.Id = v
}

// GetEventId returns the EventId field value
func (o *WebhookNotificationWithIncludes) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *WebhookNotificationWithIncludes) GetEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *WebhookNotificationWithIncludes) SetEventId(v string) {
	o.EventId = v
}

// GetData returns the Data field value
func (o *WebhookNotificationWithIncludes) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *WebhookNotificationWithIncludes) GetDataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *WebhookNotificationWithIncludes) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetStatus returns the Status field value
func (o *WebhookNotificationWithIncludes) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *WebhookNotificationWithIncludes) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *WebhookNotificationWithIncludes) SetStatus(v string) {
	o.Status = v
}

// GetSendAttempts returns the SendAttempts field value
func (o *WebhookNotificationWithIncludes) GetSendAttempts() []WebhookNotificationWithIncludesSendAttemptsInner {
	if o == nil {
		var ret []WebhookNotificationWithIncludesSendAttemptsInner
		return ret
	}

	return o.SendAttempts
}

// GetSendAttemptsOk returns a tuple with the SendAttempts field value
// and a boolean to check if the value has been set.
func (o *WebhookNotificationWithIncludes) GetSendAttemptsOk() ([]WebhookNotificationWithIncludesSendAttemptsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.SendAttempts, true
}

// SetSendAttempts sets field value
func (o *WebhookNotificationWithIncludes) SetSendAttempts(v []WebhookNotificationWithIncludesSendAttemptsInner) {
	o.SendAttempts = v
}

func (o WebhookNotificationWithIncludes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookNotificationWithIncludes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["event_id"] = o.EventId
	toSerialize["data"] = o.Data
	toSerialize["status"] = o.Status
	toSerialize["send_attempts"] = o.SendAttempts

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WebhookNotificationWithIncludes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"event_id",
		"data",
		"status",
		"send_attempts",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWebhookNotificationWithIncludes := _WebhookNotificationWithIncludes{}

	err = json.Unmarshal(data, &varWebhookNotificationWithIncludes)

	if err != nil {
		return err
	}

	*o = WebhookNotificationWithIncludes(varWebhookNotificationWithIncludes)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "event_id")
		delete(additionalProperties, "data")
		delete(additionalProperties, "status")
		delete(additionalProperties, "send_attempts")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWebhookNotificationWithIncludes struct {
	value *WebhookNotificationWithIncludes
	isSet bool
}

func (v NullableWebhookNotificationWithIncludes) Get() *WebhookNotificationWithIncludes {
	return v.value
}

func (v *NullableWebhookNotificationWithIncludes) Set(val *WebhookNotificationWithIncludes) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookNotificationWithIncludes) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookNotificationWithIncludes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookNotificationWithIncludes(val *WebhookNotificationWithIncludes) *NullableWebhookNotificationWithIncludes {
	return &NullableWebhookNotificationWithIncludes{value: val, isSet: true}
}

func (v NullableWebhookNotificationWithIncludes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookNotificationWithIncludes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


